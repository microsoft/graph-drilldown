{"version":3,"file":"main.e3043adfa9c111223fb6.js","mappings":";;;;;;;AA+DA;AACA;;;;;AAKA;AAMA;;AAIA;;AAEA;ACrDA;;AA2EA;;;AAKA;;;;AAMA;;;;ACxFA;;;ACXA;ACoBA;AAGA;;;AAKA;;AAIA;;AC1CA;;;;ACcA;AACA;ACnBA;;;;;;;;;;ACOA;ACFA;;;AAIA;;AAGA;;AAGA;;;;;;;;AC0HA;;;;;;;;;;;;;;ACvHA;;;AAoEA;AAEA;;;AAGA;AAGA;;;ACpFA;;;;;AA2CA;;AAEA;AAGA;;;;AChDA;;;;AAqBA;;;;AAMA;;;;AAMA;ACsDA;AACA;AAGA;;AAIA;;;;;AC3FA;;;ACwDA;AACA;;AAQA;;;AC5DA;;;AAoDA;AACA;AAGA;;;;AAMA;;AAIA;;AAIA;;ACqBA;;ACpEA;AACA;AC0jBA;AC9kBA;AACA;;;;ACXA;;;AAsJA;;AAMA;;AAGA;;;;;AAMA;;;;;;;AAQA;;;;;AAMA;;ACxLA;;ACCA;;AAyEA;;AAMA;;;AAIA;;;;AAKA;;;;;AC9FA;;;;ACUA;;;AA2EA;;;;;AC3EA;;ACsHA;;AAGA;;;;;;;AAQA;;;;;;AAOA;AC3HA;;;ADgIA;;;;AAKA;;;AAIA;;;;AEnJA;;AAuFA;;;ACpFA;;;ACsBA;;;;AC4FA;;;AAGA;;AAEA;AAGA;;;;AAMA;AACA;AC7IA;;ACuDA;;AAEA;;;;;;;;AAUA;;AAIA;AACA;;AAIA;;;;ACnCA;;AAIA;;ACvCA;;;;ACsCA;;AAIA;AACA;AAGA;;;;AAOA;;;;;AAKA;;AAIA;;;;AClCA;;AAIA;;ACZA;;;AA4FA;;;;AAOA;AACA;;;AAGA;AACA;AACA;AAGA;;;AAIA;AAjIA;AAqIA;AAnIA;ACVA;;;;;ACQA;;;;AA2BA;AACA;;AAQA;;;AClDA;ACqDA;AACA;ACnCA;;AA4JA;;;;;AAMA;;ACrKA;;;;;ACRA;;;;;AAsBA;;AChCA;;ACQA;AC4HA;AACA;ACtIA;AC6RA;AACA;ACjQA;;;;AA8GA;;;ACtIA;;ACMA;;AA4CA;;;;AAMA;;;;;AAKA;AACA;AC9CA;;AChBA;;ACgDA;;AClCA;;ACLA;;ACEA;;;;;AC0FA;;;;AAMA;;;;;ACtGA;;ACGA;AAoCA;;;AAKA;;;;;AAOA;;;;AAMA;;;;;AAKA;AAGA;;ACjEA;;;;;;AA6BA;;AAIA;AACA;AAGA;;ACpCA;;ACmCA;;AAkFA;;AAGA;;;AClDA;;AAIA;;;ACXA;;AC3DA;;;;;ACWA;;;;;;AA+EA;;AAIA;;AChGA;ACkBA;AChBA;ADkBA;AAGA;;;AAKA;;;;AAIA;AEzCA;;AC4FA;;;;;;;;;;AAYA;;AAaA;;;ACzGA;;;;;ACPA","sources":["webpack://@graph-drilldown/webapp/./src/components/FileDrop/FileDrop.tsx","webpack://@graph-drilldown/webapp/./src/components/QuickDrop/QuickDrop.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@thematic-core-virtual-e0f92bc9ce/0/cache/@thematic-core-npm-4.0.7-c127a4a6f7-258e1c254c.zip/node_modules/@thematic/core/dist/scales.js","webpack://@graph-drilldown/webapp/./src/pages/DataManagerPage/components/PreviewGraph.tsx","webpack://@graph-drilldown/webapp/./src/pages/DataManagerPage/components/LeftSidePanel.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-styled-components-virtual-be2051547c/0/cache/@essex-styled-components-npm-0.0.2-63f598ade1-10bfa5f7f6.zip/node_modules/@essex/styled-components/dist/index.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-b63323dbc1/0/cache/@essex-arquero-react-npm-1.2.1-fb48cf60a0-482902f824.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/renderers/CommandBarContainer.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-b63323dbc1/0/cache/@essex-arquero-react-npm-1.2.1-fb48cf60a0-482902f824.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/hooks/useCellDimensions.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-b63323dbc1/0/cache/@essex-arquero-react-npm-1.2.1-fb48cf60a0-482902f824.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/renderers/EmptyCell.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-b63323dbc1/0/cache/@essex-arquero-react-npm-1.2.1-fb48cf60a0-482902f824.zip/node_modules/@essex/arquero-react/dist/GroupHeader/GroupHeader.styles.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-arquero-react-virtual-b63323dbc1/0/cache/@essex-arquero-react-npm-1.2.1-fb48cf60a0-482902f824.zip/node_modules/@essex/arquero-react/dist/ArqueroDetailsList/ArqueroDetailsList.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/FileTable/FileTable.tsx","webpack://@graph-drilldown/webapp/./src/pages/DataManagerPage/components/MainPanel.tsx","webpack://@graph-drilldown/webapp/./src/pages/DataManagerPage/DataManagerPage.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/Minimap/Minimap.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/HierarchyNav.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/CommunityList/CommunityRow.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/CommunityList/CommunityList.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/LeftSidePanel.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/CommunitiesTable/CommunitiesTable.tsx","webpack://@graph-drilldown/webapp/../../.yarn/cache/@emotion-stylis-npm-0.8.5-3e9db8959f-ceaa673457.zip/node_modules/@emotion/stylis/dist/stylis.browser.esm.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/NeighborList/Bar.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/NeighborList/CommunityEdgeList.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/EntityItem/EntityItem.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/CommunityCard/CommunityTable.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/CommunityCard/TableExpander.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/CommunityCard/AdjacentCommunities/AdjacentCommunities.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/hooks/useCommunityDownload.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/CommunityCard/CommunityOverview.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/common/styles/styles.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/CommunityCard/CommunityCard.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hierarchy-browser-virtual-ce66100623/0/cache/@essex-hierarchy-browser-npm-4.0.11-52dc0ef151-0a1038bc9f.zip/node_modules/@essex/hierarchy-browser/dist/HierarchyBrowser.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-arquero-virtual-aee44e92aa/1/packages/arquero/src/edges.ts","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/ResizableBrowser.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-themed-components-virtual-6a7b60d40c/0/cache/@essex-themed-components-npm-2.5.2-9ad4c17d4b-c6edc6c628.zip/node_modules/@essex/themed-components/dist/CollapsiblePanel/CollapsiblePanelContainer.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/ToggleHeader/ToggleHeader.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/HeaderLegend/ColorRangeText.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/HeaderLegend/HeaderLegend.hooks.ts","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/HeaderLegend/LegendLabel.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/HeaderLegend/NumericRangeText.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/HeaderLegend/HeaderLegend.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/legends/EdgeColorHeaderLegend.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/NodeListItem.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@fluentui-react-virtual-13ae72d669/0/cache/@fluentui-react-npm-8.111.2-d4bea43b98-cc5cdf7fbb.zip/node_modules/@fluentui/react/lib/components/MessageBar/MessageBar.types.js","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/CollapsibleSearchPanel/SearchResultsHeader.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/CollapsibleSearchPanel/SearchResults.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/CollapsibleSearchPanel/CollapsibleSearchPanel.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/ColumnEditorPanel.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@fluentui-utilities-virtual-1d294e8e89/0/cache/@fluentui-utilities-npm-8.13.18-024e5438ea-6a9fe09a35.zip/node_modules/@fluentui/utilities/lib/ie11Detector.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hooks-virtual-56b4418fb9/0/cache/@essex-hooks-npm-4.0.22-ac9e34a053-1c27f0c779.zip/node_modules/@essex/hooks/dist/useDimensions.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/DomainBrush/LegendAxis.tsx","webpack://@graph-drilldown/webapp/../../.yarn/cache/d3-dispatch-npm-3.0.1-5f44c3166f-2b82f41bf4.zip/node_modules/d3-dispatch/src/dispatch.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/DomainBrush/Sparkbar.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/DomainBrush/DomainBrush.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@fluentui-react-virtual-13ae72d669/0/cache/@fluentui-react-npm-8.111.2-d4bea43b98-cc5cdf7fbb.zip/node_modules/@fluentui/react/lib/components/ChoiceGroup/ChoiceGroupOption/ChoiceGroupOption.base.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/ColorSelector/ThematicPalettePicker.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/ColorSelector/ColorSelector.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@fluentui-react-hooks-virtual-12aff61035/0/cache/@fluentui-react-hooks-npm-8.6.29-884d2ac236-b2db6ab746.zip/node_modules/@fluentui/react-hooks/lib/useSetTimeout.js","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/NumericSelector/FixedPicker.tsx","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@graph-drilldown-components-virtual-ab6d3bdd0e/1/packages/components/src/NumericSelector/NumericSelector.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/controls/EdgeSizeControls.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/UmapLayout.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/Layout.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/controls/NodeColorControls.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/NodeDetailsPanel.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/panels/NodeHoverHeader.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/controls/NodeSizeControls.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/components/RightSidePanel.tsx","webpack://@graph-drilldown/webapp/./src/pages/GraphViewerPage/GraphViewerPage.tsx","webpack://@graph-drilldown/webapp/./src/App/components/Export/ImageSettings.tsx","webpack://@graph-drilldown/webapp/./src/App/components/Export/Export.tsx","webpack://@graph-drilldown/webapp/./src/App/components/CommandBar/modals/ModalContainer.tsx","webpack://@graph-drilldown/webapp/./src/App/components/CommandBar/ModalButtons.tsx","webpack://@graph-drilldown/webapp/./src/App/components/CommandBar/CommandBar.tsx","webpack://@graph-drilldown/webapp/./src/styles/fluent.ts","webpack://@graph-drilldown/webapp/../../.yarn/__virtual__/@essex-hooks-virtual-ae32c57b5d/0/cache/@essex-hooks-npm-4.0.22-ac9e34a053-1c27f0c779.zip/node_modules/@essex/hooks/dist/useMicrosoftConsentBanner.js","webpack://@graph-drilldown/webapp/./src/App/components/Footer/Footer.tsx","webpack://@graph-drilldown/webapp/./src/App/App.tsx","webpack://@graph-drilldown/webapp/./src/index.tsx"],"sourcesContent":["/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Text } from '@fluentui/react'\nimport type { ItemType } from '@graph-drilldown/types'\nimport { useDropzone } from 'react-dropzone'\nimport styled from 'styled-components'\n\nimport { subHeaderLabel } from '~/styles'\n\nimport { useDrop } from './FileDrop.hooks'\n\nexport interface FileDropProps {\n\ttype: ItemType\n\twidth: number\n\theight: number\n\tcompact?: boolean\n\tonFileLoad: (content: string, type: ItemType, name: string) => void\n}\n\nexport const FileDrop: React.FC<FileDropProps> = ({\n\ttype,\n\twidth,\n\theight,\n\tcompact,\n\tonFileLoad,\n}) => {\n\tconst handleDrop = useDrop(onFileLoad, type)\n\tconst { getRootProps, getInputProps, isDragActive } = useDropzone({\n\t\tonDrop: handleDrop,\n\t})\n\treturn (\n\t\t<Container\n\t\t\t{...getRootProps()}\n\t\t\tisDragging={isDragActive}\n\t\t\twidth={width}\n\t\t\theight={height}\n\t\t>\n\t\t\t<input {...getInputProps()} />\n\t\t\t<TextContainer>\n\t\t\t\t{!compact && <Text variant={subHeaderLabel}>Drop</Text>}\n\t\t\t\t<Type>\n\t\t\t\t\t<Text variant={subHeaderLabel}>\n\t\t\t\t\t\t{compact ? type.substr(0, 4) : type}\n\t\t\t\t\t</Text>\n\t\t\t\t</Type>\n\t\t\t\t{!compact && <Text variant={subHeaderLabel}>data file here</Text>}\n\t\t\t</TextContainer>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div<{\n\twidth: number\n\theight: number\n\tisDragging: boolean\n}>`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-ttems: center;\n\ttext-align: center;\n\tpadding: 8px;\n\twidth: ${({ width }) => width}px;\n\theight: ${({ height }) => height}px;\n\tfont-size: 11px;\n\tborder-radius: 4px;\n\tmargin: 4px;\n\tborder: 1px dashed\n\t\t${({ theme, isDragging }) =>\n\t\t\tisDragging\n\t\t\t\t? theme.application().accent().hex()\n\t\t\t\t: theme.application().border().hex()};\n`\n\nconst TextContainer = styled.div`\n\tfont-size: 14px;\n`\n\nconst Type = styled.div`\n\tfont-weight: bold;\n\tcolor: ${({ theme }) => theme.application().accent().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DefaultButton, Text } from '@fluentui/react'\nimport type { ItemType } from '@graph-drilldown/types'\nimport { FileOrigin } from '@graph-drilldown/types'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { parseDSVTable } from '~/api'\nimport { useFileManagement } from '~/hooks/files'\nimport { variants } from '~/styles'\n\nimport { FileDrop } from '../FileDrop'\n\nconst SQUARE = 80\n\nexport interface QuickDropProps {\n\tdropWidthSize?: number\n\tdropHeightSize?: number\n\tcompact?: boolean\n}\n\n/**\n * This component presents a quick-drop area for users to load data into the app\n * and have it automatically processed according to its type.\n * @param param0\n */\nexport const QuickDrop: React.FC<QuickDropProps> = ({\n\tdropWidthSize = SQUARE,\n\tdropHeightSize = SQUARE,\n\tcompact = false,\n}) => {\n\tconst { doAddFile, doClearAll, hasData } = useFileManagement()\n\n\tconst handleFileLoad = useCallback(\n\t\t(content: string, type: ItemType, fileName: string) => {\n\t\t\tconst table = parseDSVTable(fileName, content)\n\t\t\tdoAddFile({\n\t\t\t\torigin: FileOrigin.Local,\n\t\t\t\turl: fileName,\n\t\t\t\ttableType: type,\n\t\t\t\ttable,\n\t\t\t\trows: table.numRows(),\n\t\t\t\tcols: table.numCols(),\n\t\t\t})\n\t\t},\n\t\t[doAddFile],\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<DropArea>\n\t\t\t\t<FileDrop\n\t\t\t\t\tonFileLoad={handleFileLoad}\n\t\t\t\t\ttype={'node'}\n\t\t\t\t\twidth={dropWidthSize}\n\t\t\t\t\theight={dropHeightSize}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t/>\n\t\t\t\t<FileDrop\n\t\t\t\t\tonFileLoad={handleFileLoad}\n\t\t\t\t\ttype={'edge'}\n\t\t\t\t\twidth={dropWidthSize}\n\t\t\t\t\theight={dropHeightSize}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t/>\n\t\t\t\t<FileDrop\n\t\t\t\t\tonFileLoad={handleFileLoad}\n\t\t\t\t\ttype={'join'}\n\t\t\t\t\twidth={dropWidthSize}\n\t\t\t\t\theight={dropHeightSize}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t/>\n\t\t\t\t<FileDrop\n\t\t\t\t\tonFileLoad={handleFileLoad}\n\t\t\t\t\ttype={'community'}\n\t\t\t\t\twidth={dropWidthSize}\n\t\t\t\t\theight={dropHeightSize}\n\t\t\t\t\tcompact={compact}\n\t\t\t\t/>\n\t\t\t</DropArea>\n\t\t\t{!compact ? (\n\t\t\t\t<HelperText>\n\t\t\t\t\t<Text variant={variants.medium}>\n\t\t\t\t\t\tFiles must have a <b>header row</b>, an <b>id</b> column, and use{' '}\n\t\t\t\t\t\t<b>csv</b> or <b>tsv</b> format\n\t\t\t\t\t</Text>\n\t\t\t\t</HelperText>\n\t\t\t) : null}\n\t\t\t<Reset>\n\t\t\t\t{hasData && compact ? (\n\t\t\t\t\t<DefaultButton text='Clear all' onClick={doClearAll} />\n\t\t\t\t) : null}\n\t\t\t</Reset>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tmargin: 10px;\n`\nconst HelperText = styled.div`\n\tmargin-top: 8px;\n\ttext-align: center;\n`\n\nconst DropArea = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: space-around;\n`\n\nconst Reset = styled.div`\n\tmargin-top: 10px;\n\tdisplay: flex;\n\tjustify-content: center;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { scaleLinear, scaleLog } from 'd3-scale';\n// NOTE: the linear/log scale are basically d3 scales, but we haven't exposed the\n// full d3 functionality, so they've been nerfed\n/**\n * Constructs a linear scale from the input domain,\n * mapping to an output range of [0, 1].\n * Effectively behaves like d3-scale/scaleLinear\n * with less exposed functionality such as chaining\n * @param domain - the input domain\n */ export function linear(domain, clamp = true) {\n    const scale = scaleLinear().domain(domain).clamp(clamp);\n    return (value)=>scale(value);\n}\n/**\n * Constructs a log scale from the input domain,\n * mapping to an output range of [0, 1].\n * Effectively behaves like d3-scale/scaleLog\n * with less exposed functionality such as chaining\n * @param domain - the input domain\n */ export function log(domain, clamp = true) {\n    const scale = scaleLog().domain(domain).clamp(clamp);\n    return (value)=>scale(value);\n}\nfunction findForwardBreak(data, start) {\n    const value = data[start - 1];\n    for(let i = start; i < data.length; i++){\n        if (data[i] !== value) {\n            return i - start;\n        }\n    }\n    return data.length - start;\n}\nfunction findBackwardBreak(data, start) {\n    const value = data[start - 1];\n    for(let i = start - 1; i >= 0; i--){\n        if (data[i] !== value) {\n            return start - i - 1;\n        }\n    }\n    return start;\n}\n/**\n * Quantize a list of data values into n bins\n * This adds a correction to make sure bins don't break on the same value,\n * so that values only have one correct bin to lie within.\n * Some distributions need this correction because they have such an extreme shape (e.g., zipf)\n * The smoothing is pretty basic, we could use legit variance minimization techniques\n * @param data - the input data\n * @param bins - the number of bins\n * @param smoothing - look forward and backward to minimize variation in bin lengths\n */ function quantizeHistogram(data, bins, smoothing) {\n    const values = data.sort((a, b)=>a - b);\n    let binLength = Math.ceil(values.length / bins) // starting bin length is always the ideal\n    ;\n    const binStructure = [];\n    let start = 0;\n    for(let i = 0; i < bins; i++){\n        const end = start + binLength;\n        const forward = findForwardBreak(values, end);\n        const backward = findBackwardBreak(values, end);\n        const moveBackward = backward < forward && backward < binLength;\n        const newEnd = smoothing && moveBackward ? end - backward : end + forward;\n        const bin = values.slice(start, newEnd);\n        if (bin.length > 0) {\n            bin.x0 = bin[0];\n            bin.x1 = bin[bin.length - 1];\n            binStructure.push(bin);\n        }\n        start = newEnd;\n        // recalculate bin length with remaining values and bins, in case a really large bin skewed everything\n        if (newEnd !== end) {\n            binLength = Math.ceil((values.length - newEnd) / (bins - (i + 1)));\n        }\n    }\n    return binStructure;\n}\n/**\n * Constructs a quantile scale from the input domain, splitting the data into n equal-size bins.\n * This makes sure all instances of a given value remain in the same bin,\n * so it _is_ possible to have uneven counts across the bins.\n * This produces a smoother scale visually when there are extreme distributions (such as Pareto)\n * with a relatively low range of integer values.\n * The smoothing parameter can make this slightly better by looking backward as well as forward\n * when finding the next break, as a way of minimizing the variation.\n * @param domain - array of numeric data values to bin into quantiles\n * @param bins - number of quantile bins to use (default = 10)\n */ export function quantile(domain, bins) {\n    const quantized = quantizeHistogram(domain, bins || 10, true);\n    const histoLinearScale = scaleLinear().domain([\n        0,\n        bins - 1\n    ]).range([\n        0,\n        1\n    ]);\n    const scale = (value)=>{\n        const binIndex = quantized.findIndex((bin)=>{\n            return value >= bin.x0 && value <= bin.x1;\n        });\n        return histoLinearScale(binIndex);\n    };\n    scale.bins = quantized.map(({ x0 , x1 , length  })=>({\n            min: x0,\n            max: x1,\n            size: length\n        }));\n    return scale;\n}\n/**\n * Creates a scale that modulates a value in a manner comparable to human learning and recall.\n * The idea is that exposure to a concept results in immediate recall, but over time that recall fades.\n * However, repeat exposure increases the recall _and_ reduces the rate of forgetting.\n *\n * In order to modulate the value over time, we need to keep track of the previous value\n * and the previous learning strength. Therefore the input/output of this scale is an\n * object with a strength and value prop. The first time you call the scale, you can omit this\n * bit of tracked state, but subsequent calls should supply the output of the previous call.\n * For all intents and purposes you can ignore the strength param, just make sure it is included.\n *\n * @param elapsedTime -  time in milliseconds since the last learning exposure\n * @param state - LearningState\n * @returns LearningState\n *\n */ export function recall() {\n    /**\n\t * @param elapsedTime time in milliseconds since the last learning exposure\n\t */ return (elapsedTime, state = {\n        value: 0,\n        strength: 0\n    })=>{\n        const s = {\n            ...state\n        };\n        if (elapsedTime === 0) {\n            if (s.strength === 0) {\n                // first activation - initialize the decay params\n                s.strength = 1;\n                s.value = 1;\n            } else {\n                // follow-on activations, just update the strength\n                s.strength += 1 - s.value;\n            }\n        }\n        if (s.strength > 0) {\n            const d = elapsedTime / 1000 // the learning decay works based on seconds\n            ;\n            const exponent = -d / s.strength;\n            s.value = Math.exp(exponent);\n        } else {\n            s.value = 0;\n        }\n        if (s.value === 0) {\n            s.strength = 1;\n        }\n        return s;\n    };\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useThematic } from '@thematic/react'\nimport { useMemo } from 'react'\n\nimport { GraphViewer } from '~/components/GraphViewer'\nimport { useInternedGraph } from '~/state/caches'\n\nexport interface PreviewGraphProps {\n\twidth: number\n\theight: number\n}\n\nexport const PreviewGraph = ({ width, height }) => {\n\tconst data = useInternedGraph()\n\tconst plotStyle = usePlotStyle()\n\treturn (\n\t\t<GraphViewer width={width} height={height} data={data} style={plotStyle} />\n\t)\n}\n\nfunction usePlotStyle() {\n\tconst theme = useThematic()\n\treturn useMemo(\n\t\t() => ({\n\t\t\tborder: `1px solid ${theme.plotArea().stroke().hex()}`,\n\t\t\tbackground: theme.plotArea().fill().hex(),\n\t\t}),\n\t\t[theme],\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nimport { QuickDrop } from '~/components/QuickDrop'\nimport { useSettings } from '~/state'\nimport { PANEL_WIDTH } from '~/styles'\n\nimport { PreviewGraph } from './PreviewGraph'\n\nconst PREVIEW_SIZE = PANEL_WIDTH - 16\n\nexport const LeftSidePanel = () => {\n\tconst [settings] = useSettings()\n\treturn (\n\t\t<Container>\n\t\t\t<Section>\n\t\t\t\t<SectionTitle>Quick import</SectionTitle>\n\t\t\t\t<QuickDrop />\n\t\t\t</Section>\n\t\t\t{settings.showPreviewMap ? (\n\t\t\t\t<Section>\n\t\t\t\t\t<SectionTitle>Preview</SectionTitle>\n\t\t\t\t\t<Preview>\n\t\t\t\t\t\t<PreviewGraph width={PREVIEW_SIZE} height={PREVIEW_SIZE} />\n\t\t\t\t\t</Preview>\n\t\t\t\t</Section>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\twidth: ${PANEL_WIDTH}px;\n`\n\nconst SectionTitle = styled.h2`\n\tfont-size: 0.8em;\n\ttext-align: center;\n`\n\nconst Section = styled.div`\n\tmargin-top: 20px;\n`\n\nconst Preview = styled.div`\n\tmargin-left: 8px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import styled from 'styled-components';\nconst defaultStyled = styled.default ?? styled;\nexport default defaultStyled;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\n/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import styled from '@essex/styled-components';\nimport { memo } from 'react';\nexport const CommandBarContainer = /*#__PURE__*/ memo(function CommandBarContainer({ props , renderers  }) {\n    return /*#__PURE__*/ _jsx(Container, {\n        className: \"header-command-bar\",\n        children: renderers.map((renderer, i)=>/*#__PURE__*/ _jsx(Command, {\n                children: renderer(props)\n            }, i))\n    });\n});\nconst Command = styled.div``;\nconst Container = styled.div`\r\n\tdisplay: flex;\r\n\tflex-direction: column;\r\n\tjustify-content: center;\r\n\tborder-top: 1px solid ${({ theme  })=>theme.application().faint().hex()};\r\n\tborder-bottom: 1px solid ${({ theme  })=>theme.application().faint().hex()};\r\n`;\n","import { useMemo } from 'react';\nexport function useCellDimensions(column, considerCompactMode = true) {\n    return useMemo(()=>({\n            width: column?.currentWidth || 0,\n            height: column?.data?.compact && considerCompactMode ? COMPACT_HEIGHT : HEIGHT\n        }), [\n        column,\n        considerCompactMode\n    ]);\n}\nconst COMPACT_HEIGHT = 15;\nconst HEIGHT = 20;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\n/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import { useThematic } from '@thematic/react';\nimport { memo, useMemo } from 'react';\n/**\r\n * Standard rendering of Empty values.\r\n */ export const EmptyCell = /*#__PURE__*/ memo(function EmptyCell({ textAlign ,  }) {\n    const theme = useThematic();\n    const style = useMemo(()=>({\n            width: '100%',\n            textAlign,\n            color: theme.application().lowContrast().hex()\n        }), [\n        theme,\n        textAlign\n    ]);\n    return /*#__PURE__*/ _jsx(\"div\", {\n        style: style,\n        children: \"\\u2014\"\n    });\n});\n","/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import styled from '@essex/styled-components';\nimport { IconButton } from '@fluentui/react';\nexport const HeaderContainer = styled.div`\r\n\tpadding-left: ${({ groupLevel  })=>`${groupLevel * 12}px`};\r\n\tdisplay: flex;\r\n\tgap: 8px;\r\n`;\nexport const LevelButton = styled(IconButton)`\r\n\twidth: 5%;\r\n`;\nexport const HeaderDetailsText = styled.span`\r\n\talign-self: center;\r\n`;\nexport const Bold = styled.b``;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\n/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */ import styled from '@essex/styled-components';\nimport { ConstrainMode, DetailsList, DetailsListLayoutMode, SelectionMode } from '@fluentui/react';\nimport { memo, useCallback, useEffect, useMemo, useState } from 'react';\nimport { groupBuilder } from '../common/groups.js';\nimport { useColumns, useDetailsHeaderRenderer, useDetailsListStyles, useGroupHeaderRenderer, useSlicedTable, useSortedGroups, useSortedTable, useSortHandling, useStripedRowsRenderer, useSubsetTable, useTableMetadata } from './hooks/index.js';\nimport { debounceFn } from './util/index.js';\n/**\r\n * Renders an arquero table using a fluent DetailsList.\r\n */ export const ArqueroDetailsList = /*#__PURE__*/ memo(function ArqueroDetailsList({ table , features ={} , metadata , offset =0 , limit =Infinity , includeAllColumns =true , visibleColumns , isSortable =false , isStriped =false , isColumnClickable =false , showColumnBorders =false , selectedColumn , onColumnClick , onCellDropdownSelect , onRenderGroupHeader , onChangeMetadata , // extract props we want to set data-centric defaults for\nselectionMode =SelectionMode.none , layoutMode =DetailsListLayoutMode.fixedColumns , columns , onColumnHeaderClick , styles , defaultSortColumn , defaultSortDirection , isHeadersFixed =false , compact =false , isResizable =true , // passthrough the remainder as props\n...props }) {\n    const [version, setVersion] = useState(0);\n    const { sortColumn , sortDirection , handleColumnHeaderClick  } = useSortHandling(isSortable, onColumnHeaderClick, defaultSortColumn, defaultSortDirection);\n    // first subset the table using the visible columns\n    // this will prevent any further operations on columns we aren't going to show\n    const subset = useSubsetTable(table, visibleColumns);\n    // sort the table internally\n    // note that this is different than the orderby of a pipeline step\n    // this is a temporary sort only for the table display\n    const sorted = useSortedTable(subset, sortColumn, sortDirection);\n    // slice any potential page\n    const sliced = useSlicedTable(sorted, offset, limit);\n    // last, copy these items to actual JS objects for the DetailsList\n    const items = useMemo(()=>sliced.objects(), [\n        sliced\n    ]);\n    // if the table is grouped, groups the information in a way we can iterate\n    const groupedEntries = useMemo(()=>table.isGrouped() ? sliced.objects({\n            grouped: 'entries'\n        }) : undefined, [\n        sliced,\n        table\n    ]);\n    // sorts first level group headers\n    const sortedGroups = useSortedGroups(table, sortColumn, sortDirection, groupedEntries);\n    const computedMetadata = useTableMetadata(table, metadata, anyStatsFeatures(features), onChangeMetadata);\n    const isDefaultHeaderClickable = useMemo(()=>{\n        return isSortable || isColumnClickable || !!onColumnHeaderClick;\n    }, [\n        isSortable,\n        isColumnClickable,\n        onColumnHeaderClick\n    ]);\n    const onColumnResize = useCallback((column, newWidth)=>{\n        const set = ()=>setVersion((prev)=>prev + 1);\n        if (column?.currentWidth !== newWidth) {\n            debounceFn(set);\n        }\n    }, [\n        setVersion\n    ]);\n    const displayColumns = useColumns(table, computedMetadata, columns, visibleColumns, handleColumnHeaderClick, {\n        features,\n        sortColumn,\n        sortDirection,\n        selectedColumn,\n        onColumnClick,\n        onCellDropdownSelect,\n        isDefaultHeaderClickable,\n        includeAllColumns,\n        isColumnClickable,\n        showColumnBorders,\n        compact,\n        isResizable\n    });\n    const headerStyle = useDetailsListStyles(isHeadersFixed, features, styles, !!onColumnClick, compact);\n    const renderRow = useStripedRowsRenderer(isStriped, showColumnBorders);\n    const renderDetailsHeader = useDetailsHeaderRenderer();\n    const renderGroupHeader = useGroupHeaderRenderer(table, computedMetadata, onRenderGroupHeader, features.lazyLoadGroups);\n    const groups = useMemo(()=>{\n        if (!sliced.isGrouped()) {\n            return undefined;\n        }\n        const existingGroups = sliced.groups();\n        const totalLevelCount = existingGroups.names.length;\n        return sortedGroups?.map((row)=>{\n            const initialLevel = 0;\n            return groupBuilder(row, existingGroups, initialLevel, totalLevelCount, items, sortDirection, features.lazyLoadGroups, sortColumn);\n        });\n    }, [\n        sliced,\n        sortedGroups,\n        items,\n        sortColumn,\n        sortDirection,\n        features\n    ]);\n    // as in FluentUI documentation, when updating item we can update the list items with a spread operator.\n    // since when adding a new column we're changing the columns prop too, this approach doesn't work for that.\n    // a workaround found in the issues suggest to use this version property to use as comparison to force re-render\n    useEffect(()=>{\n        setVersion((prev)=>prev + 1);\n    }, [\n        columns,\n        table,\n        compact\n    ]);\n    return /*#__PURE__*/ _jsx(DetailsWrapper, {\n        \"data-is-scrollable\": \"true\",\n        children: /*#__PURE__*/ _jsx(DetailsList, {\n            items: [\n                ...items\n            ],\n            selectionMode: selectionMode,\n            layoutMode: layoutMode,\n            groups: groups,\n            getKey: (_, index)=>{\n                return index.toString();\n            },\n            groupProps: {\n                onRenderHeader: renderGroupHeader\n            },\n            columns: displayColumns,\n            constrainMode: ConstrainMode.unconstrained,\n            onRenderRow: renderRow,\n            onRenderDetailsHeader: renderDetailsHeader,\n            onColumnResize: onColumnResize,\n            compact: compact,\n            ...props,\n            listProps: {\n                version\n            },\n            styles: headerStyle\n        })\n    });\n});\nconst DetailsWrapper = styled.div`\r\n\theight: inherit;\r\n\tposition: relative;\r\n\tmax-height: inherit;\r\n\toverflow-y: auto;\r\n\toverflow-x: auto;\r\n\r\n\tspan.ms-DetailsHeader-cellTitle {\r\n\t\tbackground-color: ${({ theme  })=>theme.application?.().background().hex()};\r\n\t}\r\n\r\n\t.ms-List-cell {\r\n\t\tmin-height: unset;\r\n\t}\r\n\r\n\t.ms-CommandBar {\r\n\t\tpadding: unset;\r\n\t}\r\n\r\n\t.ms-OverflowSet {\r\n\t\tjustify-content: center;\r\n\t}\r\n`;\nfunction anyStatsFeatures(features) {\n    return Object.values(features || {}).some((v)=>v === true);\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { DataFile } from '@graph-drilldown/types'\nimport { useThematic } from '@thematic/react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { useRowHandling } from './FileTable.hooks.js'\n\nexport interface FileTableProps {\n\tfiles: DataFile[]\n\tselected?: DataFile\n\tonClick?: (file: DataFile) => void\n}\n\n/**\n * Displays a list of table files with some basic metadata and a click handler.\n */\nexport const FileTable: React.FC<FileTableProps> = memo(function FileTable({\n\tfiles,\n\tselected,\n\tonClick,\n}) {\n\tconst theme = useThematic()\n\tconst { hovered, onRowHover, onRowClick } = useRowHandling(onClick)\n\treturn (\n\t\t<Container>\n\t\t\t<Table>\n\t\t\t\t<thead>\n\t\t\t\t\t<tr>\n\t\t\t\t\t\t<th>Name</th>\n\t\t\t\t\t\t<th>Source</th>\n\t\t\t\t\t\t<th>Type</th>\n\t\t\t\t\t\t<th>Rows</th>\n\t\t\t\t\t\t<th>Cols</th>\n\t\t\t\t\t</tr>\n\t\t\t\t</thead>\n\t\t\t\t<tbody>\n\t\t\t\t\t{files.length > 0 ? (\n\t\t\t\t\t\tfiles.map((file) => {\n\t\t\t\t\t\t\tconst background =\n\t\t\t\t\t\t\t\tselected === file\n\t\t\t\t\t\t\t\t\t? theme.application().accent().hex()\n\t\t\t\t\t\t\t\t\t: hovered === file\n\t\t\t\t\t\t\t\t\t? theme.application().faint().hex()\n\t\t\t\t\t\t\t\t\t: 'none'\n\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t<tr\n\t\t\t\t\t\t\t\t\tkey={`loaded-file-${file.url}`}\n\t\t\t\t\t\t\t\t\tonClick={() => onRowClick(file)}\n\t\t\t\t\t\t\t\t\tonMouseEnter={() => onRowHover(file)}\n\t\t\t\t\t\t\t\t\tonMouseLeave={() => onRowHover(undefined)}\n\t\t\t\t\t\t\t\t\tstyle={{\n\t\t\t\t\t\t\t\t\t\tcursor: onClick ? 'pointer' : 'default',\n\t\t\t\t\t\t\t\t\t\tbackground,\n\t\t\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t<Td>{file.url}</Td>\n\t\t\t\t\t\t\t\t\t<Td>{file.origin}</Td>\n\t\t\t\t\t\t\t\t\t<Td>{file.tableType || 'unknown'}</Td>\n\t\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t\t<Num>{file.rows}</Num>\n\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t\t<Td>\n\t\t\t\t\t\t\t\t\t\t<Num>{file.cols}</Num>\n\t\t\t\t\t\t\t\t\t</Td>\n\t\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t)\n\t\t\t\t\t\t})\n\t\t\t\t\t) : (\n\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t<td>none loaded</td>\n\t\t\t\t\t\t</tr>\n\t\t\t\t\t)}\n\t\t\t\t</tbody>\n\t\t\t</Table>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div``\n\nconst Table = styled.table`\n\twidth: 100%;\n\tborder-collapse: collapse;\n\tborder: 1px solid ${({ theme }) => theme.application().border().hex()};\n`\nconst Td = styled.td`\n\tmargin: 4px;\n\tpadding: 4px;\n\tborder: 1px solid ${({ theme }) => theme.application().border().hex()};\n`\n\nconst Num = styled.div`\n\twidth: 100%;\n\ttext-align: right;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { ArqueroDetailsList } from '@essex/arquero-react'\nimport { DefaultButton } from '@fluentui/react'\nimport { FileTable } from '@graph-drilldown/components'\nimport styled from 'styled-components'\n\nimport { useFileManagement } from '~/hooks/files'\n\nexport const MainPanel: React.FC = () => {\n\tconst { files, selectedFile, onFileSelected, doClearAll, hasData } =\n\t\tuseFileManagement()\n\n\treturn (\n\t\t<Container>\n\t\t\t<Files>\n\t\t\t\t<FileTable\n\t\t\t\t\tfiles={files}\n\t\t\t\t\tselected={selectedFile}\n\t\t\t\t\tonClick={onFileSelected}\n\t\t\t\t/>\n\t\t\t\t<Reset>\n\t\t\t\t\t{hasData ? (\n\t\t\t\t\t\t<DefaultButton text='Clear all' onClick={doClearAll} />\n\t\t\t\t\t) : null}\n\t\t\t\t</Reset>\n\t\t\t</Files>\n\n\t\t\t{selectedFile?.table ? (\n\t\t\t\t<Viewer>\n\t\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\t\ttable={selectedFile.table}\n\t\t\t\t\t\tisHeadersFixed\n\t\t\t\t\t\tfeatures={{\n\t\t\t\t\t\t\tsmartHeaders: true,\n\t\t\t\t\t\t}}\n\t\t\t\t\t/>\n\t\t\t\t</Viewer>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\n\nconst Files = styled.div`\n\tdisplay: flex;\n\tflex-direction column;\n\tgap: 10px;\n\tmargin-bottom: 10px;\n`\n\nconst Viewer = styled.div`\n\theight: 600px;\n\tborder: 1px solid ${({ theme }) => theme.application().border().hex()};\n`\n\nconst Reset = styled.div`\n\twidth: 100%;\n\tdisplay: flex;\n\tjustify-content: flex-end;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { FC } from 'react'\nimport { Suspense } from 'react'\nimport styled from 'styled-components'\n\nimport { LeftSidePanel } from './components/LeftSidePanel'\nimport { MainPanel } from './components/MainPanel'\n\nexport const DataManagerPage: FC = () => {\n\treturn (\n\t\t<Container>\n\t\t\t<Suspense fallback={<Placeholder />}>\n\t\t\t\t<LeftSidePanel />\n\t\t\t</Suspense>\n\t\t\t<Content>\n\t\t\t\t<MainContainer>\n\t\t\t\t\t<MainPanel />\n\t\t\t\t</MainContainer>\n\t\t\t</Content>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\theight: calc(100vh - 80px);\n\tflex: 1;\n`\n\nconst Content = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\twidth: 100%;\n`\n\nconst MainContainer = styled.div`\n\tmargin-top: 40px;\n\tmargin-bottom: 20px;\n\twidth: 800px;\n`\n\nconst Placeholder = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { NodeCollection } from '@graph-drilldown/arquero'\nimport type { GraphContainer, InputGraph } from '@graspologic/graph'\nimport { NodeSetHighlight, Nodes } from '@graspologic/react'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tuseAOIBoundsColor,\n\tuseBackgroundColor,\n\tuseHoveredNodeColor,\n\tuseMiniMapNodeColor,\n\tuseNodeIds,\n\tuseSelectedNodeColor,\n} from '~/hooks/graph'\nimport { GraphView } from '~/react-patch/graspologic'\nimport type { Bounds } from '~/types'\n\nimport { useAOIBounds, usePlotTheme } from './MiniMap.hooks'\n\nexport interface MinimapProps {\n\tdata: InputGraph | GraphContainer\n\twidth: number\n\theight: number\n\thoveredNodes?: NodeCollection\n\tselectedNodes?: NodeCollection\n\tminRadius?: number\n\tmaxRadius?: number\n\taoiBounds?: Bounds\n}\n\nexport const Minimap = ({\n\tdata,\n\twidth,\n\theight,\n\tminRadius = 1,\n\tmaxRadius = 1,\n\thoveredNodes,\n\tselectedNodes,\n\taoiBounds,\n}: MinimapProps) => {\n\tconst hoveredNodeIds = useNodeIds(hoveredNodes)\n\tconst selectedNodeIds = useNodeIds(selectedNodes)\n\n\tconst backgroundColor = useBackgroundColor()\n\tconst selectedColor = useSelectedNodeColor()\n\tconst boundsColor = useAOIBoundsColor()\n\tconst hoverColor = useHoveredNodeColor()\n\tconst nodeColor = useMiniMapNodeColor()\n\tconst colorize = useCallback(() => nodeColor, [nodeColor])\n\n\t// aoi will be tied to actual pixel dimensions, so we need to adjust the 0-1 scaling to fit\n\tconst { x, y, w, h, showAoi } = useAOIBounds(height, width, aoiBounds)\n\tconst plotTheme = usePlotTheme(width, height)\n\n\treturn (\n\t\t<Container width={width} height={height}>\n\t\t\t<GraphView\n\t\t\t\tdata={data}\n\t\t\t\tbackgroundColor={backgroundColor}\n\t\t\t\tstyle={plotTheme}\n\t\t\t>\n\t\t\t\t<Nodes color={colorize} minRadius={minRadius} maxRadius={maxRadius} />\n\t\t\t\t<NodeSetHighlight\n\t\t\t\t\tkey={'selected'}\n\t\t\t\t\tvertexIds={selectedNodeIds}\n\t\t\t\t\tcolor={selectedColor}\n\t\t\t\t/>\n\t\t\t\t<NodeSetHighlight\n\t\t\t\t\tkey={'hovered'}\n\t\t\t\t\tvertexIds={hoveredNodeIds}\n\t\t\t\t\tcolor={hoverColor}\n\t\t\t\t/>\n\t\t\t</GraphView>\n\t\t\t{showAoi ? (\n\t\t\t\t<Aoi>\n\t\t\t\t\t<Svg width={width} height={height}>\n\t\t\t\t\t\t<rect\n\t\t\t\t\t\t\tstroke={boundsColor}\n\t\t\t\t\t\t\tstrokeOpacity={0.6}\n\t\t\t\t\t\t\tstrokeWidth={1.0}\n\t\t\t\t\t\t\tx={x}\n\t\t\t\t\t\t\ty={y}\n\t\t\t\t\t\t\twidth={w}\n\t\t\t\t\t\t\theight={h}\n\t\t\t\t\t\t\tfill={'transparent'}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Svg>\n\t\t\t\t</Aoi>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div<{ width: number; height: number }>`\n\twidth: ${({ width }) => width}px;\n\theight: ${({ height }) => height}px;\n`\n\nconst Aoi = styled.div`\n\tposition: relative;\n`\n\nconst Svg = styled.svg`\n\tpointer-events: none;\n\tposition: absolute;\n\tleft: 10px;\n\tbottom: 0px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport './HierarchyNav.css'\n\nimport type { IIconProps } from '@fluentui/react'\nimport { ActionButton } from '@fluentui/react'\nimport { SelectionState } from '@thematic/core'\nimport { useThematic } from '@thematic/react'\nimport { memo, useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport type { Breadcrumb } from '~/types'\n\nconst caretIcon: IIconProps = { iconName: 'ChevronDownSmall' }\n\nexport interface IHierarchyNav {\n\titems: Breadcrumb[]\n\thandleBreadcrumbClick: (item: Breadcrumb) => void\n}\n\nexport const HierarchyNav: React.FC<IHierarchyNav> = memo(\n\tfunction HierarchyNav({ items, handleBreadcrumbClick }) {\n\t\tconst theme = useThematic()\n\t\tconst highlight = useMemo(\n\t\t\t() => ({\n\t\t\t\ticonChecked: {\n\t\t\t\t\tcolor: theme\n\t\t\t\t\t\t.node({ selectionState: SelectionState.Selected })\n\t\t\t\t\t\t.fill()\n\t\t\t\t\t\t.hex(),\n\t\t\t\t},\n\t\t\t\troot: { cursor: 'revert', maxHeight: 20 },\n\t\t\t\tlabel: { fontSize: 'large', fontWeight: 500 },\n\t\t\t}),\n\t\t\t[theme],\n\t\t)\n\t\tconst normal = useMemo(\n\t\t\t() => ({\n\t\t\t\troot: { maxHeight: 20 },\n\t\t\t\ticonChecked: {\n\t\t\t\t\tcolor: theme\n\t\t\t\t\t\t.node({ selectionState: SelectionState.Normal })\n\t\t\t\t\t\t.fill()\n\t\t\t\t\t\t.hex(),\n\t\t\t\t},\n\t\t\t}),\n\t\t\t[theme],\n\t\t)\n\n\t\tconst reverseList = useMemo(() => items.reverse(), [items])\n\t\tconst handleListClick = useCallback(\n\t\t\t(item: Breadcrumb, index: number) => {\n\t\t\t\tif (index !== 0) {\n\t\t\t\t\t// leaf is not clickable\n\t\t\t\t\thandleBreadcrumbClick(item)\n\t\t\t\t}\n\t\t\t},\n\t\t\t[handleBreadcrumbClick],\n\t\t)\n\n\t\tconst nestedContent = useMemo(() => {\n\t\t\treturn reverseList.reduce((prevContent, item, i) => {\n\t\t\t\tconst colorStyle = i === 0 ? highlight : normal\n\t\t\t\tconst className = i === reverseList.length - 1 ? 'tree' : 'nested'\n\t\t\t\tconst ranking = reverseList.length - 1 - i\n\t\t\t\treturn (\n\t\t\t\t\t<ul className={className}>\n\t\t\t\t\t\t<li>\n\t\t\t\t\t\t\t<NestedContent\n\t\t\t\t\t\t\t\tclassName='tree_label'\n\t\t\t\t\t\t\t\tid={`list-item-${ranking}`}\n\t\t\t\t\t\t\t\tonClick={() => handleListClick(item, i)}\n\t\t\t\t\t\t\t\tonKeyDown={() => handleListClick(item, i)}\n\t\t\t\t\t\t\t\ttabIndex={i}\n\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t{i === 0 ? (\n\t\t\t\t\t\t\t\t\t<ActionButton styles={colorStyle} checked={true}>\n\t\t\t\t\t\t\t\t\t\t{item.text}\n\t\t\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t\t\t) : (\n\t\t\t\t\t\t\t\t\t<ActionButton\n\t\t\t\t\t\t\t\t\t\tstyles={colorStyle}\n\t\t\t\t\t\t\t\t\t\ticonProps={caretIcon}\n\t\t\t\t\t\t\t\t\t\tchecked={true}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{item.text}\n\t\t\t\t\t\t\t\t\t</ActionButton>\n\t\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t\t</NestedContent>\n\t\t\t\t\t\t\t{prevContent}\n\t\t\t\t\t\t</li>\n\t\t\t\t\t</ul>\n\t\t\t\t)\n\t\t\t}, undefined as any)\n\t\t}, [reverseList, highlight, normal, handleListClick])\n\n\t\treturn <Container>{nestedContent}</Container>\n\t},\n)\n\nconst Container = styled.div``\nconst NestedContent = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { Community } from '@graph-drilldown/types'\nimport { SelectionState } from '@thematic/core'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { Cell } from './Cell'\nimport type {\n\tColumn,\n\tCommunityRowStyles,\n\tTableRowStyles,\n} from './CommunityList.types'\n\nexport interface CommunityRowProps {\n\tcommunity: Community\n\thovered: boolean\n\tcolumns: Column[]\n\tonHover: (community?: Community) => void\n\tonClick: (community: Community) => void\n\tstyles?: CommunityRowStyles\n\tselected?: boolean\n}\n\nexport const CommunityRow = ({\n\tcommunity,\n\thovered,\n\tcolumns,\n\tonHover,\n\tonClick,\n\tstyles = {},\n\tselected,\n}: CommunityRowProps) => {\n\tconst handleEnter = useCallback(\n\t\t() => onHover(community),\n\t\t[community, onHover],\n\t)\n\tconst handleLeave = useCallback(() => onHover(), [onHover])\n\tconst handleClick = useCallback(\n\t\t() => onClick(community),\n\t\t[community, onClick],\n\t)\n\n\treturn (\n\t\t<Tr\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\tonClick={handleClick}\n\t\t\tstyle={styles.tableRow || {}}\n\t\t\tselected={selected}\n\t\t>\n\t\t\t{columns.map((c) => {\n\t\t\t\treturn (\n\t\t\t\t\t<Cell\n\t\t\t\t\t\tkey={`comm-row-col-${c.header}-${community.id}`}\n\t\t\t\t\t\tcommunity={community}\n\t\t\t\t\t\tcolumn={c}\n\t\t\t\t\t\thovered={hovered}\n\t\t\t\t\t\tstyles={styles.tableElements}\n\t\t\t\t\t/>\n\t\t\t\t)\n\t\t\t})}\n\t\t</Tr>\n\t)\n}\n\nconst Tr = styled.tr<TableRowStyles>`\n\twidth: 100%;\n\tcursor: pointer;\n\tcolor: ${({ theme }) => theme.text().fill().hex()};\n\tbackground-color: ${({ selected, theme }: any) =>\n\t\tselected\n\t\t\t? `${theme\n\t\t\t\t\t.rect({ selectionState: SelectionState.Selected })\n\t\t\t\t\t.fill()\n\t\t\t\t\t.hex()}`\n\t\t\t: 'inherit'};\n\t&&:hover {\n\t\tbackground-color: ${({ theme }) =>\n\t\t\t`${theme\n\t\t\t\t.rect({ selectionState: SelectionState.Hovered })\n\t\t\t\t.fill()\n\t\t\t\t.hex()} !important`};\n\t\tuser-select: none;\n\t}\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { CommunityCollection } from '@graph-drilldown/arquero'\nimport styled from 'styled-components'\n\nimport { useSortHandling } from '~/hooks/communities'\n\nimport { useColumns, useRowHandling } from './CommunityList.hooks'\nimport { CommunityRow } from './CommunityRow'\n\nexport interface CommunityListProps {\n\tcommunities: CommunityCollection\n\tstyle?: React.CSSProperties\n}\n\n/**\n * Displays the list of communities at the currently selected level.\n * Should be color-coded to match the graph, and hover/select.\n */\nexport const CommunityList = ({ communities, style }: CommunityListProps) => {\n\tconst { hoveredCommunity, onHover, onClick } = useRowHandling()\n\n\tconst columns = useColumns(communities)\n\n\tconst { sorted, onSortClick } = useSortHandling(communities)\n\n\treturn (\n\t\t<Container style={style}>\n\t\t\t{sorted.size > 0 ? (\n\t\t\t\t<TableContainer>\n\t\t\t\t\t<Table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t{columns.map((c) => (\n\t\t\t\t\t\t\t\t\t<Th\n\t\t\t\t\t\t\t\t\t\tkey={`comm-th-${c.header}`}\n\t\t\t\t\t\t\t\t\t\tonClick={() => onSortClick(c)}\n\t\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\t\t{c.header}\n\t\t\t\t\t\t\t\t\t</Th>\n\t\t\t\t\t\t\t\t))}\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{sorted.map(\n\t\t\t\t\t\t\t\t(comm) => (\n\t\t\t\t\t\t\t\t\t<CommunityRow\n\t\t\t\t\t\t\t\t\t\tkey={`community-row-${comm.id}`}\n\t\t\t\t\t\t\t\t\t\tcommunity={comm}\n\t\t\t\t\t\t\t\t\t\tonHover={onHover}\n\t\t\t\t\t\t\t\t\t\tonClick={onClick}\n\t\t\t\t\t\t\t\t\t\thovered={comm.id === hoveredCommunity}\n\t\t\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t),\n\t\t\t\t\t\t\t\ttrue,\n\t\t\t\t\t\t\t)}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</Table>\n\t\t\t\t</TableContainer>\n\t\t\t) : (\n\t\t\t\t<Empty />\n\t\t\t)}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tfont-size: 0.8em;\n\ttext-align: right;\n\tbackground: ${({ theme }) => theme.plotArea().fill().hex()};\n\tcolor: ${({ theme }) => theme.text().fill().hex()};\n`\n\nconst TableContainer = styled.div`\n\tmargin: 4;\n\tdisplay: flex;\n\tjustify-content: center;\n`\n\nconst Table = styled.table`\n\tborder-spacing: 6px 0px;\n`\n\nconst Th = styled.th`\n\tcursor: pointer;\n`\n\nconst Empty = () => (\n\t<TableContainer>(no child communities to show)</TableContainer>\n)\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useDimensions } from '@essex/hooks'\nimport { Text } from '@fluentui/react'\nimport { memo, useMemo, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { useDataBounds, useStaticInputGraph } from '~/hooks/graph'\nimport { useSelection } from '~/hooks/useSelection'\nimport { useSettings } from '~/state'\nimport { BREAD_CRUMB_STYLES, HEADER_HEIGHT, variants } from '~/styles'\n\nimport { Minimap } from './Minimap'\nimport { BreadcrumbPanel } from './panels/BreadcrumbPanel'\nimport { CommunityPanel } from './panels/CommunityPanel'\n\nconst textContainerLabel = 15\nconst headerLabelStyle = {\n\tmargin: 2,\n\tmarginLeft: 4,\n\tmarginBottom: 10,\n\tmaxHeight: textContainerLabel,\n\ttextAlign: 'center',\n} as React.CSSProperties\n\nexport interface LeftSidePanelProps {\n\tstyle?: React.CSSProperties\n\theight: number\n\twidth: number\n}\n\nexport const LeftSidePanel: React.FC<LeftSidePanelProps> = memo(\n\tfunction LeftSidePanel({ style, height, width }) {\n\t\tconst ref = useRef(null)\n\t\tconst dimensions = useDimensions(ref)\n\n\t\tconst [settings] = useSettings()\n\t\tconst miniMapSize = settings.showMiniMap ? width : 0\n\n\t\tconst data = useStaticInputGraph()\n\n\t\tconst { selectedNodes, hoveredNodes } = useSelection()\n\t\tconst dataBounds = useDataBounds()\n\n\t\tconst communityHeight = useMemo(() => {\n\t\t\tconst breadcrumbContainer = dimensions?.height || 100\n\t\t\treturn height - (breadcrumbContainer + miniMapSize + HEADER_HEIGHT)\n\t\t}, [height, dimensions, miniMapSize])\n\n\t\tconst communityStyle = useMemo(\n\t\t\t() => ({ maxHeight: communityHeight }),\n\t\t\t[communityHeight],\n\t\t)\n\n\t\tconst communityPanelStyle = useMemo(\n\t\t\t() => ({\n\t\t\t\toverflow: 'auto',\n\t\t\t\tmaxHeight: communityHeight - (textContainerLabel + 50),\n\t\t\t}),\n\t\t\t[communityHeight],\n\t\t)\n\t\treturn (\n\t\t\t<Container style={style}>\n\t\t\t\t<BreadcrumbContainer ref={ref}>\n\t\t\t\t\t<BreadcrumbPanel styles={BREAD_CRUMB_STYLES} />\n\t\t\t\t</BreadcrumbContainer>\n\t\t\t\t<CommunityContainer style={communityStyle}>\n\t\t\t\t\t<HeaderLabel style={headerLabelStyle}>\n\t\t\t\t\t\t<Text variant={variants.mediumPlus}>\n\t\t\t\t\t\t\t{' '}\n\t\t\t\t\t\t\t<b>Communities</b>\n\t\t\t\t\t\t</Text>\n\t\t\t\t\t</HeaderLabel>\n\t\t\t\t\t<CommunityPanelContainer tabIndex={0} style={communityPanelStyle}>\n\t\t\t\t\t\t<CommunityPanel />\n\t\t\t\t\t</CommunityPanelContainer>\n\t\t\t\t</CommunityContainer>\n\t\t\t\t{settings.showMiniMap ? (\n\t\t\t\t\t<MiniMapContainer>\n\t\t\t\t\t\t<Minimap\n\t\t\t\t\t\t\tdata={data}\n\t\t\t\t\t\t\twidth={width}\n\t\t\t\t\t\t\theight={miniMapSize}\n\t\t\t\t\t\t\tminRadius={settings.miniMapNodeRadius}\n\t\t\t\t\t\t\tmaxRadius={settings.miniMapNodeRadius}\n\t\t\t\t\t\t\thoveredNodes={hoveredNodes}\n\t\t\t\t\t\t\tselectedNodes={selectedNodes}\n\t\t\t\t\t\t\taoiBounds={dataBounds}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</MiniMapContainer>\n\t\t\t\t) : null}\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\n// border: ${({ theme }) => `1px solid ${theme.application().faint().hex()}`};\nconst Container = styled.div``\n\nconst BreadcrumbContainer = styled.div``\n\nconst CommunityContainer = styled.div``\n\nconst HeaderLabel = styled.div``\n\nconst CommunityPanelContainer = styled.div``\n\nconst MiniMapContainer = styled.div`\n\tposition: absolute;\n\tbottom: ${HEADER_HEIGHT - 1}px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { ArqueroDetailsList } from '@essex/arquero-react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { useVisibleCommunities } from '~/hooks/communities'\n\nimport {\n\tuseColumnConfig,\n\tuseDefaultSortedTable,\n} from './CommunitiesTable.hooks'\nimport type { CommunitiesTableProps } from './CommunitiesTable.types'\n\n/* Displays current Community children based on current user community selection in Navigation Panel\n */\nexport const CommunitiesTable: React.FC<CommunitiesTableProps> = memo(\n\tfunction CommunitiesTable({ width, height }: CommunitiesTableProps) {\n\t\tconst communities = useVisibleCommunities()\n\t\tconst columns = useColumnConfig(communities, width)\n\t\tconst table = useDefaultSortedTable(communities)\n\t\treturn (\n\t\t\t<Container width={width} height={height}>\n\t\t\t\t<ArqueroDetailsList\n\t\t\t\t\ttable={table}\n\t\t\t\t\tcolumns={columns}\n\t\t\t\t\tfeatures={{\n\t\t\t\t\t\tsmartHeaders: true,\n\t\t\t\t\t\tsmartCells: true,\n\t\t\t\t\t}}\n\t\t\t\t\tcompact\n\t\t\t\t\tisSortable\n\t\t\t\t\tisHeadersFixed\n\t\t\t\t\tincludeAllColumns={false}\n\t\t\t\t/>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div<{ width: number; height: number }>`\n\twidth: ${({ width }) => width}px;\n\theight: ${({ height }) => height}px;\n`\n","function stylis_min (W) {\n  function M(d, c, e, h, a) {\n    for (var m = 0, b = 0, v = 0, n = 0, q, g, x = 0, K = 0, k, u = k = q = 0, l = 0, r = 0, I = 0, t = 0, B = e.length, J = B - 1, y, f = '', p = '', F = '', G = '', C; l < B;) {\n      g = e.charCodeAt(l);\n      l === J && 0 !== b + n + v + m && (0 !== b && (g = 47 === b ? 10 : 47), n = v = m = 0, B++, J++);\n\n      if (0 === b + n + v + m) {\n        if (l === J && (0 < r && (f = f.replace(N, '')), 0 < f.trim().length)) {\n          switch (g) {\n            case 32:\n            case 9:\n            case 59:\n            case 13:\n            case 10:\n              break;\n\n            default:\n              f += e.charAt(l);\n          }\n\n          g = 59;\n        }\n\n        switch (g) {\n          case 123:\n            f = f.trim();\n            q = f.charCodeAt(0);\n            k = 1;\n\n            for (t = ++l; l < B;) {\n              switch (g = e.charCodeAt(l)) {\n                case 123:\n                  k++;\n                  break;\n\n                case 125:\n                  k--;\n                  break;\n\n                case 47:\n                  switch (g = e.charCodeAt(l + 1)) {\n                    case 42:\n                    case 47:\n                      a: {\n                        for (u = l + 1; u < J; ++u) {\n                          switch (e.charCodeAt(u)) {\n                            case 47:\n                              if (42 === g && 42 === e.charCodeAt(u - 1) && l + 2 !== u) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                              break;\n\n                            case 10:\n                              if (47 === g) {\n                                l = u + 1;\n                                break a;\n                              }\n\n                          }\n                        }\n\n                        l = u;\n                      }\n\n                  }\n\n                  break;\n\n                case 91:\n                  g++;\n\n                case 40:\n                  g++;\n\n                case 34:\n                case 39:\n                  for (; l++ < J && e.charCodeAt(l) !== g;) {\n                  }\n\n              }\n\n              if (0 === k) break;\n              l++;\n            }\n\n            k = e.substring(t, l);\n            0 === q && (q = (f = f.replace(ca, '').trim()).charCodeAt(0));\n\n            switch (q) {\n              case 64:\n                0 < r && (f = f.replace(N, ''));\n                g = f.charCodeAt(1);\n\n                switch (g) {\n                  case 100:\n                  case 109:\n                  case 115:\n                  case 45:\n                    r = c;\n                    break;\n\n                  default:\n                    r = O;\n                }\n\n                k = M(c, r, k, g, a + 1);\n                t = k.length;\n                0 < A && (r = X(O, f, I), C = H(3, k, r, c, D, z, t, g, a, h), f = r.join(''), void 0 !== C && 0 === (t = (k = C.trim()).length) && (g = 0, k = ''));\n                if (0 < t) switch (g) {\n                  case 115:\n                    f = f.replace(da, ea);\n\n                  case 100:\n                  case 109:\n                  case 45:\n                    k = f + '{' + k + '}';\n                    break;\n\n                  case 107:\n                    f = f.replace(fa, '$1 $2');\n                    k = f + '{' + k + '}';\n                    k = 1 === w || 2 === w && L('@' + k, 3) ? '@-webkit-' + k + '@' + k : '@' + k;\n                    break;\n\n                  default:\n                    k = f + k, 112 === h && (k = (p += k, ''));\n                } else k = '';\n                break;\n\n              default:\n                k = M(c, X(c, f, I), k, h, a + 1);\n            }\n\n            F += k;\n            k = I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n            break;\n\n          case 125:\n          case 59:\n            f = (0 < r ? f.replace(N, '') : f).trim();\n            if (1 < (t = f.length)) switch (0 === u && (q = f.charCodeAt(0), 45 === q || 96 < q && 123 > q) && (t = (f = f.replace(' ', ':')).length), 0 < A && void 0 !== (C = H(1, f, c, d, D, z, p.length, h, a, h)) && 0 === (t = (f = C.trim()).length) && (f = '\\x00\\x00'), q = f.charCodeAt(0), g = f.charCodeAt(1), q) {\n              case 0:\n                break;\n\n              case 64:\n                if (105 === g || 99 === g) {\n                  G += f + e.charAt(l);\n                  break;\n                }\n\n              default:\n                58 !== f.charCodeAt(t - 1) && (p += P(f, q, g, f.charCodeAt(2)));\n            }\n            I = r = u = q = 0;\n            f = '';\n            g = e.charCodeAt(++l);\n        }\n      }\n\n      switch (g) {\n        case 13:\n        case 10:\n          47 === b ? b = 0 : 0 === 1 + q && 107 !== h && 0 < f.length && (r = 1, f += '\\x00');\n          0 < A * Y && H(0, f, c, d, D, z, p.length, h, a, h);\n          z = 1;\n          D++;\n          break;\n\n        case 59:\n        case 125:\n          if (0 === b + n + v + m) {\n            z++;\n            break;\n          }\n\n        default:\n          z++;\n          y = e.charAt(l);\n\n          switch (g) {\n            case 9:\n            case 32:\n              if (0 === n + m + b) switch (x) {\n                case 44:\n                case 58:\n                case 9:\n                case 32:\n                  y = '';\n                  break;\n\n                default:\n                  32 !== g && (y = ' ');\n              }\n              break;\n\n            case 0:\n              y = '\\\\0';\n              break;\n\n            case 12:\n              y = '\\\\f';\n              break;\n\n            case 11:\n              y = '\\\\v';\n              break;\n\n            case 38:\n              0 === n + b + m && (r = I = 1, y = '\\f' + y);\n              break;\n\n            case 108:\n              if (0 === n + b + m + E && 0 < u) switch (l - u) {\n                case 2:\n                  112 === x && 58 === e.charCodeAt(l - 3) && (E = x);\n\n                case 8:\n                  111 === K && (E = K);\n              }\n              break;\n\n            case 58:\n              0 === n + b + m && (u = l);\n              break;\n\n            case 44:\n              0 === b + v + n + m && (r = 1, y += '\\r');\n              break;\n\n            case 34:\n            case 39:\n              0 === b && (n = n === g ? 0 : 0 === n ? g : n);\n              break;\n\n            case 91:\n              0 === n + b + v && m++;\n              break;\n\n            case 93:\n              0 === n + b + v && m--;\n              break;\n\n            case 41:\n              0 === n + b + m && v--;\n              break;\n\n            case 40:\n              if (0 === n + b + m) {\n                if (0 === q) switch (2 * x + 3 * K) {\n                  case 533:\n                    break;\n\n                  default:\n                    q = 1;\n                }\n                v++;\n              }\n\n              break;\n\n            case 64:\n              0 === b + v + n + m + u + k && (k = 1);\n              break;\n\n            case 42:\n            case 47:\n              if (!(0 < n + m + v)) switch (b) {\n                case 0:\n                  switch (2 * g + 3 * e.charCodeAt(l + 1)) {\n                    case 235:\n                      b = 47;\n                      break;\n\n                    case 220:\n                      t = l, b = 42;\n                  }\n\n                  break;\n\n                case 42:\n                  47 === g && 42 === x && t + 2 !== l && (33 === e.charCodeAt(t + 2) && (p += e.substring(t, l + 1)), y = '', b = 0);\n              }\n          }\n\n          0 === b && (f += y);\n      }\n\n      K = x;\n      x = g;\n      l++;\n    }\n\n    t = p.length;\n\n    if (0 < t) {\n      r = c;\n      if (0 < A && (C = H(2, p, r, d, D, z, t, h, a, h), void 0 !== C && 0 === (p = C).length)) return G + p + F;\n      p = r.join(',') + '{' + p + '}';\n\n      if (0 !== w * E) {\n        2 !== w || L(p, 2) || (E = 0);\n\n        switch (E) {\n          case 111:\n            p = p.replace(ha, ':-moz-$1') + p;\n            break;\n\n          case 112:\n            p = p.replace(Q, '::-webkit-input-$1') + p.replace(Q, '::-moz-$1') + p.replace(Q, ':-ms-input-$1') + p;\n        }\n\n        E = 0;\n      }\n    }\n\n    return G + p + F;\n  }\n\n  function X(d, c, e) {\n    var h = c.trim().split(ia);\n    c = h;\n    var a = h.length,\n        m = d.length;\n\n    switch (m) {\n      case 0:\n      case 1:\n        var b = 0;\n\n        for (d = 0 === m ? '' : d[0] + ' '; b < a; ++b) {\n          c[b] = Z(d, c[b], e).trim();\n        }\n\n        break;\n\n      default:\n        var v = b = 0;\n\n        for (c = []; b < a; ++b) {\n          for (var n = 0; n < m; ++n) {\n            c[v++] = Z(d[n] + ' ', h[b], e).trim();\n          }\n        }\n\n    }\n\n    return c;\n  }\n\n  function Z(d, c, e) {\n    var h = c.charCodeAt(0);\n    33 > h && (h = (c = c.trim()).charCodeAt(0));\n\n    switch (h) {\n      case 38:\n        return c.replace(F, '$1' + d.trim());\n\n      case 58:\n        return d.trim() + c.replace(F, '$1' + d.trim());\n\n      default:\n        if (0 < 1 * e && 0 < c.indexOf('\\f')) return c.replace(F, (58 === d.charCodeAt(0) ? '' : '$1') + d.trim());\n    }\n\n    return d + c;\n  }\n\n  function P(d, c, e, h) {\n    var a = d + ';',\n        m = 2 * c + 3 * e + 4 * h;\n\n    if (944 === m) {\n      d = a.indexOf(':', 9) + 1;\n      var b = a.substring(d, a.length - 1).trim();\n      b = a.substring(0, d).trim() + b + ';';\n      return 1 === w || 2 === w && L(b, 1) ? '-webkit-' + b + b : b;\n    }\n\n    if (0 === w || 2 === w && !L(a, 1)) return a;\n\n    switch (m) {\n      case 1015:\n        return 97 === a.charCodeAt(10) ? '-webkit-' + a + a : a;\n\n      case 951:\n        return 116 === a.charCodeAt(3) ? '-webkit-' + a + a : a;\n\n      case 963:\n        return 110 === a.charCodeAt(5) ? '-webkit-' + a + a : a;\n\n      case 1009:\n        if (100 !== a.charCodeAt(4)) break;\n\n      case 969:\n      case 942:\n        return '-webkit-' + a + a;\n\n      case 978:\n        return '-webkit-' + a + '-moz-' + a + a;\n\n      case 1019:\n      case 983:\n        return '-webkit-' + a + '-moz-' + a + '-ms-' + a + a;\n\n      case 883:\n        if (45 === a.charCodeAt(8)) return '-webkit-' + a + a;\n        if (0 < a.indexOf('image-set(', 11)) return a.replace(ja, '$1-webkit-$2') + a;\n        break;\n\n      case 932:\n        if (45 === a.charCodeAt(4)) switch (a.charCodeAt(5)) {\n          case 103:\n            return '-webkit-box-' + a.replace('-grow', '') + '-webkit-' + a + '-ms-' + a.replace('grow', 'positive') + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-' + a.replace('shrink', 'negative') + a;\n\n          case 98:\n            return '-webkit-' + a + '-ms-' + a.replace('basis', 'preferred-size') + a;\n        }\n        return '-webkit-' + a + '-ms-' + a + a;\n\n      case 964:\n        return '-webkit-' + a + '-ms-flex-' + a + a;\n\n      case 1023:\n        if (99 !== a.charCodeAt(8)) break;\n        b = a.substring(a.indexOf(':', 15)).replace('flex-', '').replace('space-between', 'justify');\n        return '-webkit-box-pack' + b + '-webkit-' + a + '-ms-flex-pack' + b + a;\n\n      case 1005:\n        return ka.test(a) ? a.replace(aa, ':-webkit-') + a.replace(aa, ':-moz-') + a : a;\n\n      case 1e3:\n        b = a.substring(13).trim();\n        c = b.indexOf('-') + 1;\n\n        switch (b.charCodeAt(0) + b.charCodeAt(c)) {\n          case 226:\n            b = a.replace(G, 'tb');\n            break;\n\n          case 232:\n            b = a.replace(G, 'tb-rl');\n            break;\n\n          case 220:\n            b = a.replace(G, 'lr');\n            break;\n\n          default:\n            return a;\n        }\n\n        return '-webkit-' + a + '-ms-' + b + a;\n\n      case 1017:\n        if (-1 === a.indexOf('sticky', 9)) break;\n\n      case 975:\n        c = (a = d).length - 10;\n        b = (33 === a.charCodeAt(c) ? a.substring(0, c) : a).substring(d.indexOf(':', 7) + 1).trim();\n\n        switch (m = b.charCodeAt(0) + (b.charCodeAt(7) | 0)) {\n          case 203:\n            if (111 > b.charCodeAt(8)) break;\n\n          case 115:\n            a = a.replace(b, '-webkit-' + b) + ';' + a;\n            break;\n\n          case 207:\n          case 102:\n            a = a.replace(b, '-webkit-' + (102 < m ? 'inline-' : '') + 'box') + ';' + a.replace(b, '-webkit-' + b) + ';' + a.replace(b, '-ms-' + b + 'box') + ';' + a;\n        }\n\n        return a + ';';\n\n      case 938:\n        if (45 === a.charCodeAt(5)) switch (a.charCodeAt(6)) {\n          case 105:\n            return b = a.replace('-items', ''), '-webkit-' + a + '-webkit-box-' + b + '-ms-flex-' + b + a;\n\n          case 115:\n            return '-webkit-' + a + '-ms-flex-item-' + a.replace(ba, '') + a;\n\n          default:\n            return '-webkit-' + a + '-ms-flex-line-pack' + a.replace('align-content', '').replace(ba, '') + a;\n        }\n        break;\n\n      case 973:\n      case 989:\n        if (45 !== a.charCodeAt(3) || 122 === a.charCodeAt(4)) break;\n\n      case 931:\n      case 953:\n        if (!0 === la.test(d)) return 115 === (b = d.substring(d.indexOf(':') + 1)).charCodeAt(0) ? P(d.replace('stretch', 'fill-available'), c, e, h).replace(':fill-available', ':stretch') : a.replace(b, '-webkit-' + b) + a.replace(b, '-moz-' + b.replace('fill-', '')) + a;\n        break;\n\n      case 962:\n        if (a = '-webkit-' + a + (102 === a.charCodeAt(5) ? '-ms-' + a : '') + a, 211 === e + h && 105 === a.charCodeAt(13) && 0 < a.indexOf('transform', 10)) return a.substring(0, a.indexOf(';', 27) + 1).replace(ma, '$1-webkit-$2') + a;\n    }\n\n    return a;\n  }\n\n  function L(d, c) {\n    var e = d.indexOf(1 === c ? ':' : '{'),\n        h = d.substring(0, 3 !== c ? e : 10);\n    e = d.substring(e + 1, d.length - 1);\n    return R(2 !== c ? h : h.replace(na, '$1'), e, c);\n  }\n\n  function ea(d, c) {\n    var e = P(c, c.charCodeAt(0), c.charCodeAt(1), c.charCodeAt(2));\n    return e !== c + ';' ? e.replace(oa, ' or ($1)').substring(4) : '(' + c + ')';\n  }\n\n  function H(d, c, e, h, a, m, b, v, n, q) {\n    for (var g = 0, x = c, w; g < A; ++g) {\n      switch (w = S[g].call(B, d, x, e, h, a, m, b, v, n, q)) {\n        case void 0:\n        case !1:\n        case !0:\n        case null:\n          break;\n\n        default:\n          x = w;\n      }\n    }\n\n    if (x !== c) return x;\n  }\n\n  function T(d) {\n    switch (d) {\n      case void 0:\n      case null:\n        A = S.length = 0;\n        break;\n\n      default:\n        if ('function' === typeof d) S[A++] = d;else if ('object' === typeof d) for (var c = 0, e = d.length; c < e; ++c) {\n          T(d[c]);\n        } else Y = !!d | 0;\n    }\n\n    return T;\n  }\n\n  function U(d) {\n    d = d.prefix;\n    void 0 !== d && (R = null, d ? 'function' !== typeof d ? w = 1 : (w = 2, R = d) : w = 0);\n    return U;\n  }\n\n  function B(d, c) {\n    var e = d;\n    33 > e.charCodeAt(0) && (e = e.trim());\n    V = e;\n    e = [V];\n\n    if (0 < A) {\n      var h = H(-1, c, e, e, D, z, 0, 0, 0, 0);\n      void 0 !== h && 'string' === typeof h && (c = h);\n    }\n\n    var a = M(O, e, c, 0, 0);\n    0 < A && (h = H(-2, a, e, e, D, z, a.length, 0, 0, 0), void 0 !== h && (a = h));\n    V = '';\n    E = 0;\n    z = D = 1;\n    return a;\n  }\n\n  var ca = /^\\0+/g,\n      N = /[\\0\\r\\f]/g,\n      aa = /: */g,\n      ka = /zoo|gra/,\n      ma = /([,: ])(transform)/g,\n      ia = /,\\r+?/g,\n      F = /([\\t\\r\\n ])*\\f?&/g,\n      fa = /@(k\\w+)\\s*(\\S*)\\s*/,\n      Q = /::(place)/g,\n      ha = /:(read-only)/g,\n      G = /[svh]\\w+-[tblr]{2}/,\n      da = /\\(\\s*(.*)\\s*\\)/g,\n      oa = /([\\s\\S]*?);/g,\n      ba = /-self|flex-/g,\n      na = /[^]*?(:[rp][el]a[\\w-]+)[^]*/,\n      la = /stretch|:\\s*\\w+\\-(?:conte|avail)/,\n      ja = /([^-])(image-set\\()/,\n      z = 1,\n      D = 1,\n      E = 0,\n      w = 1,\n      O = [],\n      S = [],\n      A = 0,\n      R = null,\n      Y = 0,\n      V = '';\n  B.use = T;\n  B.set = U;\n  void 0 !== W && U(W);\n  return B;\n}\n\nexport default stylis_min;\n","import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { memo, useMemo } from 'react';\nimport styled from 'styled-components';\nexport const Bar = /*#__PURE__*/ memo(function Bar({ value , scale , color , height , width  }) {\n    const size = useMemo(()=>scale(value), [\n        scale,\n        value\n    ]);\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: /*#__PURE__*/ _jsx(SvgElement, {\n            width: width,\n            height: height,\n            children: /*#__PURE__*/ _jsx(\"rect\", {\n                width: size || 10,\n                height: height,\n                x: width - (size || 0),\n                fill: color,\n                rx: 1,\n                opacity: 0.5\n            })\n        })\n    });\n});\nconst SvgElement = styled.svg`\n\twidth: ${({ width  })=>width};\n\theight: ${({ height  })=>height};\n\tposition: absolute;\n\ttop: 0;\n\tleft: 0;\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { useDimensions } from '@essex/hooks';\nimport { Text } from '@fluentui/react';\nimport { useThematic } from '@thematic/react';\nimport { memo, useCallback, useRef } from 'react';\nimport styled from 'styled-components';\nimport { textStyle } from '../common/styles/index.js';\nimport { useTableStyles } from '../hooks/useStyles.js';\nimport { Bar } from './Bar.js';\nimport { useRowElements } from './hooks/useRowsElements.js';\nimport { useSortedNeighbors } from './hooks/useSortedNeighbors.js';\nconst SUBHEADERS = [\n    'community',\n    'connections',\n    'members'\n];\nconst CommunityEdgeList = /*#__PURE__*/ memo(function CommunityEdgeList({ edges , selectedEdge , onEdgeClick: onEdgeClick1 , clearCurrentSelection , styles  }) {\n    const [headerVariant, subheaderVariant, headerStyle, subheaderStyle, rootStyle, itemStyle, itemVariant, ] = useTableStyles(styles);\n    const theme = useThematic();\n    const handleEdgeClick = useCallback((edge)=>{\n        void clearCurrentSelection().then(()=>{\n            if (edge && selectedEdge && edge.communityId === selectedEdge.communityId) {\n                onEdgeClick1(undefined);\n            } else {\n                onEdgeClick1(edge);\n            }\n        });\n    }, [\n        onEdgeClick1,\n        selectedEdge,\n        clearCurrentSelection\n    ]);\n    const sortedEdges = useSortedNeighbors(edges);\n    const ref = useRef(null);\n    const connRef = useRef(null);\n    const memberDimensions = useDimensions(ref);\n    const connectionDimensions = useDimensions(connRef);\n    const [getBackgroundStyle, barColor, connScale, sizeScale] = useRowElements(theme, selectedEdge, edges, memberDimensions);\n    return sortedEdges ? /*#__PURE__*/ _jsxs(Table, {\n        className: 'tableItems-root',\n        style: rootStyle,\n        children: [\n            /*#__PURE__*/ _jsx(TableHead, {\n                children: /*#__PURE__*/ _jsx(TableRow, {\n                    children: /*#__PURE__*/ _jsx(TableHeader, {\n                        colSpan: 3,\n                        className: 'tableItems-header',\n                        style: headerStyle,\n                        children: /*#__PURE__*/ _jsx(Text, {\n                            variant: headerVariant,\n                            children: /*#__PURE__*/ _jsx(Bold, {\n                                children: \"Neighboring Communities\"\n                            })\n                        })\n                    })\n                })\n            }),\n            /*#__PURE__*/ _jsxs(TableBody, {\n                children: [\n                    /*#__PURE__*/ _jsx(TableRow, {\n                        children: SUBHEADERS.map((header, index)=>/*#__PURE__*/ _jsx(TableHeader, {\n                                className: 'tableItems-subheader',\n                                style: subheaderStyle,\n                                children: /*#__PURE__*/ _jsx(Text, {\n                                    variant: subheaderVariant,\n                                    styles: textStyle,\n                                    children: /*#__PURE__*/ _jsx(Bold, {\n                                        children: header\n                                    })\n                                })\n                            }, `subheader-${index}`))\n                    }),\n                    sortedEdges.map((edge, i)=>{\n                        const onEdgeClick = ()=>handleEdgeClick(edge);\n                        return /*#__PURE__*/ _jsxs(TableRow, {\n                            children: [\n                                /*#__PURE__*/ _jsx(TableCell, {\n                                    style: {\n                                        ...getBackgroundStyle(edge, i),\n                                        textAlign: 'center',\n                                        ...itemStyle\n                                    },\n                                    onClick: onEdgeClick,\n                                    children: /*#__PURE__*/ _jsx(TableMaxHeight, {\n                                        children: /*#__PURE__*/ _jsx(Text, {\n                                            variant: itemVariant,\n                                            styles: textStyle,\n                                            children: edge.communityId\n                                        })\n                                    })\n                                }),\n                                /*#__PURE__*/ _jsx(TableCell, {\n                                    style: {\n                                        ...itemStyle,\n                                        ...getBackgroundStyle(edge, i)\n                                    },\n                                    onClick: onEdgeClick,\n                                    ref: connRef,\n                                    children: /*#__PURE__*/ _jsx(TableMaxHeight, {\n                                        children: /*#__PURE__*/ _jsxs(AbsoluteDiv, {\n                                            children: [\n                                                /*#__PURE__*/ _jsx(TextContainer, {\n                                                    children: /*#__PURE__*/ _jsx(Text, {\n                                                        variant: itemVariant,\n                                                        styles: textStyle,\n                                                        children: edge.connections\n                                                    })\n                                                }),\n                                                connectionDimensions?.width ? /*#__PURE__*/ _jsx(Bar, {\n                                                    value: edge.connections,\n                                                    width: connectionDimensions.width,\n                                                    height: connectionDimensions?.height || 15,\n                                                    color: barColor,\n                                                    scale: connScale\n                                                }) : null\n                                            ]\n                                        })\n                                    })\n                                }, `neighbor-community-${0}`),\n                                /*#__PURE__*/ _jsx(TableCell, {\n                                    style: {\n                                        ...itemStyle,\n                                        ...getBackgroundStyle(edge, i)\n                                    },\n                                    onClick: onEdgeClick,\n                                    ref: ref,\n                                    children: /*#__PURE__*/ _jsx(TableMaxHeight, {\n                                        children: /*#__PURE__*/ _jsxs(AbsoluteDiv, {\n                                            children: [\n                                                /*#__PURE__*/ _jsx(TextContainer, {\n                                                    children: /*#__PURE__*/ _jsx(Text, {\n                                                        variant: itemVariant,\n                                                        styles: textStyle,\n                                                        children: edge.size\n                                                    })\n                                                }),\n                                                memberDimensions?.width ? /*#__PURE__*/ _jsx(Bar, {\n                                                    value: edge.size,\n                                                    width: memberDimensions.width,\n                                                    height: memberDimensions?.height || 15,\n                                                    color: barColor,\n                                                    scale: sizeScale\n                                                }) : null\n                                            ]\n                                        })\n                                    })\n                                }, `neighbor-community-${1}`)\n                            ]\n                        }, i);\n                    })\n                ]\n            })\n        ]\n    }) : null;\n});\nCommunityEdgeList.displayName = 'CommunityEdgeList';\nexport default CommunityEdgeList;\nconst Table = styled.table`\n\twidth: 100%;\n\tborder-collapse: collapse;\n`;\nconst TableHead = styled.thead``;\nconst TableRow = styled.tr``;\nconst TableBody = styled.tbody``;\nconst TableMaxHeight = styled.div`\n\theight: 15px;\n`;\nconst Bold = styled.div`\n\tfont-weight: bold;\n`;\nconst TableHeader = styled.td`\n\tfont-weight: bold;\n\twidth: 1px;\n\twhite-space: nowrap;\n\ttext-align: center;\n`;\nconst TableCell = styled.td`\n\twhite-space: nowrap;\n\twidth: 1px;\n\tcursor: pointer;\n\ttext-align: end;\n\tposition: relative;\n\tmin-height: 10px;\n`;\nconst TextContainer = styled.div`\n\tz-index: 2;\n\ttop: 0px;\n\tright: 5px;\n\tposition: absolute;\n`;\nconst AbsoluteDiv = styled.div`\n\ttop: 0;\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { Text } from '@fluentui/react';\nimport { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { tableItems, textStyle } from '../common/styles/index.js';\nimport { useRowStyle } from './hooks/useRowStyle.js';\nconst NO_STYLE = Object.freeze({});\nexport const EntityItem = ({ item , attrs , index , selected , styles , onEntityClick  })=>{\n    const rowStyle = useRowStyle(index, selected);\n    const itemStyle = styles?.tableItems ?? NO_STYLE;\n    const itemVariant = styles?.tableItemsText ?? tableItems;\n    const onTableItemClick = useCallback(()=>onEntityClick(item.id), [\n        onEntityClick,\n        item\n    ]);\n    return /*#__PURE__*/ _jsxs(TableRow, {\n        style: rowStyle,\n        onClick: onTableItemClick,\n        children: [\n            /*#__PURE__*/ _jsx(TableItem, {\n                className: 'tableItem',\n                style: itemStyle,\n                children: /*#__PURE__*/ _jsx(Text, {\n                    variant: itemVariant,\n                    styles: textStyle,\n                    children: item.id\n                })\n            }),\n            attrs ? attrs.map((attr, i)=>/*#__PURE__*/ _jsxs(TableItem, {\n                    className: 'tableItem',\n                    style: itemStyle,\n                    children: [\n                        item.attrs && item.attrs[attr] ? /*#__PURE__*/ _jsx(Text, {\n                            variant: itemVariant,\n                            styles: textStyle,\n                            children: item.attrs[attr].toLocaleString()\n                        }) : '',\n                        ' '\n                    ]\n                }, `attr${i}`)) : null\n        ]\n    }, `e${index}`);\n};\nconst TableRow = styled.tr``;\nconst TableItem = styled.td`\n\tcursor: pointer;\n`;\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { Text } from '@fluentui/react';\nimport { memo, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { textStyle } from '../common/styles/index.js';\nimport { EntityItem } from '../EntityItem/EntityItem.js';\nimport { useTableStyles } from '../hooks/useStyles.js';\nexport const CommunityTable = /*#__PURE__*/ memo(function CommunityTable({ entities , minimize , styles , communityId , visibleColumns , selections , onSelectionChange  }) {\n    const isSelected = useCallback((entity)=>selections && selections.includes(entity.id), [\n        selections\n    ]);\n    const attrKeys = useMemo(()=>{\n        if (visibleColumns) {\n            return visibleColumns;\n        }\n        if (minimize || !entities[0].attrs) {\n            return [];\n        }\n        return Object.keys(entities[0].attrs);\n    }, [\n        entities,\n        minimize,\n        visibleColumns\n    ]);\n    const [headerVariant, subheaderVariant, headerStyle, subheaderStyle, rootStyle, ] = useTableStyles(styles);\n    const headerText = communityId ? `${communityId} Community Membership` : 'Community Membership';\n    return /*#__PURE__*/ _jsxs(Table, {\n        className: 'tableItems-root',\n        style: rootStyle,\n        children: [\n            /*#__PURE__*/ _jsx(TableHeader, {\n                children: /*#__PURE__*/ _jsx(TableRow, {\n                    children: /*#__PURE__*/ _jsx(TableHeaderRow, {\n                        colSpan: attrKeys.length + 1,\n                        className: 'tableItems-header',\n                        style: headerStyle,\n                        children: /*#__PURE__*/ _jsx(Text, {\n                            variant: headerVariant,\n                            children: /*#__PURE__*/ _jsx(Bold, {\n                                children: headerText\n                            })\n                        })\n                    })\n                })\n            }),\n            /*#__PURE__*/ _jsx(THeader, {\n                children: /*#__PURE__*/ _jsx(TableRow, {\n                    children: [\n                        'id',\n                        ...attrKeys\n                    ].map((key, i)=>/*#__PURE__*/ _jsx(HeaderCell, {\n                            className: 'tableItems-subheader',\n                            style: subheaderStyle,\n                            children: /*#__PURE__*/ _jsx(Text, {\n                                variant: subheaderVariant,\n                                styles: textStyle,\n                                children: /*#__PURE__*/ _jsx(Bold, {\n                                    children: key\n                                })\n                            })\n                        }, `table-header-${i}`))\n                })\n            }),\n            /*#__PURE__*/ _jsx(TableBody, {\n                children: entities.map((entity, i)=>/*#__PURE__*/ _jsx(EntityItem, {\n                        item: entity,\n                        attrs: attrKeys,\n                        index: i,\n                        styles: styles,\n                        selected: isSelected(entity),\n                        onEntityClick: onSelectionChange\n                    }, `entity_${i}`))\n            })\n        ]\n    });\n});\nCommunityTable.displayName = 'CommunityTableProps';\nconst THeader = styled.thead`\n\tfont-weight: bold;\n`;\nconst TableRow = styled.tr``;\nconst TableHeader = styled.thead``;\nconst TableBody = styled.tbody``;\nconst Bold = styled.div`\n\tfont-weight: bold;\n`;\nconst Table = styled.table`\n\twidth: 100%;\n\tborder-collapse: collapse;\n`;\nconst HeaderCell = styled.th`\n\twidth: 16%;\n\twidth: 1px;\n\twhite-space: nowrap;\n`;\nconst TableHeaderRow = styled.th`\n\tfont-weight: bold;\n\twidth: 1px;\n\twhite-space: nowrap;\n\ttext-align: center;\n`;\n","import { jsx as _jsx, Fragment as _Fragment } from \"react/jsx-runtime\";\nimport { IconButton } from '@fluentui/react';\nimport { memo, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nconst iconButtonStyles = {\n    root: {\n        maxHeight: '15px',\n        maxWidth: '15px'\n    }\n};\nexport const TableExpander = /*#__PURE__*/ memo(function TableExpander({ isOpen , handleButtonClick , styles  }) {\n    const iconName = useMemo(()=>isOpen ? 'DoubleChevronRight12' : 'DoubleChevronLeft12', [\n        isOpen\n    ]);\n    const buttonStyle = styles ?? iconButtonStyles;\n    const handleClick = useCallback(()=>{\n        handleButtonClick(!isOpen);\n    }, [\n        handleButtonClick,\n        isOpen\n    ]);\n    return /*#__PURE__*/ _jsx(_Fragment, {\n        children: /*#__PURE__*/ _jsx(Header, {\n            children: /*#__PURE__*/ _jsx(IconButton, {\n                styles: buttonStyle,\n                iconProps: {\n                    iconName\n                },\n                text: \"Panel Resize\",\n                onClick: handleClick\n            })\n        })\n    });\n});\nconst Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`;\n","import { jsx as _jsx, jsxs as _jsxs, Fragment as _Fragment } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { Spinner } from '@fluentui/react';\nimport styled from 'styled-components';\nimport { useThemesAccentStyle } from '../../hooks/theme.js';\nimport CommunityEdgeList from '../../NeighborList/CommunityEdgeList.js';\nimport { ScrollArea } from '../../ScollArea/index.js';\nimport { CommunityTable } from '../CommunityTable.js';\nimport { TableExpander } from '../TableExpander.js';\nimport { useAdjacentCommunityData } from './hooks/useAdjacentCommunityData.js';\nimport { useEdgeSelection } from './hooks/useEdgeSelection.js';\nimport { useExpandedPanel } from './hooks/useExpandedPanel.js';\nconst ENTITY_LOADER_MSG = 'Fetching entity data...';\nexport const AdjacentCommunities = function AdjacentCommunities({ dataProvider , isOpen , styles , visibleColumns , minimizeColumns , refresh , selections , onSelectionChange  }) {\n    const colorStyle = useThemesAccentStyle(isOpen);\n    const { edgeContentStyle , edgeEntitiesContentStyle , edgeEntitiesExpanderClick , edgeExpanderClick , edgeListOpen , edgeEntitiesOpen ,  } = useExpandedPanel({\n        isOpen\n    });\n    const [setEdgeSelection, loadMoreEntities, moreEntitiesToLoad, edgeEntities, selectedCommunityEdge, clearCurrentSelection, ] = useEdgeSelection(dataProvider);\n    const [adjacentCommunities, isAdjacentEntitiesLoading] = useAdjacentCommunityData(dataProvider, isOpen, refresh);\n    return /*#__PURE__*/ _jsxs(_Fragment, {\n        children: [\n            adjacentCommunities && adjacentCommunities.length > 0 ? /*#__PURE__*/ _jsxs(_Fragment, {\n                children: [\n                    /*#__PURE__*/ _jsx(Spacer, {\n                        style: colorStyle,\n                        className: 'neighbor-expander-button',\n                        children: isOpen ? /*#__PURE__*/ _jsx(TableExpander, {\n                            isOpen: edgeListOpen,\n                            handleButtonClick: edgeExpanderClick,\n                            styles: styles?.neighborExpandButton\n                        }) : null\n                    }),\n                    /*#__PURE__*/ _jsx(Content, {\n                        style: edgeContentStyle,\n                        children: /*#__PURE__*/ _jsx(CommunityEdgeList, {\n                            edges: adjacentCommunities,\n                            selectedEdge: selectedCommunityEdge,\n                            onEdgeClick: setEdgeSelection,\n                            clearCurrentSelection: clearCurrentSelection,\n                            isOpen: edgeListOpen,\n                            styles: styles\n                        })\n                    })\n                ]\n            }) : null,\n            isAdjacentEntitiesLoading || edgeEntities?.length > 0 ? /*#__PURE__*/ _jsxs(_Fragment, {\n                children: [\n                    /*#__PURE__*/ _jsx(Spacer, {\n                        style: colorStyle,\n                        className: 'neighbor-expander-button',\n                        children: isOpen ? /*#__PURE__*/ _jsx(TableExpander, {\n                            isOpen: edgeEntitiesOpen,\n                            handleButtonClick: edgeEntitiesExpanderClick,\n                            styles: styles?.neighborExpandButton\n                        }) : null\n                    }),\n                    /*#__PURE__*/ _jsxs(Content, {\n                        style: edgeEntitiesContentStyle,\n                        children: [\n                            edgeEntities?.length > 0 && edgeEntitiesOpen ? /*#__PURE__*/ _jsx(ScrollArea, {\n                                loadMore: loadMoreEntities,\n                                hasMore: moreEntitiesToLoad,\n                                children: /*#__PURE__*/ _jsx(CommunityTable, {\n                                    entities: edgeEntities,\n                                    communityId: selectedCommunityEdge?.communityId,\n                                    visibleColumns: visibleColumns,\n                                    styles: styles,\n                                    minimize: minimizeColumns,\n                                    selections: selections,\n                                    onSelectionChange: onSelectionChange\n                                })\n                            }) : null,\n                            isAdjacentEntitiesLoading ? /*#__PURE__*/ _jsx(Spinner, {\n                                label: ENTITY_LOADER_MSG\n                            }) : null\n                        ]\n                    })\n                ]\n            }) : null\n        ]\n    });\n};\nconst Content = styled.div`\n\toverflow-y: auto;\n\ttransition: height 0.2s;\n`;\nconst Spacer = styled.div`\n\tborder-style: solid;\n\tborder-width: 0px 0.5px 0px 0.5px;\n\talign-self: center;\n\toverflow: hidden;\n`;\n","import { useCallback, useState } from 'react';\nimport { exportCSVFile } from '../utils/utils.js';\nexport const downloadCommunityMemebers = async (communityId, size, getEntityCallback, level)=>{\n    const response = await getEntityCallback(undefined, {\n        loadCount: size,\n        communityId: communityId\n    });\n    const filename = `c${communityId}_level${level}`;\n    if (response) {\n        exportCSVFile(response, filename);\n    } else {\n        throw Error('DataProvider undefined, unable to download CSV');\n    }\n};\nexport function useCommunityDownload(communityId, size, getEntityCallback, level) {\n    const [isLoading, setIsLoading] = useState(false);\n    const handleDownloadClick = useCallback((event)=>{\n        event.stopPropagation();\n        setIsLoading(true);\n        console.log(`initiated download of level: ${level} community: ${level}`);\n        const promise = downloadCommunityMemebers(communityId, size, getEntityCallback, level);\n        promise.catch((reason)=>{\n            console.error(reason);\n        });\n        promise.finally(()=>setIsLoading(false));\n    }, [\n        communityId,\n        setIsLoading,\n        getEntityCallback,\n        level,\n        size\n    ]);\n    return [\n        handleDownloadClick,\n        isLoading\n    ];\n}\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { IconButton, Spinner, Text, TooltipHost } from '@fluentui/react';\nimport { memo, useCallback } from 'react';\nimport styled from 'styled-components';\nimport { paddingLeft } from '../common/styles/index.js';\nimport { useThemesStyle } from '../hooks/theme.js';\nimport { useCommunityLevelText, useCommunityText } from '../hooks/useCommunityDetails.js';\nimport { useCommunityDownload } from '../hooks/useCommunityDownload.js';\nimport { useControls } from '../hooks/useControls.js';\nimport { useOverviewStyles } from '../hooks/useStyles.js';\nimport { MagBar } from '../MagBar/index.js';\nconst DEFAULT_MAGBAR_WIDTH = 120;\nconst SPINNER_STYLE = {\n    marginLeft: 17\n};\nexport const CommunityOverview = /*#__PURE__*/ memo(function CommunityOverview({ communityId , size , sizePercent , incrementLevel , onToggleOpen , filterProps , getEntityCallback , level , styles , controls , neighborSize  }) {\n    const levelLabel = useCommunityLevelText(level, incrementLevel);\n    const style = useThemesStyle(styles);\n    const [headerVariant, subheaderVariant, headerStyle, subheaderStyle, buttonStyle, ] = useOverviewStyles(styles);\n    const { showLevel , showMembership , showFilter , showExport  } = useControls(controls);\n    const communityText = useCommunityText(communityId);\n    const handleFilterChange = useCallback((event)=>{\n        event.stopPropagation();\n        filterProps.toggleFilter();\n    }, [\n        filterProps\n    ]);\n    const [handleDownload, downloadInProgress] = useCommunityDownload(communityId, size, getEntityCallback, level);\n    return /*#__PURE__*/ _jsx(FlexyContainer, {\n        onClick: onToggleOpen,\n        style: style,\n        className: 'cardoverview-root',\n        children: /*#__PURE__*/ _jsxs(Grid, {\n            children: [\n                /*#__PURE__*/ _jsxs(GridItem1, {\n                    children: [\n                        /*#__PURE__*/ _jsx(Divider, {\n                            className: 'cardoverview-header',\n                            style: headerStyle,\n                            children: /*#__PURE__*/ _jsx(Text, {\n                                variant: headerVariant,\n                                children: /*#__PURE__*/ _jsx(Bold, {\n                                    children: communityText\n                                })\n                            })\n                        }),\n                        showLevel ? /*#__PURE__*/ _jsx(Divider, {\n                            className: 'cardoverview-subheader',\n                            style: subheaderStyle,\n                            children: /*#__PURE__*/ _jsx(Text, {\n                                variant: subheaderVariant,\n                                children: levelLabel\n                            })\n                        }) : null\n                    ]\n                }),\n                neighborSize && neighborSize > 0 ? /*#__PURE__*/ _jsx(GridItem2, {\n                    children: /*#__PURE__*/ _jsxs(TooltipHost, {\n                        content: \"Number of neighboring (connected) communities. Members of neighboring communities may be related, but are less tightly connected that those within the community.\",\n                        children: [\n                            /*#__PURE__*/ _jsx(Divider, {\n                                className: 'cardoverview-subheader',\n                                style: subheaderStyle,\n                                children: /*#__PURE__*/ _jsx(Text, {\n                                    variant: subheaderVariant,\n                                    children: `Neighbors: ${neighborSize}`\n                                })\n                            }),\n                            /*#__PURE__*/ _jsx(HeightSpacer, {})\n                        ]\n                    })\n                }) : null,\n                /*#__PURE__*/ _jsx(GridItem3, {\n                    children: /*#__PURE__*/ _jsxs(FlexySubContainer, {\n                        children: [\n                            size && showMembership ? /*#__PURE__*/ _jsxs(Divider, {\n                                children: [\n                                    /*#__PURE__*/ _jsx(Divider, {\n                                        className: 'cardoverview-subheader',\n                                        style: subheaderStyle,\n                                        children: /*#__PURE__*/ _jsxs(Text, {\n                                            variant: subheaderVariant,\n                                            children: [\n                                                \"Members: \",\n                                                size.toLocaleString()\n                                            ]\n                                        })\n                                    }),\n                                    /*#__PURE__*/ _jsx(MagBar, {\n                                        percent: sizePercent,\n                                        width: DEFAULT_MAGBAR_WIDTH\n                                    })\n                                ]\n                            }) : null,\n                            showFilter ? /*#__PURE__*/ _jsx(TooltipHost, {\n                                content: `Show only unique entities between level ${level} and ${level + 1}.`,\n                                children: /*#__PURE__*/ _jsx(IconButton, {\n                                    styles: buttonStyle,\n                                    iconProps: {\n                                        iconName: filterProps.state ? 'Filter' : 'ClearFilter'\n                                    },\n                                    onClick: handleFilterChange,\n                                    disabled: filterProps.disabled\n                                })\n                            }) : null,\n                            showExport ? /*#__PURE__*/ _jsx(TooltipHost, {\n                                content: \"Download community as .csv file.\",\n                                children: downloadInProgress ? /*#__PURE__*/ _jsx(Spinner, {\n                                    label: \"\",\n                                    style: SPINNER_STYLE\n                                }) : /*#__PURE__*/ _jsx(IconButton, {\n                                    styles: buttonStyle,\n                                    iconProps: {\n                                        iconName: 'DownloadDocument'\n                                    },\n                                    onClick: handleDownload\n                                })\n                            }) : null\n                        ]\n                    })\n                })\n            ]\n        })\n    });\n});\nconst Divider = styled.div``;\nconst Bold = styled.div`\n\tfont-weight: bold;\n`;\nconst FlexySubContainer = styled.div`\n\tdisplay: flex;\n`;\nconst FlexyContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n\talign-items: center;\n\tpadding: 6px;\n\tcursor: cell;\n\tborder-radius: 5px;\n`;\nconst Grid = styled.div`\n\tdisplay: grid;\n\tgrid-template-columns: 1fr 1fr 1fr;\n\tgrid-column-gap: 8;\n\tgrid-row-gap: 1;\n\twidth: 100%;\n`;\nconst GridItem1 = styled.div`\n\tmargin-left: ${paddingLeft};\n\tgrid-row: 1;\n\tgrid-column: 1;\n`;\nconst GridItem2 = styled.div`\n\tgrid-row: 1;\n\tgrid-column: 2;\n\tjustify-self: center;\n`;\nconst HeightSpacer = styled.div`\n\tvisibility: hidden;\n\theight: 10px;\n`;\nconst GridItem3 = styled.div`\n\tgrid-row: 1;\n\tgrid-column: 3;\n\tjustify-self: end;\n`;\n","const tiny = 'tiny';\nconst xSmall = 'xSmall';\nconst small = 'small';\nconst smallPlus = 'smallPlus';\nconst medium = 'medium';\nconst mediumPlus = 'mediumPlus';\nconst large = 'large';\nconst xLarge = 'xLarge';\nconst xxLarge = 'xxLarge';\nconst mega = 'mega';\nexport const variants = {\n    tiny,\n    xSmall,\n    small,\n    smallPlus,\n    medium,\n    mediumPlus,\n    large,\n    xLarge,\n    xxLarge,\n    mega\n};\nexport const rowHeader = variants.large;\nexport const rowSubHeader = variants.mediumPlus;\nexport const headerLabel = variants.large;\nexport const subHeaderLabel = variants.mediumPlus;\nexport const tableItems = variants.medium;\nexport const paddingLeft = 10;\nexport const textStyle = {\n    root: {\n        marginLeft: paddingLeft\n    }\n};\n","import { jsx as _jsx, jsxs as _jsxs } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { Spinner } from '@fluentui/react';\nimport { memo, useCallback, useMemo } from 'react';\nimport styled from 'styled-components';\nimport { EmptyEntityList } from '../EntityItem/EmptyEntityList.js';\nimport { useContainerStyle } from '../hooks/theme.js';\nimport { useCommunityData } from '../hooks/useCommunityData.js';\nimport { useCommunitySizePercent } from '../hooks/useCommunitySizePercent.js';\nimport { useUpdatedCommunityProvider } from '../hooks/useUpdatedCommunityProvider.js';\nimport { ScrollArea } from '../ScollArea/index.js';\nimport { AdjacentCommunities } from './AdjacentCommunities/index.js';\nimport { CommunityOverview } from './CommunityOverview.js';\nimport { CommunityTable } from './CommunityTable.js';\nconst ENTITY_LOADER_MSG = 'Fetching entity data...';\nexport const CommunityCard = /*#__PURE__*/ memo(function CommunityCard({ maxSize , maxLevel , level , incrementLevel , neighborCallback , settings , dataProvider , toggleUpdate , selections , onSelectionChange  }) {\n    const { isOpen: isOpenProp , minimizeColumns , visibleColumns , styles , controls ,  } = settings;\n    useUpdatedCommunityProvider(dataProvider, level, neighborCallback);\n    const [entities, isLoading, loadMore, hasMore, isOpen, toggleOpen, filterProps, ] = useCommunityData(dataProvider, isOpenProp, maxLevel);\n    const sizePercent = useCommunitySizePercent(dataProvider.size, maxSize);\n    const contentStyle = useContainerStyle(isOpen);\n    const loadingElement = useMemo(()=>isLoading ? /*#__PURE__*/ _jsx(Spinner, {\n            label: ENTITY_LOADER_MSG\n        }) : null, [\n        isLoading\n    ]);\n    const handleEntityClick = useCallback((entiyId)=>{\n        if (onSelectionChange) {\n            const currentSelection = selections || [];\n            const deduped = new Set(currentSelection);\n            if (deduped.has(entiyId)) {\n                deduped.delete(entiyId);\n                onSelectionChange(Array.from(deduped));\n            } else {\n                deduped.add(entiyId);\n                onSelectionChange(Array.from(deduped));\n            }\n        }\n    }, [\n        onSelectionChange,\n        selections\n    ]);\n    return /*#__PURE__*/ _jsxs(Container, {\n        children: [\n            /*#__PURE__*/ _jsx(CommunityOverview, {\n                communityId: dataProvider.communityId,\n                onToggleOpen: toggleOpen,\n                incrementLevel: incrementLevel,\n                sizePercent: sizePercent,\n                filterProps: filterProps,\n                getEntityCallback: loadMore,\n                level: level,\n                styles: styles?.cardOverview,\n                controls: controls,\n                neighborSize: dataProvider.neighborSize,\n                size: dataProvider.size\n            }),\n            /*#__PURE__*/ _jsxs(Flex, {\n                children: [\n                    /*#__PURE__*/ _jsxs(Content, {\n                        style: contentStyle,\n                        children: [\n                            entities?.length > 0 ? /*#__PURE__*/ _jsx(ScrollArea, {\n                                loadMore: loadMore,\n                                hasMore: hasMore,\n                                children: /*#__PURE__*/ _jsx(CommunityTable, {\n                                    entities: entities,\n                                    communityId: dataProvider.communityId,\n                                    visibleColumns: visibleColumns,\n                                    styles: styles?.table,\n                                    minimize: minimizeColumns,\n                                    selections: selections,\n                                    onSelectionChange: handleEntityClick\n                                })\n                            }) : null,\n                            loadingElement,\n                            /*#__PURE__*/ _jsx(EmptyEntityList, {\n                                filterProps: filterProps,\n                                entities: entities,\n                                isLoading: isLoading\n                            })\n                        ]\n                    }),\n                    /*#__PURE__*/ _jsx(AdjacentCommunities, {\n                        dataProvider: dataProvider,\n                        isOpen: isOpen,\n                        styles: styles?.table,\n                        visibleColumns: visibleColumns,\n                        minimizeColumns: minimizeColumns,\n                        refresh: toggleUpdate,\n                        selections: selections,\n                        onSelectionChange: handleEntityClick\n                    })\n                ]\n            })\n        ]\n    });\n});\nconst Container = styled.div``;\nconst Flex = styled.div`\n\tdisplay: flex;\n`;\nconst Content = styled.div`\n\toverflow-y: auto;\n\ttransition: height 0.2s;\n`;\n","import { jsx as _jsx } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { useCallback, useEffect, useLayoutEffect, useMemo, useState } from 'react';\nimport styled from 'styled-components';\nimport { useEntityProvider } from './common/dataProviders/hooks/useEntityProvider.js';\nimport { CommunityCard } from './CommunityCard/CommunityCard.js';\nimport { useCommunityLevelCalculator, useCommunitySizeCalculator } from './hooks/useCommunityDetails.js';\nimport { useCommunityProvider } from './hooks/useCommunityProvider.js';\nimport { useSettings } from './hooks/useSettings.js';\nimport { isEntitiesAsync } from './utils/utils.js';\n/**\n * Component creates tables to view connected data while also applying default thematic styles and data colors.\n * @param communities - required ICommunityDetail[]\n * @param entities - (optional) IEntityDetail[] | ILoadEntitiesAsync\n * @param neighbors - (optional) INeighborCommunityDetail[] | ILoadNeighborCommunitiesAsync\n * @param settings - (optional) ISettings\n * @param selections - (optional)  EntityId[]\n * @param onSelectionChange - (optional) IOnSelectionChange\n */ export const HierarchyBrowser = function HierarchyBrowser({ communities , entities , neighbors , settings , selections , onSelectionChange  }) {\n    const [providerCache, setProviderCache] = useState({});\n    const [selectedIds, setSelectedIds] = useState();\n    const [forceUpdateNeighbors, setForceNeighborUpdate] = useState(false);\n    useEffect(()=>{\n        setForceNeighborUpdate((state)=>!state);\n    }, [\n        communities,\n        neighbors\n    ]);\n    useLayoutEffect(()=>{\n        setSelectedIds(selections);\n    }, [\n        selections\n    ]);\n    const neighborCallback = useCallback(async (params, communityId)=>{\n        if (neighbors) {\n            const isAsync = isEntitiesAsync(neighbors);\n            if (isAsync) {\n                const loader = neighbors;\n                return await loader(params);\n            }\n            const neighborsList = neighbors;\n            const data = neighborsList.filter((d)=>d.edgeCommunityId === communityId);\n            return {\n                data,\n                error: undefined\n            };\n        }\n        return {\n            data: [],\n            error: new Error('neighbor communities not loaded')\n        };\n    }, [\n        neighbors\n    ]);\n    const [minLevel, maxLevel, communityWithLevels] = useCommunityLevelCalculator(communities);\n    const maxSize = useCommunitySizeCalculator(communities);\n    const loadEntitiesByCommunity = useEntityProvider(communityWithLevels, entities);\n    useCommunityProvider({\n        communities: communityWithLevels,\n        setProviderCache,\n        loadEntitiesByCommunity\n    });\n    const cardOrder = useMemo(()=>{\n        return communities.reduce((acc, c, index)=>{\n            const id = c.communityId;\n            acc[id] = index;\n            return acc;\n        }, {});\n    }, [\n        communities\n    ]);\n    const getSettings = useSettings(settings);\n    const sortedKeys = useMemo(()=>Object.keys(providerCache).sort((a, b)=>cardOrder[a] - cardOrder[b]), [\n        providerCache,\n        cardOrder\n    ]);\n    const getCommunityProvider = useCallback((communityId)=>providerCache[communityId], [\n        providerCache\n    ]);\n    return /*#__PURE__*/ _jsx(CardContainer, {\n        children: sortedKeys.map((communityId, index)=>{\n            const provider = getCommunityProvider(communityId);\n            const cardSettings = getSettings(index);\n            return /*#__PURE__*/ _jsx(CommunityCard, {\n                incrementLevel: minLevel === 0,\n                maxSize: maxSize,\n                maxLevel: maxLevel,\n                level: maxLevel - index,\n                dataProvider: provider,\n                neighborCallback: neighborCallback,\n                settings: cardSettings,\n                toggleUpdate: forceUpdateNeighbors,\n                selections: selectedIds,\n                onSelectionChange: onSelectionChange\n            }, `_card_${index}_${communityId}`);\n        })\n    });\n};\nconst CardContainer = styled.div`\n\tmargin: 10px 10px 10px 10px;\n\toverflow-y: auto;\n`;\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { NodeCollection } from '@graph-drilldown/arquero'\nimport { desc, op, table } from 'arquero'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\n\nexport function getEdgesFromTableByID(\n\tselectedId: string,\n\tnodeTable: ColumnTable,\n\tedges: ColumnTable,\n) {\n\tif (selectedId) {\n\t\tconsole.log('selected id', selectedId)\n\t\tconst joinedTable = joinNodeCommunities(edges, nodeTable)\n\t\tconst neighborTable = getNeighbors(selectedId, joinedTable, nodeTable)\n\t\treturn neighborTable\n\t}\n}\n\n// joins the community ids for edge source/target into the edge table\nfunction joinNodeCommunities(\n\tedges: ColumnTable,\n\tnodes: ColumnTable,\n): ColumnTable {\n\tif (edges.numRows() === 0) {\n\t\treturn table({})\n\t}\n\n\tconst derived = edges\n\t\t.params({\n\t\t\tcids: hashNodeField(nodes, 'community.id'),\n\t\t})\n\t\t.derive({\n\t\t\t'source.community': (d: any, $: any) => $.cids[d['edge.source']],\n\t\t\t'target.community': (d: any, $: any) => $.cids[d['edge.target']],\n\t\t})\n\n\treturn derived\n}\n\nfunction hashNodeField(nodes: ColumnTable, field: string) {\n\tconst hash: any = {}\n\tconst id = nodes.getter('node.id')\n\tconst cid = nodes.getter(field)\n\tnodes.scan((idx) => hash[id(idx)] === cid(idx))\n\treturn hash\n}\n\n// for a given community, finds all the connected sibling counts via edges\nfunction getNeighbors(\n\tselectedId: string,\n\tjoined: ColumnTable,\n\tnodes: ColumnTable,\n): ColumnTable {\n\tif (joined.numRows() === 0 && nodes.numRows() === 0) {\n\t\treturn table({})\n\t}\n\n\tconst cFiltered = joined\n\t\t.params({\n\t\t\tcid: selectedId,\n\t\t})\n\t\t.filter(\n\t\t\t(d: any, $: any) =>\n\t\t\t\td['source.community'] === $.cid || d['target.community'] === $.cid,\n\t\t)\n\t// the joined table has communities for the source and target of each edge row\n\t// this leaves  a groupby and rollup - group by the communities, and then count the links\n\t// groupby accepts multiple column keys, so it will create groups that match both\n\tconst grouped = cFiltered.groupby({\n\t\tkey: (d: any, $: any) => {\n\t\t\tif (d['source.community'] !== $.cid) {\n\t\t\t\treturn d['source.community']\n\t\t\t}\n\t\t\treturn d['target.community']\n\t\t},\n\t})\n\n\t// count is a built in rollup shortcut - it will count the number of rows in each joined group\n\t// the output is a new table with the results - i.e., a row for each count\n\t// this is now a count of the edges between the source and target communities\n\tconst counted = grouped.count().orderby(desc('count'))\n\t// add back the nodecount\n\tconst newJoined = counted.lookup(nodes, ['key', 'community.id'], {\n\t\tmembers: (d: any) => d['community.nodeCount'],\n\t})\n\treturn newJoined\n}\n\n/**\n * Filters an edge list to only include connections between the nodes in the provided collection\n * @param edges - edge table\n * @param nodes - nodes to filter with (as source/target)\n */\nexport function filterEdgesToNodes(\n\tedges: ColumnTable,\n\tnodes: NodeCollection,\n): ColumnTable {\n\tif (edges.numRows() === 0) {\n\t\treturn edges\n\t}\n\n\t// note the manual hash: op.has does NOT work with Maps\n\tconst nodeIds: any = {}\n\tnodes.forEach((node) => nodeIds[node.id] === true)\n\treturn edges\n\t\t.params({\n\t\t\tnodeIds,\n\t\t})\n\t\t.filter(\n\t\t\t(d: any, $: any) =>\n\t\t\t\top.has($.nodeIds, d['edge.source']) &&\n\t\t\t\top.has($.nodeIds, d['edge.target']),\n\t\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton } from '@fluentui/react'\nimport { memo, useCallback, useMemo, useState } from 'react'\nimport type { RndResizeStartCallback } from 'react-rnd'\nimport { Rnd } from 'react-rnd'\nimport styled from 'styled-components'\n\nimport { HEADER_HEIGHT } from '~/styles'\nimport { BrowserOptions } from '~/types'\n\nimport type { IPosition } from '../GraphViewerPage.hooks'\nimport { DIRECTION } from '../hooks/useResizeHandlers'\nimport { CommunitiesTable } from './CommunitiesTable'\nimport { HierarchyBrowserPanel } from './HierarchyBrowserPanel'\nimport { PivotContent } from './PivotContent'\n\nexport type Enable = {\n\tbottom?: boolean\n\tbottomLeft?: boolean\n\tbottomRight?: boolean\n\tleft?: boolean\n\tright?: boolean\n\ttop?: boolean\n\ttopLeft?: boolean\n\ttopRight?: boolean\n}\n\nconst enabledState = {\n\tbottom: false,\n\tbottomLeft: false,\n\tbottomRight: false,\n\tleft: false,\n\tright: false,\n\ttop: true,\n\ttopLeft: false,\n\ttopRight: false,\n}\n\nexport interface GraphPanelProps {\n\twidth: number\n\thandleResizeStop: (\n\t\te: any,\n\t\tdirection: any,\n\t\tref: any,\n\t\tdelta: any,\n\t\tposition: any,\n\t) => any\n\thandleResizeStart: RndResizeStartCallback\n\thandleButtonClick: (dir: DIRECTION) => void\n\tposition: IPosition\n}\nconst HEIGHT_MIN = 100\nexport const ResizableBrowser: React.FC<GraphPanelProps> = memo(\n\tfunction ResizableBrowser({\n\t\twidth,\n\t\tposition,\n\t\thandleResizeStop,\n\t\thandleResizeStart,\n\t\thandleButtonClick,\n\t}) {\n\t\tconst isDefaultOpen = useMemo(\n\t\t\t() => position.height > HEIGHT_MIN,\n\t\t\t[position],\n\t\t)\n\n\t\tconst [panelContent, setPanelContent] = useState<BrowserOptions>(\n\t\t\tBrowserOptions.Table,\n\t\t)\n\n\t\tconst iconName = useMemo(\n\t\t\t() => (isDefaultOpen ? 'DoubleChevronDown12' : 'DoubleChevronUp12'),\n\t\t\t[isDefaultOpen],\n\t\t)\n\n\t\tconst handleClick = useCallback(() => {\n\t\t\tconst direction = isDefaultOpen ? DIRECTION.DOWN : DIRECTION.UP\n\t\t\thandleButtonClick(direction)\n\t\t}, [handleButtonClick, isDefaultOpen])\n\n\t\tconst tableHeight = useMemo(\n\t\t\t() => position.height - HEADER_HEIGHT,\n\t\t\t[position],\n\t\t)\n\n\t\tconst content = useMemo(() => {\n\t\t\tif (panelContent === BrowserOptions.Browser) {\n\t\t\t\treturn <HierarchyBrowserPanel />\n\t\t\t}\n\t\t\treturn <CommunitiesTable width={width} height={tableHeight} />\n\t\t}, [panelContent, width, tableHeight])\n\n\t\treturn (\n\t\t\t<StyledRnd\n\t\t\t\tsize={{ width, height: position.height }}\n\t\t\t\tposition={{ x: 0, y: position.y }}\n\t\t\t\tbounds='parent'\n\t\t\t\tonResizeStop={handleResizeStop}\n\t\t\t\tdisableDragging={true}\n\t\t\t\tenableResizing={enabledState}\n\t\t\t\tonResizeStart={handleResizeStart}\n\t\t\t>\n\t\t\t\t<BottomContainer isDefaultOpen={isDefaultOpen}>\n\t\t\t\t\t<Header>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\ticonProps={{\n\t\t\t\t\t\t\t\ticonName,\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t\ttext='Resize viewer'\n\t\t\t\t\t\t\ttitle='Resize viewer'\n\t\t\t\t\t\t\tonClick={handleClick}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<PivotContent\n\t\t\t\t\t\t\tselectedKey={panelContent}\n\t\t\t\t\t\t\tsetSelectedKey={setPanelContent}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<PanelContainer isDefaultOpen={isDefaultOpen}>\n\t\t\t\t\t\t{content}\n\t\t\t\t\t</PanelContainer>\n\t\t\t\t</BottomContainer>\n\t\t\t</StyledRnd>\n\t\t)\n\t},\n)\n\nconst StyledRnd = styled(Rnd as any)`\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n`\n\nconst BottomContainer = styled.div<{ isDefaultOpen?: boolean }>`\n\twidth: 100%;\n\theight: 100%;\n\tborder: 1px solid ${({ theme }) => theme.application().border().hex()};\n\toverflow-x: hidden;\n\toverflow-y: ${({ isDefaultOpen }) => (isDefaultOpen ? 'auto' : 'hidden')};\n`\n\nconst Header = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\talign-items: center;\n`\n\nconst PanelContainer = styled.div<{ isDefaultOpen?: boolean }>`\n\tvisibility: ${({ isDefaultOpen }) => (isDefaultOpen ? 'visible' : 'hidden')};\n`\n","import { jsx as _jsx } from \"react/jsx-runtime\";\n/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { Children, cloneElement, useMemo } from 'react';\n/**\n * Receives an array of CollapsiblePanel as children to render it\n * with first and last props calculating it automatically\n */ export const CollapsiblePanelContainer = ({ children  })=>{\n    const countChildren = Children.count(children);\n    const rendered = useMemo(()=>{\n        return Children.map(children, (child, index)=>/*#__PURE__*/ cloneElement(child, {\n                first: index === 0,\n                last: countChildren === index - 1\n            }));\n    }, [\n        children,\n        countChildren\n    ]);\n    return /*#__PURE__*/ _jsx(\"div\", {\n        children: rendered\n    });\n};\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Toggle } from '@fluentui/react'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nexport interface ToggleHeaderProps {\n\ttitle: string\n\tsubtitle?: string\n\tchecked: boolean\n\tdisabled?: boolean\n\tonChange?: (checked: boolean) => void\n}\n\nexport const ToggleHeader: React.FC<ToggleHeaderProps> = ({\n\ttitle,\n\tsubtitle,\n\tchecked,\n\tdisabled,\n\tonChange,\n}) => {\n\tconst handleChange = useCallback((_, v) => onChange?.(v), [onChange])\n\treturn (\n\t\t<Container>\n\t\t\t<Title>{title}</Title>\n\t\t\t<Subtitle>{subtitle}</Subtitle>\n\t\t\t<ToggleSection>\n\t\t\t\t<Toggle\n\t\t\t\t\tdisabled={disabled}\n\t\t\t\t\tstyles={toggleStyles}\n\t\t\t\t\tonText='on'\n\t\t\t\t\toffText='off'\n\t\t\t\t\tchecked={checked}\n\t\t\t\t\tonChange={handleChange}\n\t\t\t\t/>\n\t\t\t</ToggleSection>\n\t\t</Container>\n\t)\n}\n\n// create a \"micro toggle\"\nconst toggleStyles = {\n\troot: {\n\t\tmargin: 0,\n\t},\n\tpill: {\n\t\theight: 14,\n\t\twidth: 28,\n\t\tpadding: 1,\n\t\tfontSize: 12,\n\t},\n\tthumb: {\n\t\tfontSize: 12,\n\t},\n\ttext: {\n\t\tfontSize: '0.8em',\n\t},\n}\n\nconst Container = styled.div`\n\tborder-top: 1px solid\n\t\t${({ theme }) => theme.application().lowContrast().hex()};\n\tborder-bottom: none;\n\tbackground: ${({ theme }) => theme.application().faint().hex(0.8)};\n\tpadding: 4px;\n\theight: 32px;\n\tpadding-left: 20px;\n\tfont-size: 0.8em;\n\tdisplay: flex;\n\talign-items: center;\n\tjustify-content: space-between;\n`\n\nconst Title = styled.div`\n\tfont-weight: bold;\n`\n\nconst Subtitle = styled.div`\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\tfont-size: 0.9em;\n`\n\nconst ToggleSection = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { getPrecision } from '@graph-drilldown/arquero'\nimport { useIsNominal } from '@graph-drilldown/hooks'\nimport type { ColorEncoding } from '@graph-drilldown/types'\nimport { format } from 'd3-format'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nexport interface RangeTextProps {\n\tencoding: ColorEncoding\n\tincludeMidpoint?: boolean\n}\n\nexport const ColorRangeText: React.FC<RangeTextProps> = ({\n\tencoding,\n\tincludeMidpoint = false,\n}) => {\n\tconst isNominal = useIsNominal(encoding)\n\tconst range = useMemo(() => {\n\t\tif (isNominal) {\n\t\t\tconst { uniques = [] } = encoding\n\t\t\tconst length = uniques.length\n\t\t\treturn [`${length} unique value${length !== 1 ? 's' : ''}`, '', '']\n\t\t} else {\n\t\t\tconst precision = getPrecision(encoding.domain)\n\t\t\tconst [min, max] = encoding.domain || [0, 1]\n\t\t\tconst mid = (max - min) / 2\n\t\t\tconst fmt = format(`.${precision}f`)\n\t\t\treturn [fmt(min), fmt(mid), fmt(max)]\n\t\t}\n\t}, [isNominal, encoding])\n\treturn (\n\t\t<Container>\n\t\t\t<Left>{range[0]}</Left>\n\t\t\t{includeMidpoint && <Center>{range[1]}</Center>}\n\t\t\t<Right>{range[2]}</Right>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tfont-size: 0.7em;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nconst Left = styled.div``\nconst Center = styled.div`\n\ttext-align: center;\n`\nconst Right = styled.div`\n\ttext-align: right;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tuseNumericEncodingScale,\n\tuseThematicColorScale,\n} from '@graph-drilldown/hooks'\nimport type { ColorEncoding, NumericEncoding } from '@graph-drilldown/types'\nimport { DataBinding } from '@graph-drilldown/types'\nimport { getNamedSchemeColor } from '@thematic/color'\nimport { useThematic } from '@thematic/react'\nimport { useCallback, useMemo } from 'react'\n\nexport function useLegendNumericScale(\n\tencoding?: NumericEncoding,\n\tcount = 10,\n\t/**\n\t * Value to use if no encoding is provided.\n\t */\n\tdefaultValue = 0,\n) {\n\tconst enc = useMemo(() => {\n\t\treturn (\n\t\t\tencoding ||\n\t\t\t({\n\t\t\t\tbinding: DataBinding.Fixed,\n\t\t\t\tvalue: defaultValue,\n\t\t\t} as NumericEncoding)\n\t\t)\n\t}, [encoding, defaultValue])\n\n\tconst scale = useSizeScale(enc, count)\n\n\treturn useCallback(\n\t\t(value?: number) => {\n\t\t\tif (enc.binding === DataBinding.Fixed) {\n\t\t\t\treturn enc.value\n\t\t\t}\n\t\t\treturn scale(value || 0)\n\t\t},\n\t\t[enc, scale],\n\t)\n}\n\nfunction useSizeScale(encoding, count) {\n\tconst scale = useNumericEncodingScale(encoding)\n\treturn useCallback(\n\t\t(index) => {\n\t\t\tconst [min, max] = encoding.domain\n\t\t\tconst steps = (max - min) / count\n\t\t\tconst v = steps * index + min\n\t\t\treturn scale(v)\n\t\t},\n\t\t[encoding, scale, count],\n\t)\n}\n\n/**\n * Provides an indexed color scale that maps the encoding colors\n * to the item position. Dynamically returns the correct color based\n * on encoding type.\n * If there is no encoding, it returns the default legend fill color.\n * @param encoding\n * @param count\n */\nexport function useLegendColorScale(\n\tencoding?: ColorEncoding,\n\tcount = 10,\n\t/**\n\t * Default hex color to use if no encoding is provided.\n\t */\n\tdefaultValue = 'none',\n) {\n\tconst enc = useMemo(() => {\n\t\treturn (\n\t\t\tencoding ||\n\t\t\t({\n\t\t\t\tbinding: DataBinding.Fixed,\n\t\t\t\tvalue: defaultValue,\n\t\t\t} as ColorEncoding)\n\t\t)\n\t}, [encoding, defaultValue])\n\n\tconst fixedColor = useFixedColor(enc)\n\tconst paletteColor = usePaletteColor(enc)\n\tconst sampledColors = useSampledColors(enc, count)\n\n\treturn useCallback(\n\t\t(index?: number) => {\n\t\t\tswitch (enc.binding) {\n\t\t\t\tcase DataBinding.Fixed:\n\t\t\t\t\treturn fixedColor\n\t\t\t\tcase DataBinding.Palette:\n\t\t\t\t\treturn paletteColor\n\t\t\t\tcase DataBinding.Scaled:\n\t\t\t\t\treturn sampledColors[index || 0]\n\t\t\t}\n\t\t},\n\t\t[enc, fixedColor, paletteColor, sampledColors],\n\t)\n}\n\nexport function useSampledColors(encoding: ColorEncoding, count = 10) {\n\tconst scale = useThematicColorScale(encoding)\n\treturn useMemo(() => {\n\t\tconst allColors = scale.toArray()\n\t\t// HACK: there is a bug in the thematic toArray for continuous scales\n\t\t// it does not cover the whole range correctly\n\t\t// this checks for a length that matches the hard-coded continuous output\n\t\t// for thematic, and re-scales to ensure it captures the endpoints\n\t\tif (allColors.length === 100) {\n\t\t\tconst [min, max] = encoding.domain || [0, 1]\n\t\t\tconst steps = (max - min) / count\n\t\t\tconst colors = new Array(count).fill(1).map((a, i) => {\n\t\t\t\tconst v = steps * i + min\n\t\t\t\treturn scale(v).hex()\n\t\t\t})\n\t\t\treturn colors\n\t\t}\n\t\treturn scale.toArray(count)\n\t}, [scale, encoding, count])\n}\n\nexport function useFixedColor(encoding: ColorEncoding) {\n\treturn useMemo(() => encoding.value, [encoding])\n}\n\nexport function usePaletteColor(encoding: ColorEncoding) {\n\tconst theme = useThematic()\n\treturn useMemo(\n\t\t() => getNamedSchemeColor(theme.scheme, encoding.thematicSchemePath).hex(),\n\t\t[theme, encoding],\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DataBinding } from '@graph-drilldown/types'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nexport interface LegendLabelProps {\n\tlabel: string\n\tbinding: DataBinding\n\tfield?: string\n\tfixedValue?: string\n\tpaletteValue?: string\n\tunset?: boolean\n}\n\nexport const LegendLabel: React.FC<LegendLabelProps> = ({\n\tlabel,\n\tbinding,\n\tfield = '',\n\tfixedValue = '',\n\tpaletteValue = '',\n\tunset,\n}) => {\n\tconst render = useMemo(() => {\n\t\tif (unset) {\n\t\t\treturn <Unset>&mdash;</Unset>\n\t\t}\n\t\tswitch (binding) {\n\t\t\tcase DataBinding.Fixed:\n\t\t\t\treturn <Fixed>{fixedValue}</Fixed>\n\t\t\tcase DataBinding.Scaled:\n\t\t\t\treturn <Field>{field}</Field>\n\t\t\tcase DataBinding.Palette:\n\t\t\t\treturn <Palette>{paletteValue}</Palette>\n\t\t}\n\t}, [binding, field, fixedValue, paletteValue, unset])\n\treturn (\n\t\t<Container>\n\t\t\t<Label>{label}:</Label>\n\t\t\t{render}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tfont-size: 0.8em;\n\tdisplay: flex;\n\talign-items: center;\n`\n\nconst Label = styled.div`\n\tmargin-right: 4px;\n`\n\nconst Unset = styled.div`\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nconst Fixed = styled.div``\n\n// provide a subtle indication that these are dynamic\nconst Field = styled.div`\n\t&:before {\n\t\tcontent: '[';\n\t\tmargin-right: 3px;\n\t\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\t}\n\t&:after {\n\t\tcontent: '] column';\n\t\tmargin-left: 3px;\n\t\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n\t}\n`\n\nconst Palette = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { format } from 'd3-format'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nexport interface NumericRangeTextProps {\n\tincludeMidpoint?: boolean\n\tdomain?: [number, number]\n\tprecision?: number\n}\n\nexport const NumericRangeText: React.FC<NumericRangeTextProps> = ({\n\tincludeMidpoint = false,\n\tdomain = [0, 1],\n\tprecision = 3,\n}) => {\n\tconst range = useMemo(() => {\n\t\tconst [min, max] = domain\n\t\tconst mid = (max - min) / 2\n\t\tconst fmt = format(`.${precision}f`)\n\t\tconst values = mid === 0 ? [max] : [min, mid, max]\n\t\treturn values.map((v) => fmt(v))\n\t}, [domain, precision])\n\n\treturn (\n\t\t<Container>\n\t\t\t<Left>{range[0]}</Left>\n\t\t\t{includeMidpoint && <Center>{range[1]}</Center>}\n\t\t\t<Right>{range[2]}</Right>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tfont-size: 0.7em;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nconst Left = styled.div``\nconst Center = styled.div`\n\ttext-align: center;\n`\nconst Right = styled.div`\n\ttext-align: right;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type { ColorEncoding, NumericEncoding } from '@graph-drilldown/types'\nimport { DataBinding } from '@graph-drilldown/types'\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { ColorRangeText } from './ColorRangeText.js'\nimport { Dashes } from './Dashes.js'\nimport { Dots } from './Dots.js'\nimport { LegendLabel } from './LegendLabel.js'\nimport { NumericRangeText } from './NumericRangeText.js'\n\n// TODO: width should flex\nconst LEGEND_WIDTH = 260\nconst LEGEND_HEIGHT = 20\nconst LEGEND_ITEMS = 11\nconst RANGE_HEIGHT = 12\n\nexport interface HeaderLegendProps {\n\tlabel: string\n\tencoding: NumericEncoding | ColorEncoding\n\tcolorEncoding?: ColorEncoding\n\tsizeEncoding?: NumericEncoding\n\topacityEncoding?: NumericEncoding\n\tisUnset?: boolean\n\tisDashes?: boolean\n\tisNumeric?: boolean\n}\n\n/**\n * A compact horizontal legend designed to fit in panel headers.\n */\nexport const HeaderLegend: React.FC<HeaderLegendProps> = ({\n\tlabel,\n\tencoding,\n\tcolorEncoding,\n\tsizeEncoding,\n\topacityEncoding,\n\tisUnset,\n\tisDashes,\n\tisNumeric,\n}) => {\n\treturn (\n\t\t<Container>\n\t\t\t<LegendLabel\n\t\t\t\tlabel={label}\n\t\t\t\tbinding={encoding.binding}\n\t\t\t\tfield={encoding.field}\n\t\t\t\tfixedValue={`${encoding.value}`}\n\t\t\t\tpaletteValue={'from palette'}\n\t\t\t\tunset={isUnset}\n\t\t\t/>\n\t\t\t{!isUnset ? (\n\t\t\t\t<Legend>\n\t\t\t\t\t<LabeledLegend\n\t\t\t\t\t\tlabel={label}\n\t\t\t\t\t\tencoding={encoding}\n\t\t\t\t\t\tcolorEncoding={colorEncoding}\n\t\t\t\t\t\tsizeEncoding={sizeEncoding}\n\t\t\t\t\t\topacityEncoding={opacityEncoding}\n\t\t\t\t\t\tisDashes={isDashes}\n\t\t\t\t\t\tisNumeric={isNumeric}\n\t\t\t\t\t/>\n\t\t\t\t</Legend>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n}\n\nconst LabeledLegend: React.FC<HeaderLegendProps> = ({\n\tencoding,\n\tcolorEncoding,\n\tsizeEncoding,\n\topacityEncoding,\n\tisDashes,\n\tisNumeric,\n}) => {\n\tconst fixed = useMemo(\n\t\t() => encoding.binding !== DataBinding.Scaled,\n\t\t[encoding],\n\t)\n\tconst height = useMemo(\n\t\t() => (fixed ? LEGEND_HEIGHT : LEGEND_HEIGHT + RANGE_HEIGHT + 4),\n\t\t[fixed],\n\t)\n\tconst Marks = isDashes ? Dashes : Dots\n\n\tconst rangeText = useRangeText(encoding, isNumeric)\n\n\treturn (\n\t\t<LegendContainer width={LEGEND_WIDTH} height={height}>\n\t\t\t<LegendSection>\n\t\t\t\t<Marks\n\t\t\t\t\tcolorEncoding={colorEncoding}\n\t\t\t\t\tsizeEncoding={sizeEncoding}\n\t\t\t\t\topacityEncoding={opacityEncoding}\n\t\t\t\t\twidth={LEGEND_WIDTH}\n\t\t\t\t\theight={LEGEND_HEIGHT}\n\t\t\t\t\tmaxItems={LEGEND_ITEMS}\n\t\t\t\t/>\n\t\t\t</LegendSection>\n\t\t\t{!fixed ? rangeText : null}\n\t\t</LegendContainer>\n\t)\n}\n\nfunction useRangeText(encoding: ColorEncoding | NumericEncoding, isNumeric) {\n\treturn (\n\t\t<RangeSection>\n\t\t\t{isNumeric ? (\n\t\t\t\t<NumericRangeText includeMidpoint domain={encoding.domain} />\n\t\t\t) : (\n\t\t\t\t<ColorRangeText encoding={encoding as ColorEncoding} includeMidpoint />\n\t\t\t)}\n\t\t</RangeSection>\n\t)\n}\n\nconst Container = styled.div`\n\tmargin: 2px;\n\tmargin-left: 4px;\n`\n\nconst LegendContainer = styled.div<{\n\twidth: number\n\theight: number\n}>`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: space-between;\n\twidth: ${({ width }) => width}px;\n\theight: ${({ height }) => height}px;\n\tpadding: 4px;\n\tborder-radius: 2px;\n\tcolor: ${({ theme }) => theme.text().fill().hex()};\n\tbackground-color: ${({ theme }) => theme.plotArea().fill().hex()};\n\tborder: 1px solid ${({ theme }) => theme.plotArea().stroke().hex()};\n`\n\nconst Legend = styled.div`\n\tmargin-top: 8px;\n\tmargin-bottom: 4px;\n`\nconst LegendSection = styled.div`\n\theight: ${LEGEND_HEIGHT}px;\n`\n\nconst RangeSection = styled.div`\n\theight: ${RANGE_HEIGHT}px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { HeaderLegend } from '@graph-drilldown/components'\n\nimport { useEdgeCount } from '~/hooks/graph'\nimport { useEdgeColorEncoding } from '~/state'\n\nexport const EdgeColorHeaderLegend: React.FC = () => {\n\tconst count = useEdgeCount()\n\tconst encoding = useEdgeColorEncoding()\n\treturn (\n\t\t<HeaderLegend\n\t\t\tlabel={'Edge color'}\n\t\t\tencoding={encoding}\n\t\t\tcolorEncoding={encoding}\n\t\t\tisUnset={count === 0}\n\t\t\tisDashes\n\t\t/>\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { SelectionState } from '@thematic/core'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport type { TableRowStyles } from '../CommunityList/CommunityList.types'\n\nexport interface CommunityRowProps {\n\tnodeId: string\n\tonHover: (id?: string) => void\n\tonClick: (id: string) => void\n\tselected: boolean\n}\n\nexport const NodeListItem = ({\n\tnodeId,\n\tonHover,\n\tonClick,\n\tselected,\n}: CommunityRowProps) => {\n\tconst handleEnter = useCallback(() => onHover(nodeId), [nodeId, onHover])\n\tconst handleLeave = useCallback(() => onHover(), [onHover])\n\n\tconst handleClick = useCallback(() => onClick(nodeId), [onClick, nodeId])\n\treturn (\n\t\t<Tr\n\t\t\tonClick={handleClick}\n\t\t\tonMouseEnter={handleEnter}\n\t\t\tonMouseLeave={handleLeave}\n\t\t\tselected={selected}\n\t\t\tkey={`node-row-${nodeId}`}\n\t\t>\n\t\t\t<td>{nodeId}</td>\n\t\t</Tr>\n\t)\n}\n\nconst Tr = styled.tr<TableRowStyles>`\n\tdisplay: table;\n\twidth: 100%;\n\tcursor: pointer;\n\tcolor: ${({ theme }) => theme.text().fill().hex()};\n\tbackground-color: ${({ selected, theme }: any) =>\n\t\tselected\n\t\t\t? `${theme\n\t\t\t\t\t.rect({ selectionState: SelectionState.Selected })\n\t\t\t\t\t.fill()\n\t\t\t\t\t.hex()}`\n\t\t\t: 'inherit'};\n\t&&:hover {\n\t\tbackground-color: ${({ theme }) =>\n\t\t\t`${theme\n\t\t\t\t.rect({ selectionState: SelectionState.Hovered })\n\t\t\t\t.fill()\n\t\t\t\t.hex()} !important`};\n\t\tuser-select: none;\n\t}\n`\n","/**\n * {@docCategory MessageBar}\n */\nexport var MessageBarType;\n(function (MessageBarType) {\n    /** Info styled MessageBar */\n    MessageBarType[MessageBarType[\"info\"] = 0] = \"info\";\n    /** Error styled MessageBar */\n    MessageBarType[MessageBarType[\"error\"] = 1] = \"error\";\n    /** Blocked styled MessageBar */\n    MessageBarType[MessageBarType[\"blocked\"] = 2] = \"blocked\";\n    /** SevereWarning styled MessageBar */\n    MessageBarType[MessageBarType[\"severeWarning\"] = 3] = \"severeWarning\";\n    /** Success styled MessageBar */\n    MessageBarType[MessageBarType[\"success\"] = 4] = \"success\";\n    /** Warning styled MessageBar */\n    MessageBarType[MessageBarType[\"warning\"] = 5] = \"warning\";\n})(MessageBarType || (MessageBarType = {}));\n//# sourceMappingURL=MessageBar.types.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { MessageBar, MessageBarType, Text } from '@fluentui/react'\nimport { useMemo, useState } from 'react'\nimport styled from 'styled-components'\n\nexport interface ItemHeaderProps {\n\tnumberOfResults: number\n\tsearchText?: string\n\terrorMessage?: string\n}\n\nexport const SearchResultsHeader: React.FC<ItemHeaderProps> = ({\n\tnumberOfResults,\n\tsearchText,\n\terrorMessage,\n}: ItemHeaderProps) => {\n\tconst [infoMsgVisible, setInfoMsgVisible] = useState<boolean>(true)\n\tconst msg = useMemo(() => {\n\t\tsetInfoMsgVisible(true)\n\t\tif (errorMessage) {\n\t\t\treturn (\n\t\t\t\t<MessageBar messageBarType={MessageBarType.error} className={'error'}>\n\t\t\t\t\t<Text variant={'tiny'}>{errorMessage}</Text>\n\t\t\t\t</MessageBar>\n\t\t\t)\n\t\t} else if (searchText && numberOfResults > 0) {\n\t\t\tconst closeInfo = () => setInfoMsgVisible(false)\n\t\t\treturn (\n\t\t\t\t<MessageBar\n\t\t\t\t\tmessageBarType={MessageBarType.success}\n\t\t\t\t\tonDismiss={closeInfo}\n\t\t\t\t\tdismissButtonAriaLabel={'Close'}\n\t\t\t\t\tclassName={'success'}\n\t\t\t\t>\n\t\t\t\t\t<Text variant={'tiny'}>{searchText}</Text>\n\t\t\t\t</MessageBar>\n\t\t\t)\n\t\t}\n\t\treturn null\n\t}, [errorMessage, searchText, numberOfResults])\n\n\treturn (\n\t\t<div>\n\t\t\t<MsgContainer show={infoMsgVisible}>{msg}</MsgContainer>\n\t\t</div>\n\t)\n}\n\ninterface MsgContainerStyles {\n\tshow?: boolean\n}\n\nconst MsgContainer = styled.div<MsgContainerStyles>`\n\tvisibility: ${({ show }) => `${show ? 'visible' : 'hidden'};`};\n\theight: ${({ show }) => `${show ? 'auto' : '10px'};`};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Pivot, PivotItem } from '@fluentui/react'\nimport type {\n\tCommunityCollection,\n\tNodeCollection,\n} from '@graph-drilldown/arquero'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { useSortHandling } from '~/hooks/communities'\nimport { useSelection } from '~/hooks/useSelection'\n\nimport { useColumns } from '../../CommunityList/CommunityList.hooks'\nimport type { CommunityRowStyles } from '../../CommunityList/CommunityList.types'\nimport { CommunityRow } from '../../CommunityList/CommunityRow'\nimport { NodeListItem } from '../NodeListItem'\nimport { useSearchResultsText } from './CollapsibleSearchPanel.hooks'\nimport { SearchResultsHeader } from './SearchResultsHeader'\n\nconst ItemStyles = {\n\ttableElements: { text: { width: '90%' }, circle: { width: '10%' } },\n} as CommunityRowStyles\n\nexport interface SearchResultsProps {\n\tnodes: NodeCollection\n\tcommunities: CommunityCollection\n\terrorMessage?: string\n}\n\nexport const SearchResults: React.FC<SearchResultsProps> = ({\n\tnodes,\n\tcommunities,\n\terrorMessage,\n}: SearchResultsProps) => {\n\tconst {\n\t\tselectedNode,\n\t\tonSelectNode,\n\t\tselectedCommunity,\n\t\tonSelectCommunity,\n\t\tonHoverNode,\n\t\thoveredCommunity,\n\t\tonHoverCommunity,\n\t\tonResetSelection,\n\t} = useSelection()\n\n\tconst { sorted } = useSortHandling(communities)\n\n\tconst handleCommunityHover = useCallback(\n\t\t(community) => onHoverCommunity(community?.id),\n\t\t[onHoverCommunity],\n\t)\n\n\tconst handleNodeClick = useCallback(\n\t\t(nodeid: string) => {\n\t\t\tif (selectedNode?.id === nodeid) {\n\t\t\t\tonResetSelection()\n\t\t\t} else {\n\t\t\t\tif (nodes) {\n\t\t\t\t\tconst found = nodes.findById(nodeid)\n\t\t\t\t\tif (found) {\n\t\t\t\t\t\tconst commId = found['community.id']\n\t\t\t\t\t\tif (commId) {\n\t\t\t\t\t\t\tonSelectCommunity(commId)\n\t\t\t\t\t\t}\n\t\t\t\t\t\tonSelectNode(found)\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[nodes, onSelectNode, onSelectCommunity, onResetSelection, selectedNode],\n\t)\n\tconst handleCommunityClick = useCallback(\n\t\t(community) => {\n\t\t\tonResetSelection()\n\t\t\tif (community && community.id !== selectedCommunity) {\n\t\t\t\tonSelectCommunity(community.id)\n\t\t\t}\n\t\t},\n\t\t[onResetSelection, onSelectCommunity, selectedCommunity],\n\t)\n\n\tconst columns = useColumns(\n\t\tcommunities,\n\t\t0,\n\t\t0,\n\t\t(col) => col.field === 'community.id',\n\t)\n\n\tconst searchText = useSearchResultsText(communities, nodes)\n\n\treturn (\n\t\t<>\n\t\t\t<SearchResultsHeader\n\t\t\t\tnumberOfResults={nodes ? nodes.size : 0}\n\t\t\t\tsearchText={searchText}\n\t\t\t\terrorMessage={errorMessage}\n\t\t\t/>\n\t\t\t<Container>\n\t\t\t\t<Pivot aria-label={'Community or node selection'}>\n\t\t\t\t\t{communities && communities.size > 0 ? (\n\t\t\t\t\t\t<PivotItem\n\t\t\t\t\t\t\theaderText='Communities'\n\t\t\t\t\t\t\theaderButtonProps={{\n\t\t\t\t\t\t\t\t'data-order': 1,\n\t\t\t\t\t\t\t\t'data-title': 'community matches',\n\t\t\t\t\t\t\t\t'aria-label': 'community.id',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ListContainer>\n\t\t\t\t\t\t\t\t<Table tabIndex={0}>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{sorted && columns.length > 0\n\t\t\t\t\t\t\t\t\t\t\t? sorted.map((comm) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<CommunityRow\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcommunity={comm}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonHover={handleCommunityHover}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={handleCommunityClick}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\thovered={comm.id === hoveredCommunity}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tcolumns={columns}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tstyles={ItemStyles}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselected={selectedCommunity === comm.id}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`community-row-${comm.id}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t  }, true)\n\t\t\t\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</ListContainer>\n\t\t\t\t\t\t</PivotItem>\n\t\t\t\t\t) : null}\n\n\t\t\t\t\t{nodes && nodes.size > 0 ? (\n\t\t\t\t\t\t<PivotItem\n\t\t\t\t\t\t\theaderText='Nodes'\n\t\t\t\t\t\t\theaderButtonProps={{\n\t\t\t\t\t\t\t\t'data-order': 2,\n\t\t\t\t\t\t\t\t'data-title': 'node matches',\n\t\t\t\t\t\t\t\t'aria-label': 'node.id',\n\t\t\t\t\t\t\t}}\n\t\t\t\t\t\t>\n\t\t\t\t\t\t\t<ListContainer>\n\t\t\t\t\t\t\t\t<Table tabIndex={0}>\n\t\t\t\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t\t\t\t{nodes\n\t\t\t\t\t\t\t\t\t\t\t? nodes.map((node) => {\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst nodeid = node.get('node.id')\n\t\t\t\t\t\t\t\t\t\t\t\t\tconst selected = nodeid === selectedNode?.id\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn (\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t<NodeListItem\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tnodeId={nodeid}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonHover={onHoverNode}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tonClick={handleNodeClick}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tselected={selected}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tkey={`node-row-${nodeid}`}\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t\t\t\t\t\t)\n\t\t\t\t\t\t\t\t\t\t\t  }, true)\n\t\t\t\t\t\t\t\t\t\t\t: null}\n\t\t\t\t\t\t\t\t\t</tbody>\n\t\t\t\t\t\t\t\t</Table>\n\t\t\t\t\t\t\t</ListContainer>\n\t\t\t\t\t\t</PivotItem>\n\t\t\t\t\t) : null}\n\t\t\t\t</Pivot>\n\t\t\t</Container>\n\t\t</>\n\t)\n}\n\nconst Container = styled.div`\n\tdisplay: block;\n`\n\nconst ListContainer = styled.div`\n\toverflow: auto;\n\tmargin-top: 5px;\n\tcursor: pointer;\n\tmax-height: 400px;\n`\nconst Table = styled.table`\n\twidth: 100%;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { CollapsiblePanel } from '@essex/themed-components'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { useSelection } from '~/hooks/useSelection'\nimport { useBigTable, useCommunitiesTable } from '~/state'\n\nimport {\n\tuseInteraction,\n\tuseSearch,\n\tuseSearchableTable,\n} from './CollapsibleSearchPanel.hooks'\nimport { SearchPanelHeader } from './SearchPanelHeader'\nimport { SearchResults } from './SearchResults'\n\nexport const CollapsibleSearchPanel: React.FC = () => {\n\tconst bigTable = useBigTable()\n\tconst searchTable = useSearchableTable(bigTable)\n\tconst communities = useCommunitiesTable()\n\n\tconst {\n\t\tisExpanded,\n\t\terrorMessage,\n\t\tonFocusChange,\n\t\tonPanelClick,\n\t\tonReset,\n\t\tonError,\n\t\tdoSearchExpand,\n\t} = useInteraction()\n\n\tconst { onResetSelection } = useSelection()\n\n\tconst onClear = useCallback(() => {\n\t\tonResetSelection()\n\t\tonReset()\n\t}, [onResetSelection, onReset])\n\n\tconst { canSearch, isSearching, nodeResults, communityResults, doSearch } =\n\t\tuseSearch(searchTable, communities, doSearchExpand, onError, onClear)\n\n\tconst onRenderSearchHeader = useCallback(\n\t\t() => (\n\t\t\t<SearchPanelHeader\n\t\t\t\tdisabled={!canSearch}\n\t\t\t\tonSearch={doSearch}\n\t\t\t\tonClear={onClear}\n\t\t\t\tonFocusChange={onFocusChange}\n\t\t\t\tisSearching={isSearching}\n\t\t\t/>\n\t\t),\n\t\t[canSearch, onClear, doSearch, onFocusChange, isSearching],\n\t)\n\n\treturn (\n\t\t<CollapsiblePanel\n\t\t\tonRenderHeader={onRenderSearchHeader}\n\t\t\tdefaultExpanded={false}\n\t\t\tonHeaderClick={onPanelClick}\n\t\t\texpandedState={isExpanded}\n\t\t>\n\t\t\t<Content>\n\t\t\t\t{communityResults && nodeResults && (\n\t\t\t\t\t<SearchResults\n\t\t\t\t\t\tnodes={nodeResults}\n\t\t\t\t\t\tcommunities={communityResults}\n\t\t\t\t\t\terrorMessage={errorMessage}\n\t\t\t\t\t/>\n\t\t\t\t)}\n\t\t\t</Content>\n\t\t</CollapsiblePanel>\n\t)\n}\n\nconst Content = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DefaultButton } from '@fluentui/react'\nimport styled from 'styled-components'\n\nimport { useFileManagement } from '~/hooks/files'\n\nimport { ColumnEditor } from '../ColumnEditor'\n\nexport const ColumnEditorPanel = () => {\n\tconst { doClearAll, hasData } = useFileManagement()\n\n\treturn (\n\t\t<Content>\n\t\t\t<ColumnEditor />\n\t\t\t<Reset>\n\t\t\t\t{hasData ? (\n\t\t\t\t\t<DefaultButton text='Clear all' onClick={doClearAll} />\n\t\t\t\t) : null}\n\t\t\t</Reset>\n\t\t</Content>\n\t)\n}\n\nconst Content = styled.div`\n\tmargin: 20px;\n\tmargin-bottom: 10px;\n\ttext-align: center;\n\tjustify-content: center;\n`\n\nconst Reset = styled.div`\n\tmargin-top: 10px;\n`\n","import { getWindow } from './dom/getWindow';\nexport var isIE11 = function () {\n    var _a;\n    var win = getWindow();\n    if (!((_a = win === null || win === void 0 ? void 0 : win.navigator) === null || _a === void 0 ? void 0 : _a.userAgent)) {\n        return false;\n    }\n    return win.navigator.userAgent.indexOf('rv:11.0') > -1;\n};\n//# sourceMappingURL=ie11Detector.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { useEffect, useState } from 'react';\n/**\n * A hook for getting the dimensions of the given element. This hook also updates when the given element resizes.\n * NOTE: ResizeObserver must be defined in the target runtime. BYO polyfill if it is not provided by default\n * @param ref - A ref to the element to measure\n * @returns The dimensions for the element.\n */ export function useDimensions(ref) {\n    const [dimensions, setDimensions] = useState();\n    useEffect(()=>{\n        if (ref?.current) {\n            const rect = ref.current.getBoundingClientRect();\n            let dims = {\n                width: Math.floor(rect.width),\n                height: Math.floor(rect.height)\n            };\n            setDimensions(dims);\n            const observer = new ResizeObserver((entries)=>{\n                const entry = entries[0];\n                if (entry) {\n                    const newDims = {\n                        width: Math.floor(entry.contentRect.width),\n                        height: Math.floor(entry.contentRect.height)\n                    };\n                    if (newDims.width !== dims.width || newDims.height !== dims.height) {\n                        dims = newDims;\n                        setDimensions(newDims);\n                    }\n                }\n            });\n            observer.observe(ref.current);\n            return ()=>{\n                observer.disconnect();\n            };\n        }\n    }, [\n        ref\n    ]);\n    return dimensions;\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { chooseScale } from '@thematic/core'\nimport { rect, svg, text } from '@thematic/d3'\nimport { useThematic } from '@thematic/react'\nimport { scaleLinear } from 'd3-scale'\nimport { select } from 'd3-selection'\nimport { memo, useLayoutEffect, useMemo, useRef, useState } from 'react'\nimport styled from 'styled-components'\n\nexport interface LegendAxisProps {\n\tdomain: [number, number]\n\tbrushedDomain?: [number, number]\n\t/**\n\t * Width of the chart in pixels\n\t * Note that there is no validation that the number of bars at specified width will fit\n\t */\n\twidth: number\n\t/**\n\t * Height of the chart in pixels\n\t */\n\theight: number\n\t/**\n\t * Name of the thematic scale to use.\n\t * TODO: this should also map correctly with scaleLog\n\t */\n\tscale?: string\n}\n\nexport const LegendAxis: React.FC<LegendAxisProps> = memo(function LegendAxis({\n\tdomain,\n\tbrushedDomain,\n\twidth,\n\theight,\n\tscale,\n}) {\n\tconst xLinear = useMemo(\n\t\t() =>\n\t\t\tscaleLinear()\n\t\t\t\t.domain(domain)\n\t\t\t\t.range([1, width - 1])\n\t\t\t\t.clamp(true),\n\t\t[domain, width],\n\t)\n\n\tconst theme = useThematic()\n\tconst ref = useRef(null)\n\n\tconst [axisGroup, setAxisGroup] = useState<any>()\n\n\tconst displayedDomain = useMemo(\n\t\t() => brushedDomain || domain,\n\t\t[domain, brushedDomain],\n\t)\n\tconst scaleRange = useMemo(\n\t\t() => [\n\t\t\tMath.floor(xLinear(displayedDomain[0]) || 0),\n\t\t\tMath.floor(xLinear(displayedDomain[1]) || 1),\n\t\t],\n\t\t[displayedDomain, xLinear],\n\t)\n\n\tuseLayoutEffect(() => {\n\t\t// TODO: stage this so it doesn't reset, but rather updates\n\t\tselect(ref.current).selectAll('svg').remove()\n\t\tconst plot = select(ref.current)\n\t\t\t.append('svg')\n\t\t\t.attr('class', 'legend-axis-chart')\n\t\t\t.attr('width', width)\n\t\t\t.attr('height', height)\n\t\t\t.call(svg as any, theme.chart())\n\t\t\t.append('g')\n\t\t\t.attr('class', 'legend-axis-plotarea')\n\t\tplot\n\t\t\t.append('rect')\n\t\t\t.attr('width', width)\n\t\t\t.attr('height', height)\n\t\t\t.call(rect as any, theme.plotArea())\n\t\tconst ag = plot.append('g').attr('class', 'legend-axis-group')\n\t\tsetAxisGroup(ag)\n\t}, [theme, width, height])\n\n\tuseLayoutEffect(() => {\n\t\tif (axisGroup && scale) {\n\t\t\taxisGroup.selectAll('line').remove()\n\t\t\tconst scaleWidth = scaleRange[1] - scaleRange[0]\n\t\t\tconst scaleInstance = chooseScale(theme, scale, scaleWidth)\n\t\t\t// TODO: this could probably be fixed to 100 values and scaled\n\t\t\t// with a scaleLinear + computed line width\n\t\t\tconst data = new Array(scaleWidth).fill(1).map((a, i) => i)\n\t\t\taxisGroup\n\t\t\t\t.selectAll('line')\n\t\t\t\t.data(data)\n\t\t\t\t.enter()\n\t\t\t\t.append('line')\n\t\t\t\t.attr('stroke', (d: any) => scaleInstance(d).hex())\n\t\t\t\t.attr('stroke-width', 2)\n\t\t\t\t.attr('x1', (d: any) => d + scaleRange[0])\n\t\t\t\t.attr('x2', (d: any) => d + scaleRange[0])\n\t\t\t\t.attr('y1', 0)\n\t\t\t\t.attr('y2', height)\n\t\t}\n\t}, [theme, axisGroup, scale, scaleRange, height])\n\n\tuseLayoutEffect(() => {\n\t\tif (axisGroup) {\n\t\t\taxisGroup.selectAll('text').remove()\n\t\t\taxisGroup\n\t\t\t\t.append('text')\n\t\t\t\t.text(displayedDomain[0])\n\t\t\t\t.call(text as any, theme.text())\n\t\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t\t.attr('x', scaleRange[0] + 1)\n\t\t\t\t.attr('y', height / 2 + 1)\n\t\t\t\t.attr('font-size', height - 2)\n\t\t\taxisGroup\n\t\t\t\t.append('text')\n\t\t\t\t.text(displayedDomain[1])\n\t\t\t\t.call(text as any, theme.text())\n\t\t\t\t.attr('dominant-baseline', 'middle')\n\t\t\t\t.attr('text-anchor', 'end')\n\t\t\t\t.attr('x', scaleRange[1] - 1)\n\t\t\t\t.attr('y', height / 2 + 1)\n\t\t\t\t.attr('font-size', height - 2)\n\t\t}\n\t}, [theme, axisGroup, scaleRange, displayedDomain, height])\n\n\treturn <Container ref={ref} width={width} height={height} />\n})\n\nconst Container = styled.div<{ width: number; height: number }>`\n\twidth: ${({ width }) => width}px;\n\theight: ${({ height }) => height}px;\n`\n","var noop = {value: () => {}};\n\nfunction dispatch() {\n  for (var i = 0, n = arguments.length, _ = {}, t; i < n; ++i) {\n    if (!(t = arguments[i] + \"\") || (t in _) || /[\\s.]/.test(t)) throw new Error(\"illegal type: \" + t);\n    _[t] = [];\n  }\n  return new Dispatch(_);\n}\n\nfunction Dispatch(_) {\n  this._ = _;\n}\n\nfunction parseTypenames(typenames, types) {\n  return typenames.trim().split(/^|\\s+/).map(function(t) {\n    var name = \"\", i = t.indexOf(\".\");\n    if (i >= 0) name = t.slice(i + 1), t = t.slice(0, i);\n    if (t && !types.hasOwnProperty(t)) throw new Error(\"unknown type: \" + t);\n    return {type: t, name: name};\n  });\n}\n\nDispatch.prototype = dispatch.prototype = {\n  constructor: Dispatch,\n  on: function(typename, callback) {\n    var _ = this._,\n        T = parseTypenames(typename + \"\", _),\n        t,\n        i = -1,\n        n = T.length;\n\n    // If no callback was specified, return the callback of the given type and name.\n    if (arguments.length < 2) {\n      while (++i < n) if ((t = (typename = T[i]).type) && (t = get(_[t], typename.name))) return t;\n      return;\n    }\n\n    // If a type was specified, set the callback for the given type and name.\n    // Otherwise, if a null callback was specified, remove callbacks of the given name.\n    if (callback != null && typeof callback !== \"function\") throw new Error(\"invalid callback: \" + callback);\n    while (++i < n) {\n      if (t = (typename = T[i]).type) _[t] = set(_[t], typename.name, callback);\n      else if (callback == null) for (t in _) _[t] = set(_[t], typename.name, null);\n    }\n\n    return this;\n  },\n  copy: function() {\n    var copy = {}, _ = this._;\n    for (var t in _) copy[t] = _[t].slice();\n    return new Dispatch(copy);\n  },\n  call: function(type, that) {\n    if ((n = arguments.length - 2) > 0) for (var args = new Array(n), i = 0, n, t; i < n; ++i) args[i] = arguments[i + 2];\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  },\n  apply: function(type, that, args) {\n    if (!this._.hasOwnProperty(type)) throw new Error(\"unknown type: \" + type);\n    for (var t = this._[type], i = 0, n = t.length; i < n; ++i) t[i].value.apply(that, args);\n  }\n};\n\nfunction get(type, name) {\n  for (var i = 0, n = type.length, c; i < n; ++i) {\n    if ((c = type[i]).name === name) {\n      return c.value;\n    }\n  }\n}\n\nfunction set(type, name, callback) {\n  for (var i = 0, n = type.length; i < n; ++i) {\n    if (type[i].name === name) {\n      type[i] = noop, type = type.slice(0, i).concat(type.slice(i + 1));\n      break;\n    }\n  }\n  if (callback != null) type.push({name: name, value: callback});\n  return type;\n}\n\nexport default dispatch;\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { SelectionState } from '@thematic/core'\nimport { line, rect, svg } from '@thematic/d3'\nimport { useThematic } from '@thematic/react'\nimport { brushX } from 'd3-brush'\nimport { scaleLinear } from 'd3-scale'\nimport { select } from 'd3-selection'\nimport {\n\tmemo,\n\tuseCallback,\n\tuseLayoutEffect,\n\tuseMemo,\n\tuseRef,\n\tuseState,\n} from 'react'\nimport styled from 'styled-components'\n\nexport interface SparkbarProps {\n\t/**\n\t * Array of data to plot as bars\n\t */\n\tdata: unknown[]\n\n\tdomain: [number, number]\n\tbrushedDomain?: [number, number]\n\t/**\n\t * Width of the chart in pixels\n\t * Note that there is no validation that the number of bars at specified width will fit\n\t */\n\twidth: number\n\t/**\n\t * Height of the chart in pixels\n\t */\n\theight: number\n\t/**\n\t * Width of each bar on the chart\n\t */\n\tbarWidth?: number\n\t/**\n\t * Gap between bars on the chart\n\t */\n\tbarGap?: number\n\t/**\n\t * Accessor for the x-bound dimension of the datum\n\t */\n\tx: (d: unknown, i: number) => number\n\t/**\n\t * Accessor for the y-bound dimension of the datum (i.e., bar height)\n\t */\n\ty: (d: unknown, i: number) => number\n\t/**\n\t * Accessor function that accepts a datum and returns whether it is a no data placeholder\n\t */\n\tnodata?: (d: unknown) => boolean\n\t/**\n\t * Selected datum to highlight on the chart\n\t */\n\tselected?: (d: unknown) => boolean\n\t/**\n\t * Click handler for datum bars\n\t */\n\tonClick?: (d: unknown) => void\n\t/**\n\t * Special indicator for a data point to highlight above and beyond normal selection.\n\t */\n\tmarked?: (d: unknown) => boolean\n\n\tonBrushEnd?: (domain: [number, number] | null) => void\n}\n\nexport const Sparkbar: React.FC<SparkbarProps> = memo(function Sparkbar({\n\tdata,\n\tdomain,\n\tbrushedDomain,\n\twidth,\n\theight,\n\tbarWidth = 8,\n\tbarGap = 1,\n\tnodata,\n\tselected,\n\tonClick,\n\tx,\n\ty,\n\tmarked,\n\tonBrushEnd,\n}) {\n\tconst xLinear = useMemo(\n\t\t() =>\n\t\t\tscaleLinear()\n\t\t\t\t.domain(domain)\n\t\t\t\t.range([barWidth / 2, width - barWidth / 2])\n\t\t\t\t.clamp(true),\n\t\t[domain, width, barWidth],\n\t)\n\n\tconst xScale = useMemo(\n\t\t() => (d: any, i: number) => xLinear(x(d, i)),\n\t\t[x, xLinear],\n\t)\n\n\tconst hScale = useMemo(() => {\n\t\tconst ext = getExtent(data, y)\n\t\tconst h = scaleLinear().domain(ext).range([0, height])\n\t\treturn (d: any, i: number) => h(d.length)\n\t}, [data, y, height])\n\n\tconst theme = useThematic()\n\tconst ref = useRef(null)\n\tconst handleClick = useCallback((d) => onClick?.(d), [onClick])\n\tconst nodataFn = useCallback(\n\t\t(d: unknown) => {\n\t\t\tif (nodata) {\n\t\t\t\treturn nodata(d)\n\t\t\t}\n\t\t\treturn false\n\t\t},\n\t\t[nodata],\n\t)\n\tconst [hovered, setHovered] = useState<any>(null)\n\tconst handleHover = useCallback((d) => setHovered(d), [])\n\tconst [barGroup, setBarGroup] = useState<any>()\n\tconst [brushSelection, setBrushSelection] = useState<any>()\n\n\tconst handleBrushEnd = useCallback(\n\t\t(event) => {\n\t\t\tif (onBrushEnd) {\n\t\t\t\tif (event?.sourceEvent) {\n\t\t\t\t\tconst { selection } = event\n\t\t\t\t\tconst newdomain: [number, number] = [\n\t\t\t\t\t\txLinear.invert(selection[0]),\n\t\t\t\t\t\txLinear.invert(selection[1]),\n\t\t\t\t\t]\n\t\t\t\t\tonBrushEnd(newdomain)\n\t\t\t\t}\n\t\t\t}\n\t\t},\n\t\t[onBrushEnd, xLinear],\n\t)\n\tconst brush = useMemo(\n\t\t() => brushX().on('end', handleBrushEnd),\n\t\t[handleBrushEnd],\n\t)\n\n\tuseLayoutEffect(() => {\n\t\t// TODO: stage this so it doesn't reset, but rather updates\n\t\tselect(ref.current).selectAll('svg').remove()\n\t\tconst plot = select(ref.current)\n\t\t\t.append('svg')\n\t\t\t.attr('class', 'sparkbar-chart')\n\t\t\t.attr('width', width)\n\t\t\t.attr('height', height)\n\t\t\t.call(svg as any, theme.chart())\n\t\t\t.append('g')\n\t\t\t.attr('class', 'sparkbar-plotarea')\n\t\tplot\n\t\t\t.append('rect')\n\t\t\t.attr('width', width)\n\t\t\t.attr('height', height)\n\t\t\t.call(rect as any, theme.plotArea())\n\t\tconst bg = plot.append('g').attr('class', 'sparkbar-bars')\n\t\tsetBarGroup(bg)\n\t\t// only actually append the brush interaction if there is an event to handle it\n\t\tif (onBrushEnd) {\n\t\t\tconst b = plot.append('g').attr('class', 'brush').call(brush)\n\t\t\tb.select('.selection').attr('stroke', 'none')\n\t\t\tsetBrushSelection(b)\n\t\t}\n\t}, [theme, data, width, height, brush, onBrushEnd])\n\n\tuseLayoutEffect(() => {\n\t\tif (data.length > 0) {\n\t\t\tconst yScale = (d: any, i: number) => height - (hScale(d, i) || 0)\n\t\t\tif (barGroup) {\n\t\t\t\tbarGroup.selectAll('*').remove()\n\t\t\t\tbarGroup\n\t\t\t\t\t.selectAll('.bar')\n\t\t\t\t\t.data(data)\n\t\t\t\t\t.enter()\n\t\t\t\t\t.append('line')\n\t\t\t\t\t.attr('class', 'bar')\n\t\t\t\t\t.attr('x1', xScale)\n\t\t\t\t\t.attr('x2', xScale)\n\t\t\t\t\t.attr('y1', yScale)\n\t\t\t\t\t.attr('y2', height)\n\t\t\t\t\t.call(line as any, theme.line())\n\t\t\t\t\t.attr('stroke-width', barWidth)\n\t\t\t}\n\t\t}\n\t}, [\n\t\ttheme,\n\t\tdata,\n\t\tbarGroup,\n\t\twidth,\n\t\theight,\n\t\tbarWidth,\n\t\tbarGap,\n\t\tnodataFn,\n\t\txScale,\n\t\thScale,\n\t])\n\n\tuseLayoutEffect(() => {\n\t\tif (barGroup) {\n\t\t\tbarGroup\n\t\t\t\t.selectAll('.bar')\n\t\t\t\t.on('mouseover', (d: any) => handleHover(d))\n\t\t\t\t.on('mouseout', () => handleHover(null))\n\t\t\t\t.on('click', handleClick)\n\t\t}\n\t}, [data, barGroup, handleClick, handleHover])\n\n\tuseLayoutEffect(() => {\n\t\tconst cursor = onClick ? 'pointer' : 'default'\n\t\tif (barGroup) {\n\t\t\tbarGroup.selectAll('.bar').style('cursor', cursor)\n\t\t}\n\t}, [data, barGroup, onClick])\n\n\t// generate a complimentary highlight\n\tconst highlight = useMemo(() => theme.scales().nominal(10)(1).hex(), [theme])\n\n\tuseLayoutEffect(() => {\n\t\tconst getSelectionState = (d: any) => {\n\t\t\tif (nodataFn(d)) {\n\t\t\t\treturn SelectionState.NoData\n\t\t\t}\n\t\t\tif (d === hovered) {\n\t\t\t\treturn SelectionState.Hovered\n\t\t\t}\n\t\t\tconst sel = selected ? selected(d) : false\n\t\t\tif (sel) {\n\t\t\t\treturn SelectionState.Selected\n\t\t\t}\n\t\t\treturn SelectionState.Normal\n\t\t}\n\t\tif (barGroup) {\n\t\t\tbarGroup.selectAll('.bar').attr('stroke', (d: any) => {\n\t\t\t\tconst selectionState = getSelectionState(d)\n\t\t\t\tconst mark = marked ? marked(d) : false\n\t\t\t\treturn mark\n\t\t\t\t\t? highlight\n\t\t\t\t\t: theme\n\t\t\t\t\t\t\t.line({\n\t\t\t\t\t\t\t\tselectionState,\n\t\t\t\t\t\t\t})\n\t\t\t\t\t\t\t.stroke()\n\t\t\t\t\t\t\t.hex()\n\t\t\t})\n\t\t}\n\t}, [theme, data, barGroup, highlight, nodataFn, hovered, selected, marked])\n\n\tuseLayoutEffect(() => {\n\t\tif (brushedDomain && brushSelection && brush) {\n\t\t\tif (brushedDomain[0] === domain[0] && brushedDomain[1] === domain[1]) {\n\t\t\t\t// Clear out brush when date range is maxed out.\n\t\t\t\tbrush.move(brushSelection, null)\n\t\t\t} else {\n\t\t\t\tconst [start, end] = brushedDomain\n\t\t\t\tbrush.move(brushSelection, [xLinear(start) || 0, xLinear(end) || 1])\n\t\t\t}\n\t\t}\n\t}, [brushedDomain, domain, xLinear, brush, brushSelection])\n\n\treturn <Container ref={ref} width={width} height={height} />\n})\n\nfunction getExtent(\n\tdata: any[],\n\taccessor: (d: unknown, i: number) => number,\n): [number, number] {\n\treturn data.reduce(\n\t\t(acc: any, cur, idx) => {\n\t\t\treturn [\n\t\t\t\tMath.min(accessor(cur, idx), acc[0]),\n\t\t\t\tMath.max(accessor(cur, idx), acc[1]),\n\t\t\t]\n\t\t},\n\t\t[Number.MAX_VALUE, Number.MIN_VALUE] as [number, number],\n\t)\n}\n\nconst Container = styled.div<{ width: number; height: number }>`\n\twidth: ${({ width }) => width}px;\n\theight: ${({ height }) => height}px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useDimensions } from '@essex/hooks'\nimport { Label, TextField } from '@fluentui/react'\nimport { format } from 'd3-format'\nimport { useCallback, useMemo, useRef } from 'react'\nimport styled from 'styled-components'\n\nimport { LegendAxis } from './LegendAxis.js'\nimport { Sparkbar } from './Sparkbar.js'\n\nexport interface DomainBrushProps {\n\tmin?: number\n\tmax?: number\n\tcurrentDomain?: [number, number]\n\tprecision?: number\n\tonChange?: (domain: [number, number]) => void\n\thistogram?: any[]\n\t/**\n\t * Indicates whether manual input text fields should be included,\n\t * or just the brush if false\n\t */\n\tshowTextInputs?: boolean\n}\n\nconst CHART_HEIGHT = 30\nconst AXIS_HEIGHT = 16\nconst EMPTY = []\n\nconst TEXT_STYLES = {\n\tfield: {\n\t\ttextAlign: 'center',\n\t},\n}\nexport const DomainBrush: React.FC<DomainBrushProps> = ({\n\tmin = 0,\n\tmax = 1,\n\tcurrentDomain,\n\tprecision = 2,\n\tonChange,\n\thistogram = EMPTY,\n\tshowTextInputs,\n}) => {\n\tconst ref = useRef(null)\n\n\tconst dimensions = useDimensions(ref)\n\tconst width = useMemo(() => dimensions?.width || 200, [dimensions])\n\n\tconst domain = useMemo(\n\t\t(): [number, number] => currentDomain || [min, max],\n\t\t[currentDomain, min, max],\n\t)\n\tconst handleMinChange = useCallback(\n\t\t(_, v: string | undefined) => {\n\t\t\tonChange?.([v ? Number.parseFloat(v) : domain[0], domain[1]])\n\t\t},\n\t\t[onChange, domain],\n\t)\n\tconst handleMaxChange = useCallback(\n\t\t(_, v: string | undefined) => {\n\t\t\tonChange?.([domain[0], v ? Number.parseFloat(v) : domain[1]])\n\t\t},\n\t\t[onChange, domain],\n\t)\n\n\tconst fmt = useMemo(() => format(`.${precision}f`), [precision])\n\n\tconst [flo, fhi] = useMemo(() => {\n\t\t// d3-format produces strings, but we just want to use it\n\t\t// for clean and consistent decimal precision numbers\n\t\treturn [parseFloat(fmt(domain[0])), parseFloat(fmt(domain[1]))]\n\t}, [domain, fmt])\n\n\tconst barWidth = width / 100 - 1\n\n\t// TOOD: it would be nice to use a synchronized internal brush state\n\t// to update current displayed bounds visually before setting the encoding\n\tconst handleBrushEnd = useCallback(\n\t\t(newdomain) => onChange?.(newdomain),\n\t\t[onChange],\n\t)\n\n\t// sparkbar uses lines, we therefore want the midpoint of bin\n\tconst x = useCallback((d: any, i: number) => (d.x1 - d.x0) / 2 + d.x0, [])\n\tconst y = useCallback((d: any, i: number) => d.length, [])\n\n\treturn (\n\t\t<Container ref={ref}>\n\t\t\t<Sparkbar\n\t\t\t\tdata={histogram}\n\t\t\t\tdomain={[min, max]}\n\t\t\t\tbrushedDomain={domain}\n\t\t\t\twidth={width}\n\t\t\t\theight={CHART_HEIGHT}\n\t\t\t\tbarWidth={barWidth}\n\t\t\t\tx={x}\n\t\t\t\ty={y}\n\t\t\t\tonBrushEnd={handleBrushEnd}\n\t\t\t/>\n\t\t\t<LegendAxis\n\t\t\t\tdomain={[min, max]}\n\t\t\t\tbrushedDomain={[flo, fhi]}\n\t\t\t\twidth={width}\n\t\t\t\theight={AXIS_HEIGHT}\n\t\t\t/>\n\t\t\t{showTextInputs ? (\n\t\t\t\t<TextContainer>\n\t\t\t\t\t<TextItem>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel='min'\n\t\t\t\t\t\t\tstyles={TEXT_STYLES}\n\t\t\t\t\t\t\tvalue={`${flo}`}\n\t\t\t\t\t\t\tonChange={handleMinChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Label>Min</Label>\n\t\t\t\t\t</TextItem>\n\t\t\t\t\t<TextItem>\n\t\t\t\t\t\t<TextField\n\t\t\t\t\t\t\tlabel='max'\n\t\t\t\t\t\t\tstyles={TEXT_STYLES}\n\t\t\t\t\t\t\tvalue={`${fhi}`}\n\t\t\t\t\t\t\tonChange={handleMaxChange}\n\t\t\t\t\t\t/>\n\t\t\t\t\t\t<Label>Max</Label>\n\t\t\t\t\t</TextItem>\n\t\t\t\t</TextContainer>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\nconst TextContainer = styled.div`\n\tmargin-top: 12px;\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\nconst TextItem = styled.div`\n\twidth: 80px;\n\ttext-align: center;\n`\n","import { __assign, __rest } from \"tslib\";\nimport * as React from 'react';\nimport { Image } from '../../../Image';\nimport { Icon } from '../../../Icon';\nimport { classNamesFunction, getNativeProps, inputProperties, css, composeRenderFunction, getPropsWithDefaults, } from '../../../Utilities';\nvar getClassNames = classNamesFunction();\nvar LARGE_IMAGE_SIZE = 71;\nvar DEFAULT_PROPS = {\n    // This ensures default imageSize value doesn't mutate. Mutation can cause style re-calcuation.\n    imageSize: { width: 32, height: 32 },\n};\nexport var ChoiceGroupOptionBase = function (propsWithoutDefaults) {\n    // Mix the `key` prop back in since custom render functions may be expecting it\n    // (React uses `key` internally rather than passing it through to the component)\n    var props = getPropsWithDefaults(__assign(__assign({}, DEFAULT_PROPS), { key: propsWithoutDefaults.itemKey }), propsWithoutDefaults);\n    var ariaLabel = props.ariaLabel, focused = props.focused, required = props.required, theme = props.theme, iconProps = props.iconProps, imageSrc = props.imageSrc, imageSize = props.imageSize, disabled = props.disabled, checked = props.checked, id = props.id, styles = props.styles, name = props.name, rest = __rest(props, [\"ariaLabel\", \"focused\", \"required\", \"theme\", \"iconProps\", \"imageSrc\", \"imageSize\", \"disabled\", \"checked\", \"id\", \"styles\", \"name\"]);\n    var classNames = getClassNames(styles, {\n        theme: theme,\n        hasIcon: !!iconProps,\n        hasImage: !!imageSrc,\n        checked: checked,\n        disabled: disabled,\n        imageIsLarge: !!imageSrc && (imageSize.width > LARGE_IMAGE_SIZE || imageSize.height > LARGE_IMAGE_SIZE),\n        imageSize: imageSize,\n        focused: focused,\n    });\n    var _a = getNativeProps(rest, inputProperties), className = _a.className, nativeProps = __rest(_a, [\"className\"]);\n    var defaultOnRenderLabel = function () {\n        return (React.createElement(\"span\", { id: props.labelId, className: \"ms-ChoiceFieldLabel\" }, props.text));\n    };\n    var defaultOnRenderField = function () {\n        var _a = props.imageAlt, imageAlt = _a === void 0 ? '' : _a, selectedImageSrc = props.selectedImageSrc;\n        var onRenderLabel = props.onRenderLabel\n            ? composeRenderFunction(props.onRenderLabel, defaultOnRenderLabel)\n            : defaultOnRenderLabel;\n        var label = onRenderLabel(__assign(__assign({}, props), { key: props.itemKey }));\n        return (React.createElement(\"label\", { htmlFor: id, className: classNames.field },\n            imageSrc && (React.createElement(\"div\", { className: classNames.innerField },\n                React.createElement(\"div\", { className: classNames.imageWrapper },\n                    React.createElement(Image, __assign({ src: imageSrc, alt: imageAlt }, imageSize))),\n                React.createElement(\"div\", { className: classNames.selectedImageWrapper },\n                    React.createElement(Image, __assign({ src: selectedImageSrc, alt: imageAlt }, imageSize))))),\n            iconProps && (React.createElement(\"div\", { className: classNames.innerField },\n                React.createElement(\"div\", { className: classNames.iconWrapper },\n                    React.createElement(Icon, __assign({}, iconProps))))),\n            imageSrc || iconProps ? React.createElement(\"div\", { className: classNames.labelWrapper }, label) : label));\n    };\n    var _b = props.onRenderField, onRenderField = _b === void 0 ? defaultOnRenderField : _b;\n    var onChange = function (evt) {\n        var _a;\n        (_a = props.onChange) === null || _a === void 0 ? void 0 : _a.call(props, evt, __assign(__assign({}, props), { key: props.itemKey }));\n    };\n    var onBlur = function (evt) {\n        var _a;\n        (_a = props.onBlur) === null || _a === void 0 ? void 0 : _a.call(props, evt);\n    };\n    var onFocus = function (evt) {\n        var _a;\n        (_a = props.onFocus) === null || _a === void 0 ? void 0 : _a.call(props, evt, __assign(__assign({}, props), { key: props.itemKey }));\n    };\n    return (React.createElement(\"div\", { className: classNames.root },\n        React.createElement(\"div\", { className: classNames.choiceFieldWrapper },\n            React.createElement(\"input\", __assign({ \"aria-label\": ariaLabel, id: id, className: css(classNames.input, className), type: \"radio\", name: name, disabled: disabled, checked: checked, required: required }, nativeProps, { onChange: onChange, onFocus: onFocus, onBlur: onBlur })),\n            onRenderField(__assign(__assign({}, props), { key: props.itemKey }), defaultOnRenderField))));\n};\nChoiceGroupOptionBase.displayName = 'ChoiceGroupOption';\n//# sourceMappingURL=ChoiceGroupOption.base.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { getNamedSchemeColor } from '@thematic/color'\nimport { useThematic } from '@thematic/react'\nimport { useCallback, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport type { ColorSelectorProps } from './ColorSelector.types.js'\n\nexport const ThematicPalettePicker: React.FC<ColorSelectorProps> = ({\n\tencoding,\n\tonChange,\n}) => {\n\tconst theme = useThematic()\n\tconst paths = useMemo(() => listThematicColors(), [])\n\n\tconst handleChipClick = useCallback(\n\t\t(path: string) => onChange({ thematicSchemePath: path }),\n\t\t[onChange],\n\t)\n\tconst chips = useMemo(() => {\n\t\treturn paths.map((path, index) => {\n\t\t\tconst color = getNamedSchemeColor(theme.scheme, path)\n\t\t\treturn (\n\t\t\t\t<Chip\n\t\t\t\t\ttitle={color.toString()}\n\t\t\t\t\tbackground={color.hex()}\n\t\t\t\t\tborder={\n\t\t\t\t\t\tpath === encoding.thematicSchemePath\n\t\t\t\t\t\t\t? `3px solid ${theme.application().accent().hex()}`\n\t\t\t\t\t\t\t: `1px solid ${theme.plotArea().stroke().hex()}`\n\t\t\t\t\t}\n\t\t\t\t\trole={'button'}\n\t\t\t\t\ttabIndex={index}\n\t\t\t\t\tkey={`thematic-palette-picker-chip-${path}`}\n\t\t\t\t\tonClick={() => handleChipClick(path)}\n\t\t\t\t\t// TODO: these key defaults should check for enter. same with ColumnEditor\n\t\t\t\t\tonKeyDown={() => handleChipClick(path)}\n\t\t\t\t/>\n\t\t\t)\n\t\t})\n\t}, [theme, paths, encoding, handleChipClick])\n\treturn (\n\t\t<Container>\n\t\t\t<Grid>{chips}</Grid>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tmargin-top: 8px;\n`\n\nconst Grid = styled.div`\n\tdisplay: flex;\n\tflex-wrap: wrap;\n\tjustify-content: center;\n`\n\nconst Chip = styled.div<{ background: string; border: string }>`\n\tmargin: 4px;\n\twidth: 20px;\n\theight: 20px;\n\tcursor: pointer;\n\tborder: ${({ border }) => border};\n\tbackground: ${({ background }) => background};\n`\n\n/**\n * List the theme color options,\n * compatible with the getNamedColor function.\n * Note that we don't really want all the options\n * on the scheme, just a selection of obvious ones.\n */\nexport function listThematicColors() {\n\tconst nominals = new Array(10).fill('nominal').map((a, i) => `${a}[${i}]`)\n\treturn [\n\t\t'faintAnnotation',\n\t\t'lowContrastAnnotation',\n\t\t'midContrastAnnotation',\n\t\t'highContrastAnnotation',\n\t\t...nominals,\n\t]\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { Pivot, PivotItem } from '@fluentui/react'\nimport { DataBinding } from '@graph-drilldown/types'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport type { ColorSelectorProps } from './ColorSelector.types.js'\nimport { FixedPicker } from './FixedPicker.js'\nimport { ScaledPicker } from './ScaledPicker.js'\nimport { ThematicPalettePicker } from './ThematicPalettePicker.js'\n\n/**\n * Represents a complex color selector for a dataset.\n * Provides the options for each FieldBinding enum value:\n * - Fixed: manually chosen hex color\n * - Palette: a thematic-bound named color (so it auto-updates with theme changes)\n * - Scale: field-bound to a thematic scale with domain, range, etc.\n */\nexport const ColorSelector: React.FC<ColorSelectorProps> = (props) => {\n\tconst { encoding, onChange } = props\n\tconst handlePivotLinkClick = useCallback(\n\t\t(item) => {\n\t\t\tonChange({\n\t\t\t\tbinding: item.props.itemKey,\n\t\t\t})\n\t\t},\n\t\t[onChange],\n\t)\n\treturn (\n\t\t<Container>\n\t\t\t<Pivot\n\t\t\t\tonLinkClick={handlePivotLinkClick}\n\t\t\t\tstyles={{\n\t\t\t\t\troot: {\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tselectedKey={encoding.binding}\n\t\t\t>\n\t\t\t\t<PivotItem headerText={'Scaled'} itemKey={DataBinding.Scaled}>\n\t\t\t\t\t<ScaledPicker {...props} />\n\t\t\t\t</PivotItem>\n\t\t\t\t<PivotItem headerText={'Fixed'} itemKey={DataBinding.Fixed}>\n\t\t\t\t\t<FixedPicker {...props} />\n\t\t\t\t</PivotItem>\n\t\t\t\t<PivotItem headerText={'Palette'} itemKey={DataBinding.Palette}>\n\t\t\t\t\t<ThematicPalettePicker {...props} />\n\t\t\t\t</PivotItem>\n\t\t\t</Pivot>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\n","import * as React from 'react';\nimport { useConst } from './useConst';\n/**\n *  Returns a wrapper function for `setTimeout` which automatically handles disposal.\n */\nexport var useSetTimeout = function () {\n    var timeoutIds = useConst({});\n    // Cleanup function.\n    React.useEffect(function () { return function () {\n        for (var _i = 0, _a = Object.keys(timeoutIds); _i < _a.length; _i++) {\n            var id = _a[_i];\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            clearTimeout(id);\n        }\n    }; }, \n    // useConst ensures this will never change, but react-hooks/exhaustive-deps doesn't know that\n    [timeoutIds]);\n    // Return wrapper which will auto cleanup.\n    return useConst({\n        setTimeout: function (func, duration) {\n            var id = setTimeout(func, duration);\n            timeoutIds[id] = 1;\n            return id;\n        },\n        clearTimeout: function (id) {\n            delete timeoutIds[id];\n            clearTimeout(id);\n        },\n    });\n};\n//# sourceMappingURL=useSetTimeout.js.map","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Slider } from '@fluentui/react'\nimport { useDebounceFn } from 'ahooks'\nimport { useState } from 'react'\nimport styled from 'styled-components'\n\nimport type { NumericSelectorProps } from './NumericSelector.types.js'\n\nexport const FixedPicker: React.FC<NumericSelectorProps> = ({\n\tencoding,\n\tonChange,\n\tlabel,\n\tmin,\n\tmax,\n\tstep,\n}) => {\n\tconst [rangeValue, setRangeValue] = useState(encoding.value)\n\n\tconst useDebounce = useDebounceFn(\n\t\t(value) => {\n\t\t\tonChange({ value })\n\t\t},\n\t\t{\n\t\t\twait: 300,\n\t\t},\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<Controls>\n\t\t\t\t<Slider\n\t\t\t\t\tlabel={label}\n\t\t\t\t\tmin={min}\n\t\t\t\t\tmax={max}\n\t\t\t\t\tstep={step}\n\t\t\t\t\tvalue={rangeValue}\n\t\t\t\t\tonChange={(value: number) => {\n\t\t\t\t\t\tuseDebounce.run(value)\n\t\t\t\t\t\tsetRangeValue(value)\n\t\t\t\t\t}}\n\t\t\t\t/>\n\t\t\t</Controls>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tmargin-top: 8px;\n`\n\nconst Controls = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Pivot, PivotItem } from '@fluentui/react'\nimport { DataBinding } from '@graph-drilldown/types'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { FixedPicker } from './FixedPicker.js'\nimport type { NumericSelectorProps } from './NumericSelector.types.js'\nimport { ScaledPicker } from './ScaledPicker.js'\n\n/**\n * Represents a complex color selector for a dataset.\n * Provides the options for each FieldBinding enum value:\n * - Fixed: manually chosen hex color\n * - Palette: a thematic-bound named color (so it auto-updates with theme changes)\n * - Scale: field-bound to a thematic scale with domain, range, etc.\n */\nexport const NumericSelector: React.FC<NumericSelectorProps> = (props) => {\n\tconst { encoding, onChange } = props\n\tconst handlePivotLinkClick = useCallback(\n\t\t(item) => {\n\t\t\tonChange({\n\t\t\t\tbinding: item.props.itemKey,\n\t\t\t})\n\t\t},\n\t\t[onChange],\n\t)\n\treturn (\n\t\t<Container>\n\t\t\t<Pivot\n\t\t\t\tonLinkClick={handlePivotLinkClick}\n\t\t\t\tstyles={{\n\t\t\t\t\troot: {\n\t\t\t\t\t\ttextAlign: 'center',\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t\tselectedKey={encoding.binding}\n\t\t\t>\n\t\t\t\t<PivotItem headerText={'Scaled'} itemKey={DataBinding.Scaled}>\n\t\t\t\t\t<ScaledPicker {...props} />\n\t\t\t\t</PivotItem>\n\t\t\t\t<PivotItem headerText={'Fixed'} itemKey={DataBinding.Fixed}>\n\t\t\t\t\t<FixedPicker {...props} />\n\t\t\t\t</PivotItem>\n\t\t\t</Pivot>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { NumericSelector } from '@graph-drilldown/components'\nimport styled from 'styled-components'\n\nimport {\n\tuseEdgeSizeEncoding,\n\tuseEdgeTable,\n\tuseUpdateEdgeSizeEncoding,\n} from '~/state'\n\nexport const EdgeSizeControls = () => {\n\tconst encoding = useEdgeSizeEncoding()\n\tconst updateEncoding = useUpdateEdgeSizeEncoding()\n\tconst table = useEdgeTable()\n\treturn (\n\t\t<Container>\n\t\t\t<NumericSelector\n\t\t\t\tlabel='edge size'\n\t\t\t\ttable={table}\n\t\t\t\tencoding={encoding}\n\t\t\t\tonChange={updateEncoding}\n\t\t\t\tmin={0.5}\n\t\t\t\tmax={50}\n\t\t\t\tstep={0.5}\n\t\t\t/>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DefaultButton } from '@fluentui/react'\nimport { memo } from 'react'\n\nimport { AUTOLAYOUT_URL } from '~/constants'\n\nexport interface UmapLayoutProps {\n\tonClick: () => void\n}\n\n/**\n * Config for UMAP autolayout. Right now it just uses default params,\n * but only exposes the button if a service URL has been configured.\n */\nexport const UmapLayout: React.FC<UmapLayoutProps> = memo(function UmapLayout({\n\tonClick,\n}) {\n\treturn (\n\t\t<>\n\t\t\t{AUTOLAYOUT_URL ? (\n\t\t\t\t<DefaultButton text={'UMAP'} onClick={onClick} />\n\t\t\t) : null}\n\t\t</>\n\t)\n})\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { DefaultButton, Spinner, Toggle } from '@fluentui/react'\nimport { all, not } from 'arquero'\nimport type ColumnTable from 'arquero/dist/types/table/column-table'\nimport { memo, useCallback, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { Layout as LayoutType, executeLayout } from '~/layout'\nimport {\n\tuseBigTable,\n\tuseEdgeTable,\n\tuseFeatures,\n\tuseGraphViewType,\n\tuseSetBigTable,\n\tuseSetGraphViewType,\n} from '~/state'\nimport { ViewType } from '~/types'\n\nimport { UmapLayout } from './UmapLayout'\n\nexport const Layout: React.FC = memo(function Layout() {\n\tconst nodes = useBigTable()\n\tconst edges = useEdgeTable()\n\tconst setBigTable = useSetBigTable()\n\tconst [features] = useFeatures()\n\tconst graphView = useGraphViewType()\n\tconst setGraphView = useSetGraphViewType()\n\tconst [loading, setLoading] = useState<boolean>(false)\n\tconst performLayout = useCallback(\n\t\t(type: LayoutType) => {\n\t\t\tconsole.log('performing layout', type)\n\t\t\tconst finalize = (table: ColumnTable) => {\n\t\t\t\tconsole.log('layout complete', type)\n\t\t\t\ttable.print()\n\t\t\t\tconst merged = nodes.join(\n\t\t\t\t\ttable,\n\t\t\t\t\t['node.id', 'node.id'],\n\t\t\t\t\t// note that we're overwriting any previous columns with anything new from layout\n\t\t\t\t\t// the full pipelines often include community.id and a size...\n\t\t\t\t\t[not(table.columnNames()), all()],\n\t\t\t\t)\n\t\t\t\tmerged.print()\n\t\t\t\tsetBigTable(merged)\n\t\t\t\tsetLoading(false)\n\t\t\t}\n\n\t\t\tconst deduped = nodes\n\t\t\t\t.orderby('community.nodeCount')\n\t\t\t\t.select(['node.id', 'node.x', 'node.y'])\n\t\t\t\t.dedupe('node.id')\n\t\t\t\t.ungroup()\n\n\t\t\texecuteLayout(type, deduped, edges).then(finalize)\n\t\t},\n\t\t[nodes, edges, setBigTable],\n\t)\n\n\tconst handleGridClick = useCallback(() => {\n\t\tsetLoading(true)\n\t\tperformLayout(LayoutType.Grid)\n\t}, [performLayout])\n\tconst handleUmapClick = useCallback(() => {\n\t\tsetLoading(true)\n\t\tperformLayout(LayoutType.UMAP)\n\t}, [performLayout])\n\tconst handleViewChanged = useCallback(\n\t\t(e, v) => setGraphView(v ? ViewType.SmallMultiple : ViewType.SingleGraph),\n\t\t[setGraphView],\n\t)\n\treturn (\n\t\t<Container>\n\t\t\t{features.enableSmallMultiples ? (\n\t\t\t\t<Toggle\n\t\t\t\t\tinlineLabel\n\t\t\t\t\tlabel='Community isolation'\n\t\t\t\t\tchecked={graphView === ViewType.SmallMultiple}\n\t\t\t\t\tonChange={handleViewChanged}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t\t<Buttons>\n\t\t\t\t<DefaultButton text={'Grid'} onClick={handleGridClick} />\n\t\t\t\t{edges.numRows() > 0 ? (\n\t\t\t\t\t<>\n\t\t\t\t\t\t<UmapLayout onClick={handleUmapClick} />\n\t\t\t\t\t</>\n\t\t\t\t) : null}\n\t\t\t</Buttons>\n\t\t\t<Status>\n\t\t\t\t{loading ? (\n\t\t\t\t\t<Spinner labelPosition={'right'} label={'Computing layout...'} />\n\t\t\t\t) : null}\n\t\t\t</Status>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\tmargin: 20px;\n\tmargin-bottom: 10px;\n\ttext-align: center;\n\tjustify-content: center;\n`\n\nconst Buttons = styled.div`\n\tmargin-top: 10px;\n\tdisplay: flex;\n\tjustify-content: space-around;\n`\n\nconst Status = styled.div`\n\tdisplay: flex;\n\tflex-direction: column;\n\tjustify-content: center;\n\theight: 42px;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { ColorSelector } from '@graph-drilldown/components'\n\nimport { useVisibleNodesTable } from '~/hooks/graph'\nimport { useNodeColorEncoding, useUpdateNodeColorEncoding } from '~/state'\n\nexport const NodeColorControls = () => {\n\tconst encoding = useNodeColorEncoding()\n\tconst updateEncoding = useUpdateNodeColorEncoding()\n\tconst table = useVisibleNodesTable()\n\treturn (\n\t\t<ColorSelector\n\t\t\ttable={table}\n\t\t\tencoding={encoding}\n\t\t\tonChange={updateEncoding}\n\t\t/>\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useEffect, useMemo, useState } from 'react'\nimport styled from 'styled-components'\n\nimport { useHoveredNode, useSelectedCommunity } from '~/state'\nimport { useVisibleNodeMap } from '~/state/caches'\n\nconst ROW_HEIGHT = 14\nconst DEFAULT_HEIGHT = ROW_HEIGHT * 9\n\nexport const NodeDetailsPanel = () => {\n\tconst cid = useSelectedCommunity()\n\tconst nodeMap = useVisibleNodeMap(cid)\n\tconst nodeId = useHoveredNode()\n\tconst details: Record<string, any> | undefined = useMemo(() => {\n\t\tif (nodeId) {\n\t\t\tconst node = nodeMap.get(nodeId)\n\t\t\treturn node?.columns.reduce((acc, cur) => {\n\t\t\t\tacc[cur] = node?.get(cur)\n\t\t\t\treturn acc\n\t\t\t}, {})\n\t\t}\n\t}, [nodeMap, nodeId])\n\tconst [height, setHeight] = useState<number>(DEFAULT_HEIGHT)\n\tuseEffect(() => {\n\t\tif (details) {\n\t\t\tsetHeight(Object.keys(details).length * ROW_HEIGHT)\n\t\t}\n\t}, [details])\n\treturn (\n\t\t<Content height={height}>\n\t\t\t{details ? (\n\t\t\t\tObject.entries(details).map((entry) => (\n\t\t\t\t\t<Field key={`node-details-${entry[0]}`}>\n\t\t\t\t\t\t<Name>{entry[0]}</Name>\n\t\t\t\t\t\t<Value>{entry[1]}</Value>\n\t\t\t\t\t</Field>\n\t\t\t\t))\n\t\t\t) : (\n\t\t\t\t<Empty>(hover a node for details)</Empty>\n\t\t\t)}\n\t\t</Content>\n\t)\n}\n\nconst Content = styled.div<{ height: number }>`\n\theight: ${({ height }) => height}px;\n\tmargin: 4px;\n\tfont-size: 0.7em;\n`\n\nconst Empty = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\talign-items: center;\n\tjustify-content: center;\n`\n\nconst Field = styled.div`\n\tdisplay: flex;\n\tjustify-content: center;\n\tmargin-bottom: 1px;\n`\n\nconst Name = styled.div`\n\tflex: 1;\n\ttext-align: right;\n\tmargin-right: 4px;\n\tfont-weight: bold;\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nconst Value = styled.div`\n\tflex: 1;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useHoveredNode, useSelectedCommunity } from '~/state'\nimport { useVisibleNodeMap } from '~/state/caches'\n\nexport const NodeHoverHeader: React.FC = () => {\n\tconst nodeId = useHoveredNode()\n\tconst cid = useSelectedCommunity()\n\tconst nodeMap = useVisibleNodeMap(cid)\n\tconst render = useMemo(() => {\n\t\tconst id = nodeId\n\t\tif (id === null || !id) {\n\t\t\treturn <Unset>&mdash;</Unset>\n\t\t}\n\t\tconst node = nodeMap.get(id)\n\t\tconst label = node?.get('node.label')\n\t\treturn <Fixed>{label || nodeId}</Fixed>\n\t}, [nodeId, nodeMap])\n\treturn (\n\t\t<Container>\n\t\t\t<Label>Node details:</Label>\n\t\t\t{render}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tmargin: 2px;\n\tmargin-left: 4px;\n\tfont-size: 0.8em;\n\tdisplay: flex;\n\talign-items: center;\n`\n\nconst Label = styled.div`\n\tmargin-right: 4px;\n`\n\nconst Unset = styled.div`\n\tcolor: ${({ theme }) => theme.application().midContrast().hex()};\n`\n\nconst Fixed = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { NumericSelector } from '@graph-drilldown/components'\nimport styled from 'styled-components'\n\nimport { useVisibleNodesTable } from '~/hooks/graph'\nimport { useNodeSizeEncoding, useUpdateNodeSizeEncoding } from '~/state'\n\nexport const NodeSizeControls = () => {\n\tconst encoding = useNodeSizeEncoding()\n\tconst updateEncoding = useUpdateNodeSizeEncoding()\n\tconst table = useVisibleNodesTable()\n\treturn (\n\t\t<Container>\n\t\t\t<NumericSelector\n\t\t\t\tlabel='node size'\n\t\t\t\ttable={table}\n\t\t\t\tencoding={encoding}\n\t\t\t\tonChange={updateEncoding}\n\t\t\t\tmin={0.5}\n\t\t\t\tmax={50}\n\t\t\t\tstep={0.5}\n\t\t\t/>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport {\n\tCollapsiblePanel,\n\tCollapsiblePanelContainer,\n} from '@essex/themed-components'\nimport { ToggleHeader } from '@graph-drilldown/components'\nimport { format } from 'd3-format'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport { QuickDrop } from '~/components/QuickDrop'\nimport { useEdgeCount, useNodeCount } from '~/hooks/graph'\nimport {\n\tuseEdgesVisible,\n\tuseNodesVisible,\n\tuseSetEdgesVisible,\n\tuseSetNodesVisible,\n} from '~/state'\n\nimport { EdgeColorHeaderLegend } from './legends/EdgeColorHeaderLegend'\nimport { EdgeOpacityHeaderLegend } from './legends/EdgeOpacityHeaderLegend'\nimport { EdgeSizeHeaderLegend } from './legends/EdgeSizeHeaderLegend'\nimport { NodeColorHeaderLegend } from './legends/NodeColorHeaderLegend'\nimport { NodeOpacityHeaderLegend } from './legends/NodeOpacityHeaderLegend'\nimport { NodeSizeHeaderLegend } from './legends/NodeSizeHeaderLegend'\nimport { CollapsibleSearchPanel } from './panels/CollapsibleSearchPanel/CollapsibleSearchPanel'\nimport { ColumnEditorPanel } from './panels/ColumnEditorPanel'\nimport { EdgeColorControlsPanel } from './panels/EdgeColorControlsPanel'\nimport { EdgeOpacityControlsPanel } from './panels/EdgeOpacityControlsPanel'\nimport { EdgeSizeControlsPanel } from './panels/EdgeSizeControlsPanel'\nimport { Layout } from './panels/Layout'\nimport { NodeColorControlsPanel } from './panels/NodeColorControlsPanel'\nimport { NodeDetailsPanel } from './panels/NodeDetailsPanel'\nimport { NodeHoverHeader } from './panels/NodeHoverHeader'\nimport { NodeOpacityControlsPanel } from './panels/NodeOpacityControlsPanel'\nimport { NodeSizeControlsPanel } from './panels/NodeSizeControlsPanel'\n\nexport const GUTTER = 10\n\nexport interface RightSidePanelProps {\n\tstyle?: React.CSSProperties\n}\n\nexport const RightSidePanel: React.FC<RightSidePanelProps> = ({ style }) => {\n\tconst renderNodeHoverHeader = useCallback(() => <NodeHoverHeader />, [])\n\tconst renderNodeColorHeader = useCallback(() => <NodeColorHeaderLegend />, [])\n\tconst renderNodeOpacityHeader = useCallback(\n\t\t() => <NodeOpacityHeaderLegend />,\n\t\t[],\n\t)\n\tconst renderNodeSizeHeader = useCallback(() => <NodeSizeHeaderLegend />, [])\n\tconst renderEdgeColorHeader = useCallback(() => <EdgeColorHeaderLegend />, [])\n\tconst renderEdgeOpacityHeader = useCallback(\n\t\t() => <EdgeOpacityHeaderLegend />,\n\t\t[],\n\t)\n\tconst renderEdgeSizeHeader = useCallback(() => <EdgeSizeHeaderLegend />, [])\n\n\treturn (\n\t\t<Container style={style}>\n\t\t\t<DisplayRelative>\n\t\t\t\t<CollapsiblePanelContainer>\n\t\t\t\t\t<CollapsibleSearchPanel />\n\t\t\t\t\t<NodesHeader />\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Hovered node'}\n\t\t\t\t\t\tonRenderHeader={renderNodeHoverHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<NodeDetailsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Node color'}\n\t\t\t\t\t\tonRenderHeader={renderNodeColorHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<NodeColorControlsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Node opacity'}\n\t\t\t\t\t\tonRenderHeader={renderNodeOpacityHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<NodeOpacityControlsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Node size'}\n\t\t\t\t\t\tonRenderHeader={renderNodeSizeHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<NodeSizeControlsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<EdgesHeader />\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Edge color'}\n\t\t\t\t\t\tonRenderHeader={renderEdgeColorHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<EdgeColorControlsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Edge opacity'}\n\t\t\t\t\t\tonRenderHeader={renderEdgeOpacityHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<EdgeOpacityControlsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel\n\t\t\t\t\t\ttitle={'Edge size'}\n\t\t\t\t\t\tonRenderHeader={renderEdgeSizeHeader}\n\t\t\t\t\t>\n\t\t\t\t\t\t<EdgeSizeControlsPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel title={'Data editor'}>\n\t\t\t\t\t\t<ColumnEditorPanel />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel title={'Layout'}>\n\t\t\t\t\t\t<Layout />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t\t<CollapsiblePanel title={'Quick drop'} defaultExpanded={true}>\n\t\t\t\t\t\t<QuickDrop dropWidthSize={40} dropHeightSize={20} compact />\n\t\t\t\t\t</CollapsiblePanel>\n\t\t\t\t</CollapsiblePanelContainer>\n\t\t\t</DisplayRelative>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tz-index: 10;\n`\nconst DisplayRelative = styled.div`\n\tposition: relative;\n`\nconst pretty = format(',')\n\nconst NodesHeader = () => {\n\tconst count = useNodeCount()\n\tconst checked = useNodesVisible()\n\tconst handleChecked = useSetNodesVisible()\n\treturn (\n\t\t<ToggleHeader\n\t\t\ttitle={'Nodes'}\n\t\t\tsubtitle={`${pretty(count)} node${count !== 1 ? 's' : ''}`}\n\t\t\tonChange={handleChecked}\n\t\t\tchecked={checked}\n\t\t\tdisabled={count === 0}\n\t\t/>\n\t)\n}\n\nconst EdgesHeader = () => {\n\tconst count = useEdgeCount()\n\tconst checked = useEdgesVisible()\n\tconst handleChecked = useSetEdgesVisible()\n\treturn (\n\t\t<ToggleHeader\n\t\t\ttitle={'Edges'}\n\t\t\tsubtitle={`${pretty(count)} edge${count !== 1 ? 's' : ''}`}\n\t\t\tonChange={handleChecked}\n\t\t\tchecked={checked}\n\t\t\tdisabled={count === 0}\n\t\t/>\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { Suspense, memo, useMemo, useRef, useState } from 'react'\nimport type { RndResizeStartCallback } from 'react-rnd'\nimport styled from 'styled-components'\n\nimport {\n\tCSSFilter,\n\tuseGraphDimensions,\n\tuseLayoutStyle,\n\tuseResizeHandlers,\n} from './GraphViewerPage.hooks'\nimport { GraphPanel } from './components/GraphPanel'\nimport { LeftSidePanel } from './components/LeftSidePanel'\nimport { ResizableBrowser } from './components/ResizableBrowser'\nimport { RightSidePanel } from './components/RightSidePanel'\nimport { StyledSpinnner } from './components/StyledSpinner'\n\nexport const GraphViewerPage: React.FC = memo(function GraphViewerPage() {\n\tconst ref = useRef(null)\n\tconst [graphDimensions, position, setPosition] = useGraphDimensions(ref)\n\tconst { width, height, leftPanelWidth, rightPanelWidth, browserWidth } =\n\t\tgraphDimensions\n\n\tconst [graphFilter, setGraphFilter] = useState<CSSFilter>(CSSFilter.NONE)\n\n\tconst { handleResizeStart, handleButtonClick, handleResizeStop } =\n\t\tuseResizeHandlers({ height, position, setPosition, setGraphFilter })\n\n\tconst graphHeight = useMemo(\n\t\t() => height - position.height,\n\t\t[height, position],\n\t)\n\tconst {\n\t\tgraphContainerStyle,\n\t\tgraphStyle,\n\t\trightSidePanelStyle,\n\t\tleftSidePanelStyle,\n\t} = useLayoutStyle(\n\t\tleftPanelWidth,\n\t\trightPanelWidth,\n\t\theight,\n\t\tgraphHeight,\n\t\tgraphFilter,\n\t)\n\n\treturn (\n\t\t<Container ref={ref}>\n\t\t\t<Suspense fallback={<Placeholder />}>\n\t\t\t\t<LeftSidePanel\n\t\t\t\t\tstyle={leftSidePanelStyle}\n\t\t\t\t\theight={height}\n\t\t\t\t\twidth={leftPanelWidth}\n\t\t\t\t/>\n\t\t\t</Suspense>\n\t\t\t<Suspense fallback={<Placeholder />}>\n\t\t\t\t<RightSidePanel style={rightSidePanelStyle} />\n\t\t\t</Suspense>\n\t\t\t<GraphContainer style={graphContainerStyle}>\n\t\t\t\t<Suspense fallback={<StyledSpinnner />}>\n\t\t\t\t\t<GraphPanelContainer style={graphStyle}>\n\t\t\t\t\t\t<GraphPanel width={width} height={graphHeight} />\n\t\t\t\t\t</GraphPanelContainer>\n\t\t\t\t</Suspense>\n\t\t\t\t<ResizableBrowser\n\t\t\t\t\twidth={browserWidth}\n\t\t\t\t\thandleResizeStop={handleResizeStop}\n\t\t\t\t\thandleResizeStart={handleResizeStart as RndResizeStartCallback}\n\t\t\t\t\thandleButtonClick={handleButtonClick}\n\t\t\t\t\tposition={position}\n\t\t\t\t/>\n\t\t\t</GraphContainer>\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div`\n\twidth: 100vw;\n\theight: calc(100vh - 80px);\n\tbackground: ${({ theme }) => theme.plotArea().fill().hex()};\n\toverflow: hidden;\n`\n\nconst GraphContainer = styled.div``\n\nconst GraphPanelContainer = styled.div``\n\nconst Placeholder = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { NumberSpinButton } from '@essex/themed-components'\nimport { TextField } from '@fluentui/react'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nexport interface ImageSaveSettings {\n\tfilename: string\n\tsize: number\n}\n\nexport interface ImageSettingsProps {\n\tsettings: ImageSaveSettings\n\tonChange?: (settings: ImageSaveSettings) => void\n}\nexport const ImageSettings: React.FC<ImageSettingsProps> = ({\n\tonChange,\n\tsettings,\n}) => {\n\tconst handleFilenameChange = useCallback(\n\t\t(e, value) => {\n\t\t\tonChange?.({\n\t\t\t\t...settings,\n\t\t\t\tfilename: value,\n\t\t\t})\n\t\t},\n\t\t[onChange, settings],\n\t)\n\n\tconst handleSizeChange = useCallback(\n\t\t(value) => {\n\t\t\tonChange?.({\n\t\t\t\t...settings,\n\t\t\t\tsize: value,\n\t\t\t})\n\t\t},\n\t\t[onChange, settings],\n\t)\n\n\treturn (\n\t\t<Container>\n\t\t\t<TextField\n\t\t\t\tlabel={'Filename'}\n\t\t\t\tvalue={settings.filename}\n\t\t\t\tsuffix={'.png'}\n\t\t\t\tonChange={handleFilenameChange}\n\t\t\t\tstyles={{\n\t\t\t\t\t// TODO: this is a kludge to align the label with the NumberSpinButton next to it\n\t\t\t\t\tfieldGroup: {\n\t\t\t\t\t\tmarginTop: 3,\n\t\t\t\t\t},\n\t\t\t\t}}\n\t\t\t/>\n\t\t\t<Size>\n\t\t\t\t<NumberSpinButton\n\t\t\t\t\tlabel={'Size (px)'}\n\t\t\t\t\tvalue={settings.size}\n\t\t\t\t\tonChange={handleSizeChange}\n\t\t\t\t\tincrementButtonAriaLabel='increment size (px)'\n\t\t\t\t\tdecrementButtonAriaLabel='decrement size (px)'\n\t\t\t\t/>\n\t\t\t</Size>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nconst Size = styled.div`\n\twidth: 25%;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { ActionButton, Spinner } from '@fluentui/react'\nimport { useCallback } from 'react'\nimport styled from 'styled-components'\n\nimport {\n\tuseCreateRenderer,\n\tuseImageSettings,\n\tuseSaveImage,\n} from './Export.hooks'\nimport { ImageSettings } from './ImageSettings'\n\nexport const Export: React.FC = () => {\n\tconst { settings, onSettingsChange } = useImageSettings()\n\n\tconst { renderer, doCreate } = useCreateRenderer()\n\n\tconst { saving, doSave } = useSaveImage(settings, renderer)\n\n\tconst handleExportClick = useCallback(() => {\n\t\tdoCreate()\n\t\tdoSave()\n\t}, [doCreate, doSave])\n\n\treturn (\n\t\t<Container>\n\t\t\t<ImageSettings settings={settings} onChange={onSettingsChange} />\n\t\t\t<ActionButton\n\t\t\t\ttitle={'Save graph image'}\n\t\t\t\ticonProps={{ iconName: 'Download' }}\n\t\t\t\tonClick={handleExportClick}\n\t\t\t>\n\t\t\t\tSave\n\t\t\t</ActionButton>\n\t\t\t{saving ? <Spinner label={'Preparing image...'} /> : null}\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport type {\n\tIButtonStyles,\n\tIDragOptions,\n\tIIconProps,\n\tIModalStyleProps,\n\tIModalStyles,\n} from '@fluentui/react'\nimport { ContextualMenu, IconButton, Modal, Text } from '@fluentui/react'\nimport type { IStyleFunctionOrObject } from '@fluentui/utilities'\nimport { useThematic } from '@thematic/react'\nimport { memo, useMemo } from 'react'\nimport { Case, Switch } from 'react-if'\nimport styled from 'styled-components'\n\nimport { variants } from '~/styles'\n\nimport { Export } from '../../Export'\nimport { Help } from '../../Help'\nimport { ModalPageType } from './ModalContainer.types'\nimport { SettingsModal } from './SettingsModal'\nimport { UploadModal } from './UploadModal'\n\nconst dragOptions: IDragOptions = {\n\tmoveMenuItemText: 'Move',\n\tcloseMenuItemText: 'Close',\n\tmenu: ContextualMenu,\n}\nconst cancelIcon: IIconProps = { iconName: 'Cancel' }\n\nexport interface ModalContainerProps {\n\ttitle: string\n\tonDismiss: () => void\n\tisModalOpen: boolean\n\tmodalType: ModalPageType\n}\n\nexport const ModalContainer: React.FC<ModalContainerProps> = memo(\n\tfunction ModalContainer({\n\t\ttitle,\n\t\tonDismiss,\n\t\tisModalOpen,\n\t\tmodalType,\n\t}: ModalContainerProps) {\n\t\tconst iconButtonStyles = useIconButtonStyles()\n\t\tconst modalStyles = useModalStyles()\n\t\treturn (\n\t\t\t<Container className={'modal-container'}>\n\t\t\t\t<Modal\n\t\t\t\t\ttitleAriaId={title}\n\t\t\t\t\tisOpen={isModalOpen}\n\t\t\t\t\tonDismiss={onDismiss}\n\t\t\t\t\tisModeless={false}\n\t\t\t\t\tisBlocking={false}\n\t\t\t\t\tdragOptions={dragOptions}\n\t\t\t\t\tstyles={modalStyles}\n\t\t\t\t\tlayerProps={{ eventBubblingEnabled: true }}\n\t\t\t\t>\n\t\t\t\t\t<Header>\n\t\t\t\t\t\t<Title>\n\t\t\t\t\t\t\t<Text variant={variants.xxLarge}>\n\t\t\t\t\t\t\t\t<b>{title}</b>\n\t\t\t\t\t\t\t</Text>\n\t\t\t\t\t\t</Title>\n\t\t\t\t\t\t<IconButton\n\t\t\t\t\t\t\tstyles={iconButtonStyles}\n\t\t\t\t\t\t\ticonProps={cancelIcon}\n\t\t\t\t\t\t\tariaLabel='Close popup modal'\n\t\t\t\t\t\t\tonClick={onDismiss}\n\t\t\t\t\t\t/>\n\t\t\t\t\t</Header>\n\t\t\t\t\t<ContentContainer>\n\t\t\t\t\t\t<Switch>\n\t\t\t\t\t\t\t<Case condition={modalType === ModalPageType.Upload}>\n\t\t\t\t\t\t\t\t<UploadModal />\n\t\t\t\t\t\t\t</Case>\n\t\t\t\t\t\t\t<Case condition={modalType === ModalPageType.Export}>\n\t\t\t\t\t\t\t\t<Export />\n\t\t\t\t\t\t\t</Case>\n\t\t\t\t\t\t\t<Case condition={modalType === ModalPageType.Settings}>\n\t\t\t\t\t\t\t\t<SettingsModal />\n\t\t\t\t\t\t\t</Case>\n\t\t\t\t\t\t\t<Case condition={modalType === ModalPageType.Help}>\n\t\t\t\t\t\t\t\t<Help />\n\t\t\t\t\t\t\t</Case>\n\t\t\t\t\t\t</Switch>\n\t\t\t\t\t</ContentContainer>\n\t\t\t\t</Modal>\n\t\t\t</Container>\n\t\t)\n\t},\n)\n\nconst Container = styled.div``\n\nconst Header = styled.div`\n\ttext-align: center;\n\talign-items: center;\n\tflex: 1 1 auto;\n\tdisplay: flex;\n\tpadding: 12px 12px 14px 24px;\n`\nconst ContentContainer = styled.div`\n\tpadding: 12px 20px 14px 20px;\n`\n\nconst Title = styled.span`\n\tflex: 2;\n`\n\nexport function useIconButtonStyles(): IButtonStyles {\n\tconst theme = useThematic()\n\treturn useMemo(\n\t\t() => ({\n\t\t\troot: {\n\t\t\t\tcolor: theme.application().highContrast().hex(),\n\t\t\t\tmarginLeft: 'auto',\n\t\t\t\tmarginTop: '4px',\n\t\t\t\tmarginRight: '2px',\n\t\t\t},\n\t\t\trootHovered: {\n\t\t\t\tcolor: theme.application().accent().hex(),\n\t\t\t},\n\t\t}),\n\t\t[theme],\n\t)\n}\n\nfunction useModalStyles(): IStyleFunctionOrObject<\n\tIModalStyleProps,\n\tIModalStyles\n> {\n\tconst theme = useThematic()\n\treturn useMemo(\n\t\t() => ({ main: { background: theme.application().faint().hex() } }),\n\t\t[theme],\n\t)\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { IconButton } from '@fluentui/react'\nimport { memo } from 'react'\nimport styled from 'styled-components'\n\nimport { useButtonConfig, useModal } from './ModalButtons.hooks'\nimport { ModalContainer } from './modals/ModalContainer'\n\n/**\n * This is a list of buttons for the CommandBar that each open a modal pane.\n */\nexport const ModalButtons: React.FC = memo(function ModalButtons() {\n\tconst buttons = useButtonConfig()\n\n\tconst { onButtonClick, onDismiss, selected } = useModal()\n\n\treturn (\n\t\t<Container>\n\t\t\t{buttons.map((button, i) => (\n\t\t\t\t<IconButton\n\t\t\t\t\tkey={`modal-button_${button.key}`}\n\t\t\t\t\ticonProps={{\n\t\t\t\t\t\ticonName: button.iconName,\n\t\t\t\t\t}}\n\t\t\t\t\ttitle={button.title}\n\t\t\t\t\tonClick={() => onButtonClick(button)}\n\t\t\t\t/>\n\t\t\t))}\n\t\t\t{selected ? (\n\t\t\t\t<ModalContainer\n\t\t\t\t\tisModalOpen={!!selected}\n\t\t\t\t\ttitle={selected.title}\n\t\t\t\t\tonDismiss={onDismiss}\n\t\t\t\t\tmodalType={selected.type}\n\t\t\t\t/>\n\t\t\t) : null}\n\t\t</Container>\n\t)\n})\n\nconst Container = styled.div``\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nimport { COMMANDBAR_HEIGHT, COMMANDBAR_MARGIN, PANEL_WIDTH } from '~/styles'\n\nimport { ModalButtons } from './ModalButtons'\nimport { NavigationButtons } from './NavigationButtons'\n\n/**\n * This is a universal command bar for navigating and opening modals.\n * Note the navigation and modals are split into two bordered groups for clarity\n */\nexport const CommandBar = () => {\n\treturn (\n\t\t<Container>\n\t\t\t<FlexContainer>\n\t\t\t\t<ButtonGroup>\n\t\t\t\t\t<NavigationButtons />\n\t\t\t\t</ButtonGroup>\n\t\t\t\t<ButtonGroup>\n\t\t\t\t\t<ModalButtons />\n\t\t\t\t</ButtonGroup>\n\t\t\t</FlexContainer>\n\t\t</Container>\n\t)\n}\n\nconst Container = styled.div`\n\twidth: ${PANEL_WIDTH - COMMANDBAR_MARGIN * 2}px;\n\tmargin: ${COMMANDBAR_MARGIN}px;\n\theight: ${COMMANDBAR_HEIGHT}px;\n`\n\nconst FlexContainer = styled.div`\n\tdisplay: flex;\n\tjustify-content: space-between;\n`\n\nconst ButtonGroup = styled.div`\n\tdisplay: flex;\n\talign-items: center;\n\tborder-radius: 2px;\n\tborder: 1px solid ${({ theme }) => theme.application().faint().hex()};\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n/**\n * Styling helpers for fluent inline styles.\n */\nimport type {\n\tISpinnerStyleProps,\n\tISpinnerStyles,\n\tIStyleFunctionOrObject,\n\tITextProps,\n} from '@fluentui/react'\n\nexport const COMMANDBAR_HEIGHT = 32\nexport const COMMANDBAR_MARGIN = 12\nexport const HEADER_HEIGHT = COMMANDBAR_HEIGHT + COMMANDBAR_MARGIN * 2\n\nexport const PANEL_WIDTH = 300\nexport const APP_PADDING_LEFT = 30\n\nexport const BREAD_CRUMB_STYLES = {\n\troot: {\n\t\tmarginTop: 0,\n\t},\n\titem: { fontSize: 'xxLarge' },\n}\n\nexport const SPINNER_STYLE: IStyleFunctionOrObject<\n\tISpinnerStyleProps,\n\tISpinnerStyles\n> = {\n\troot: {\n\t\tzIndex: 1,\n\t\tmarginLeft: 300,\n\t\tmarginTop: 300,\n\t},\n\tlabel: { fontSize: 32 },\n\tcircle: { width: 200, height: 200 },\n}\n\nexport const SIDE_PANEL_STYLE: React.CSSProperties = {\n\tposition: 'relative',\n}\n\nexport const HELP_PANEL_STYLE: React.CSSProperties = { fontSize: '0.8em' }\nexport const GUTTER = 10\nexport const ANIMATION_DURATION = 500\n// Fluent Text Styles\nconst tiny = 'tiny' as ITextProps['variant']\nconst xSmall = 'xSmall' as ITextProps['variant']\nconst small = 'small' as ITextProps['variant']\nconst smallPlus = 'smallPlus' as ITextProps['variant']\nconst medium = 'medium' as ITextProps['variant']\nconst mediumPlus = 'mediumPlus' as ITextProps['variant']\nconst large = 'large' as ITextProps['variant']\nconst xLarge = 'xLarge' as ITextProps['variant']\nconst xxLarge = 'xxLarge' as ITextProps['variant']\nconst mega = 'mega' as ITextProps['variant']\n\nexport const variants = {\n\ttiny,\n\txSmall,\n\tsmall,\n\tsmallPlus,\n\tmedium,\n\tmediumPlus,\n\tlarge,\n\txLarge,\n\txxLarge,\n\tmega,\n}\n\nexport const headerLabel = variants.mediumPlus as ITextProps['variant']\nexport const subHeaderLabel = variants.medium as ITextProps['variant']\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */ import { useCallback, useEffect, useState } from 'react';\nconst DEFAULT_CONSENT = {\n    Required: true,\n    Advertising: false,\n    Analytics: false,\n    SocialMedia: false\n};\nconst NOOP = ()=>{\n/*nothing */ };\nconst DEFAULT_CONSENT_OPTIONS = Object.freeze({});\n/**\n * Uses the Microsoft cookie consent banner. The banner code should be loaded from CDN using a script tag.\n * <script src=\"https://wcpstatic.microsoft.com/mscc/lib/v2/wcp-consent.js\"></script>\n * You should also include a div for the cookie banner to render into: e.g. <div id=\"cookie-banner\" />\n * @param options - The consent banner options. (optional)\n * \t\toptions.theme; \"light\" | \"dark\", default \"dark\")\n * \t\toptions.elementId; default = \"cookie-banner\"\n * \t\toptions.onChange; (consent: Consent) =\\> void; default=noop\n * @returns [current consent; manageConsent function (to be used in footer)]\n */ export function useMicrosoftConsentBanner({ theme = 'dark', elementId = 'cookie-banner', onChange = NOOP } = DEFAULT_CONSENT_OPTIONS) {\n    const [consent, setConsent] = useState(DEFAULT_CONSENT);\n    const [consentUtil, setConsentUtil] = useState({\n        getConsent: ()=>DEFAULT_CONSENT,\n        manageConsent: NOOP\n    });\n    useEffect(()=>{\n        try {\n            const element = document.getElementById(elementId);\n            if (!element) {\n                throw new Error(`Could not find element with id ${elementId}. You should include an element in your HTML for the cookie-banner to render into, e.g. \n\t\t\t\t\t\t\n\t\t\t\t\t<body>\n\t\t\t\t\t\t...\n\t\t\t\t\t\t<div id=\"${elementId}\" />\n\t\t\t\t\t</body>`);\n            }\n            if (!WcpConsent) {\n                throw new Error(`WcpConsent banner not initialized. You should include the WCP Consent script in your HTML header. e.g.\n\n\t\t\t\t<head>\n\t\t\t\t\t...\n\t\t\t\t\t<script src=\"https://wcpstatic.microsoft.com/mscc/lib/v2/wcp-consent.js\"></script>\n\t\t\t\t</head>\n\t\t\t\t`);\n            }\n            WcpConsent.init(navigator.language, element, function initializeConsentManagement(err, consentUtil) {\n                if (err) {\n                    console.error('error initalizing WcpConsent', err);\n                } else {\n                    setConsentUtil(consentUtil);\n                }\n            }, function onConsentChanged(consent) {\n                setConsent(consent);\n                onChange(consent);\n            }, theme);\n        } catch (err) {\n            console.error('error initalizing consent', err);\n        }\n    }, /* eslint-disable-next-line react-hooks/exhaustive-deps */ [\n        theme\n    ]);\n    const manageConsent = useCallback(()=>consentUtil.manageConsent(), [\n        consentUtil\n    ]);\n    return [\n        consent,\n        manageConsent\n    ];\n}\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\n\nimport { useMicrosoftConsentBanner } from '@essex/hooks'\nimport type { FC, ReactNode } from 'react'\nimport { memo, useMemo } from 'react'\nimport styled from 'styled-components'\n\nimport { useTheme } from '~/state'\n\nexport const Footer: FC<{\n\tchildren?: ReactNode\n}> = memo(function Footer() {\n\tconst theme = useTheme()\n\tconst CONSENT_CONF = {\n\t\ttheme: theme.variant,\n\t\telementId: 'cookie-banner',\n\t\tonChange: (c: any) => console.log('CHANGED', c),\n\t}\n\n\tconst [, manageConsent] = useMicrosoftConsentBanner(CONSENT_CONF)\n\tconst style = useMemo(\n\t\t() => ({\n\t\t\tcolor: theme.application().midContrast().hex(),\n\t\t\tcursor: 'pointer',\n\t\t\ttextDecoration: 'none !important',\n\t\t}),\n\t\t[theme],\n\t)\n\treturn (\n\t\t<FooterEl>\n\t\t\t<Container>\n\t\t\t\t<Link href={constants.privacyUrl} style={style}>\n\t\t\t\t\tPrivacy\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.consumerHealthUrl} style={style}>\n\t\t\t\t\tConsumer Health Privacy\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link id={'managecookies'} onClick={manageConsent} style={style}>\n\t\t\t\t\tCookies\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.termsOfUseUrl} style={style}>\n\t\t\t\t\tTerms of Use\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.trademarksUrl} style={style}>\n\t\t\t\t\tTrademarks\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.microsoft} style={style}>\n\t\t\t\t\t{constants.copyright}\n\t\t\t\t</Link>\n\t\t\t\t{' | '}\n\t\t\t\t<Link href={constants.github} style={style}>\n\t\t\t\t\tGitHub\n\t\t\t\t</Link>\n\t\t\t</Container>\n\t\t</FooterEl>\n\t)\n})\n\nconst Link: FC<{\n\thref?: string\n\tid?: string\n\tclassName?: string\n\tstyle?: React.CSSProperties\n\tonClick?: () => void\n\tchildren?: ReactNode\n}> = memo(function Link({ id, className, children, href, style, onClick }) {\n\treturn href == null ? (\n\t\t<LinkDiv style={style} className={className} id={id} onClick={onClick}>\n\t\t\t{children}\n\t\t</LinkDiv>\n\t) : (\n\t\t<LinkA\n\t\t\ttarget='_blank'\n\t\t\trel='noreferrer'\n\t\t\thref={href}\n\t\t\tstyle={style}\n\t\t\tclassName={className}\n\t\t\tid={id}\n\t\t>\n\t\t\t{children}\n\t\t</LinkA>\n\t)\n})\n\nconst FooterEl = styled.footer`\n\twidth: 100%;\n`\n\nconst Container = styled.div`\n\twidth: 600px;\n\theight: 20px;\n\tfont-size: 12px;\n\tdisplay: flex;\n\tflex-direction: row;\n\talign-items: center;\n\talign-content: center;\n\tjustify-content: space-between;\n\tmargin: auto;\n`\n\nexport const constants = {\n\tprivacyUrl: 'https://go.microsoft.com/fwlink/?LinkId=521839',\n\tconsumerHealthUrl: 'https://go.microsoft.com/fwlink/?LinkId=2259814',\n\ttermsOfUseUrl: 'https://go.microsoft.com/fwlink/?LinkID=206977',\n\ttrademarksUrl: 'https://www.microsoft.com/trademarks',\n\tmicrosoft: 'https://www.microsoft.com',\n\tcopyright: `©️ ${new Date().getFullYear()} Microsoft`,\n\tgithub: 'https://github.com/microsoft/graph-drilldown',\n}\n\nconst LinkDiv = styled.div`\n\tcursor: pointer;\n`\nconst LinkA = styled.a`\n\tcursor: pointer;\n\ttext-decoration: none !important;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport styled from 'styled-components'\n\nimport { LazyCachingSwitch } from '~/components/LazyCachingSwitch'\nimport { DataManagerPage, GraphViewerPage } from '~/pages'\nimport { HashRouter, Route } from '~/react-patch/react-router-dom'\n\nimport { DataContext } from './DataContext'\nimport { StateContext } from './StateContext'\nimport { StyleContext } from './StyleContext'\nimport { CommandBar } from './components/CommandBar'\nimport { Footer } from './components/Footer'\n\nexport const App: React.FC = () => {\n\tconsole.log(\"v0.0\");\n\treturn (\n\t\t<StateContext>\n\t\t\t<DataContext>\n\t\t\t\t<StyleContext>\n\t\t\t\t\t<HashRouter>\n\t\t\t\t\t\t<Container>\n\t\t\t\t\t\t\t<CommandBar />\n\t\t\t\t\t\t\t<Main>\n\t\t\t\t\t\t\t\t<LazyCachingSwitch>\n\t\t\t\t\t\t\t\t\t<Route path='/' component={GraphViewerPage} />\n\t\t\t\t\t\t\t\t\t<Route path='/files' component={DataManagerPage} />\n\t\t\t\t\t\t\t\t</LazyCachingSwitch>\n\t\t\t\t\t\t\t\t<Footer />\n\t\t\t\t\t\t\t</Main>\n\t\t\t\t\t\t</Container>\n\t\t\t\t\t</HashRouter>\n\t\t\t\t</StyleContext>\n\t\t\t</DataContext>\n\t\t</StateContext>\n\t)\n}\n\nconst Container = styled.div``\n\nconst Main = styled.div`\n\tdisplay: flex;\n\theight: 100%;\n\twidth: 100%;\n\tflex-direction: column;\n`\n","/*!\n * Copyright (c) Microsoft. All rights reserved.\n * Licensed under the MIT license. See LICENSE file in the project.\n */\nimport { initializeIcons } from '@fluentui/react/lib/Icons'\nimport { createRoot } from 'react-dom/client'\n\nimport { App } from './App'\n\nfunction mount(): void {\n\ttry {\n\t\tconst container = document.getElementById('root')\n\t\tinitializeIcons(undefined, { disableWarnings: true })\n\t\tif (container == null) {\n\t\t\tthrow new Error('could not find root container')\n\t\t}\n\t\tconst root = createRoot(container)\n\t\troot.render(<App />)\n\t} catch (err) {\n\t\tconsole.error('error rendering application', err)\n\t}\n}\nmount()\n"],"names":[],"sourceRoot":""}