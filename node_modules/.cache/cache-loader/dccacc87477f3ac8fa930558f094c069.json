{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\arquero\\hooks.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\arquero\\hooks.ts","mtime":1631029334672},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/ws/graph-drill/src/arquero/hooks.ts"],"names":["ROOT_COMMUNITY_ID","CommunityCollection","EdgeCollection","NodeCollection","findNodesCollectionForCommunity","filterEdgesToNodes","deriveLayoutPositions","deriveSmallMultiplePositions","initializeEdgeTable","initializeNodeTable","joinDataTables","joinNodeCommunityTables","listColumnDefs","not","table","useCallback","useMemo","useHoveredCommunity","useSelectedCommunity","useBigTable","useSetBigTable","useGroupedByCommunityTable","useGroupedByParentTable","useEdgeTable","useSetEdgeTable","useResetBigTable","useResetEdgeTable","useCommunityNodesTable","useCommunitiesTable","useResetNavigationState","useResetSelectedCommunity","useUniqueNodes","useCachedColumnHistogram","useCachedColumnStats","useArqueroBigTable","useSetArqueroBigTable","useArqueroEdgeTable","useSetArqueroEdgeTable","useClearAllData","resetBigTable","resetEdgeTable","resetNav","resetSelectedCommunity","useArqueroAddTable","bigTable","setBigTable","setEdgeTable","newTable","type","console","log","print","updated","numRows","edges","numCols","useArqueroRemoveColumns","columnNames","derived","select","fixed","Set","useArqueroColumnList","useArqueroUniqueNodes","useNodeCount","nodes","size","useEdgeCount","useColumnStats","field","useColumnHistogram","useArqueroUniqueEdges","filtered","useArqueroVisibleCommunities","pid","communities","tbl","params","filter","d","$","ungroup","exclude","useArqueroDataFields","has","useArqueroVisibleNodes","useArqueroVisibleNodesTable","useArqueroVisibleEdges","id","useArqueroHoveredNodes","hovered","byParent","byCommunity","useArqueroSelectedNodes","selected","useTableColumnsByType","dataType","def","columns","map","name","valueTable","useStandardNodePositions","useGriddedNodePositions","compute","positions","useColumnArray","colAttribute","hiddenFields","allColumns","length","reduce","acc","col","split","prefix","value","hidden","find","colType","push"],"mappings":"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","sourcesContent":["/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */\r\nimport { ROOT_COMMUNITY_ID } from '../constants';\r\nimport { CommunityCollection, EdgeCollection, NodeCollection, } from './TableCollection';\r\nimport { findNodesCollectionForCommunity } from './communities';\r\nimport { filterEdgesToNodes } from './edges';\r\nimport { deriveLayoutPositions, deriveSmallMultiplePositions } from './layout';\r\nimport { initializeEdgeTable, initializeNodeTable, joinDataTables, joinNodeCommunityTables, listColumnDefs, } from './table';\r\nimport { not, table } from 'arquero';\r\nimport { useCallback, useMemo } from 'react';\r\nimport { useHoveredCommunity, useSelectedCommunity, useBigTable, useSetBigTable, useGroupedByCommunityTable, useGroupedByParentTable, useEdgeTable, useSetEdgeTable, useResetBigTable, useResetEdgeTable, useCommunityNodesTable, useCommunitiesTable, useResetNavigationState, useResetSelectedCommunity, useUniqueNodes, } from '~/state';\r\nimport { useCachedColumnHistogram, useCachedColumnStats } from '~/state/caches';\r\nexport function useArqueroBigTable() {\r\n    return useBigTable();\r\n}\r\nexport function useSetArqueroBigTable() {\r\n    return useSetBigTable();\r\n}\r\nexport function useArqueroEdgeTable() {\r\n    return useEdgeTable();\r\n}\r\nexport function useSetArqueroEdgeTable() {\r\n    return useSetEdgeTable();\r\n}\r\nexport function useClearAllData() {\r\n    const resetBigTable = useResetBigTable();\r\n    const resetEdgeTable = useResetEdgeTable();\r\n    const resetNav = useResetNavigationState();\r\n    const resetSelectedCommunity = useResetSelectedCommunity();\r\n    return useCallback(() => {\r\n        resetBigTable();\r\n        resetEdgeTable();\r\n        resetNav();\r\n        resetSelectedCommunity();\r\n    }, [resetBigTable, resetEdgeTable, resetNav, resetSelectedCommunity]);\r\n}\r\nexport function useArqueroAddTable() {\r\n    const bigTable = useArqueroBigTable();\r\n    const setBigTable = useSetArqueroBigTable();\r\n    const setEdgeTable = useSetArqueroEdgeTable();\r\n    return useCallback((newTable, type) => {\r\n        console.log('adding table/columns', type);\r\n        newTable.print();\r\n        let updated = bigTable;\r\n        if (type === 'edge') {\r\n            if (bigTable.numRows() === 0) {\r\n                updated = initializeNodeTable(newTable, true);\r\n            }\r\n            const edges = initializeEdgeTable(newTable);\r\n            setEdgeTable(edges);\r\n        }\r\n        else {\r\n            if (bigTable.numCols() > 0) {\r\n                if (type === 'join') {\r\n                    updated = joinNodeCommunityTables(bigTable, newTable);\r\n                }\r\n                else {\r\n                    updated = joinDataTables(bigTable, newTable, type);\r\n                }\r\n            }\r\n            else {\r\n                // it's a fresh start\r\n                updated = initializeNodeTable(newTable);\r\n            }\r\n        }\r\n        updated.print();\r\n        setBigTable(updated);\r\n    }, [bigTable, setBigTable, setEdgeTable]);\r\n}\r\nexport function useArqueroRemoveColumns() {\r\n    const bigTable = useArqueroBigTable();\r\n    const setBigTable = useSetArqueroBigTable();\r\n    return useCallback((columnNames) => {\r\n        // TODO: we could inadvertently use this to remove required columns, such as node.id which should be blocked\r\n        // TODO: if a removed column is the current visual encoding, it will error - find a fallback\r\n        console.log('removing columns', columnNames);\r\n        const derived = bigTable.select(not(columnNames));\r\n        derived.print();\r\n        setBigTable(derived);\r\n    }, [bigTable, setBigTable]);\r\n}\r\nconst fixed = new Set([\r\n    'node.id',\r\n    'node.x',\r\n    'node.y',\r\n    'node.d',\r\n    'community.id',\r\n    'community.pid',\r\n    'community.childCount',\r\n    'community.nodeCount',\r\n]);\r\nexport function useArqueroColumnList() {\r\n    const bigTable = useArqueroBigTable();\r\n    return useMemo(() => listColumnDefs(bigTable, fixed), [bigTable]);\r\n}\r\n// for the list of unique nodes, just get the list where parent comm is -1\r\n// this will be the child nodes of every community at the root\r\nexport function useArqueroUniqueNodes() {\r\n    return useUniqueNodes();\r\n}\r\nexport function useNodeCount() {\r\n    const nodes = useArqueroUniqueNodes();\r\n    return nodes.size;\r\n}\r\nexport function useEdgeCount() {\r\n    const edges = useEdgeTable();\r\n    return edges.numRows();\r\n}\r\nexport function useColumnStats(table, field) {\r\n    return useCachedColumnStats(table, field);\r\n}\r\nexport function useColumnHistogram(table, field) {\r\n    return useCachedColumnHistogram(table, field);\r\n}\r\n// TODO: (a) do we actually need to filter edges to ensure node alignment?\r\n// (b) we should create a useVisibleEdges list that matches the selected community, just like nodes\r\nexport function useArqueroUniqueEdges() {\r\n    const table = useEdgeTable();\r\n    const nodes = useArqueroUniqueNodes();\r\n    return useMemo(() => {\r\n        const filtered = filterEdgesToNodes(table, nodes);\r\n        return new EdgeCollection(filtered);\r\n    }, [table, nodes]);\r\n}\r\n// visible communities are always derived from the selected parent\r\nexport function useArqueroVisibleCommunities() {\r\n    const pid = useSelectedCommunity();\r\n    const communities = useCommunitiesTable();\r\n    const tbl = useMemo(() => {\r\n        if (communities.numCols() > 0 && pid) {\r\n            const filtered = communities\r\n                .params({\r\n                pid,\r\n            })\r\n                .filter((d, $) => d['community.pid'] === $.pid)\r\n                .ungroup();\r\n            return filtered;\r\n        }\r\n        return table();\r\n    }, [pid, communities]);\r\n    return useMemo(() => new CommunityCollection(tbl), [tbl]);\r\n}\r\n// NOTE: do we really need to enforce excluding these fields from the vis config?\r\n// eventually we could have a much more general purpose mapping, which allows\r\n// the user to assign ANY field to ANY encoding property (position, color, size, shape...)\r\nconst exclude = new Set([\r\n    'node.id',\r\n    'node.x',\r\n    'node.y',\r\n    'community.pid',\r\n    'community.level',\r\n]);\r\nexport function useArqueroDataFields() {\r\n    const bigTable = useArqueroBigTable();\r\n    return useMemo(() => bigTable.columnNames((d) => !exclude.has(d)), [bigTable]);\r\n}\r\n// we would prefer the visible nodes to be derived using the parent community\r\n// this ensures that each node has the properties of the child community it resides in\r\n// however, if we select a leaf community with no children, there will be no child entries\r\n// when filtering by parent - in this case, just return the nodes for that community\r\nexport function useArqueroVisibleNodes() {\r\n    const table = useArqueroVisibleNodesTable();\r\n    return useMemo(() => new NodeCollection(table), [table]);\r\n}\r\nexport function useArqueroVisibleNodesTable() {\r\n    const pid = useSelectedCommunity();\r\n    return useCommunityNodesTable(pid);\r\n}\r\n// TODO: actually filter this\r\nexport function useArqueroVisibleEdges(id) {\r\n    const edges = useArqueroEdgeTable();\r\n    return useMemo(() => new EdgeCollection(edges), [edges]);\r\n}\r\nexport function useArqueroHoveredNodes() {\r\n    const hovered = useHoveredCommunity();\r\n    const byParent = useGroupedByParentTable();\r\n    const byCommunity = useGroupedByCommunityTable();\r\n    return useMemo(() => findNodesCollectionForCommunity(hovered, byParent, byCommunity), [hovered, byParent, byCommunity]);\r\n}\r\nexport function useArqueroSelectedNodes() {\r\n    const selected = useSelectedCommunity();\r\n    const nodes = useArqueroVisibleNodes();\r\n    return useMemo(() => (selected === ROOT_COMMUNITY_ID ? new NodeCollection() : nodes), [selected, nodes]);\r\n}\r\nexport function useTableColumnsByType(dataType) {\r\n    // const byCommunity = useGroupedByCommunityTable()\r\n    const bigTable = useArqueroBigTable();\r\n    if (bigTable.numRows() > 0) {\r\n        const def = listColumnDefs(bigTable);\r\n        const columns = def.filter(d => d.dataType === dataType).map(d => d.name);\r\n        const valueTable = bigTable.select(columns);\r\n        return valueTable;\r\n    }\r\n    return table();\r\n}\r\n// for a list of communities, get a map of [cid]: nodepositions[]\r\nexport function useStandardNodePositions() {\r\n    const nodes = useArqueroVisibleNodes();\r\n    return useMemo(() => deriveLayoutPositions(nodes.table), [nodes]);\r\n}\r\nexport function useGriddedNodePositions(compute) {\r\n    const nodes = useArqueroVisibleNodesTable();\r\n    const positions = useMemo(() => {\r\n        if (compute) {\r\n            return deriveSmallMultiplePositions(nodes);\r\n        }\r\n        return {};\r\n    }, [nodes, compute]);\r\n    return positions;\r\n}\r\n// Get Column array for given table. ColAttribute specify col prefix of interest. If non present, return all\r\n// hiddenFields is optional parameter specifying fields that will not be return in hook\r\nexport function useColumnArray(table, colAttribute, hiddenFields) {\r\n    return useMemo(() => {\r\n        const allColumns = table.table.columnNames();\r\n        if (allColumns.length > 0) {\r\n            return allColumns.reduce((acc, col) => {\r\n                const split = col.split('.');\r\n                const [prefix, value] = split;\r\n                const hidden = hiddenFields\r\n                    ? hiddenFields.find(name => name === value)\r\n                    : false;\r\n                const colType = colAttribute\r\n                    ? colAttribute.find(name => name === prefix)\r\n                    : true;\r\n                if (colType && !hidden) {\r\n                    acc.push(col);\r\n                }\r\n                return acc;\r\n            }, []);\r\n        }\r\n        return [];\r\n    }, [table, hiddenFields, colAttribute]);\r\n}\r\n"]}]}