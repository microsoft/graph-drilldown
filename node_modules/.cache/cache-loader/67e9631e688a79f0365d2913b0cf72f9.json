{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\arquero\\table.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\arquero\\table.ts","mtime":1631029334675},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["C:/ws/graph-drill/src/arquero/table.ts"],"names":["ROOT_COMMUNITY_ID","all","not","op","one","table","objects","rename","prefix","exclude","ex","Set","columnNames","reduce","obj","name","has","startsWith","hasColumn","column","some","columnTypes","numRows","map","type","get","recomputeCommunityStats","force","selected","select","mergedChildCount","checkAndAddChildCount","mergedNodeCount","checkAndAddNodeCount","ensureColumn","variants","fallback","fixed","variant","ensureNodeId","ensureCommunityId","derive","ensureParentCommunityId","params","pid","_","$","fixPid","d","ensureX","Math","random","ensureY","ensureD","ensureNodeLabel","ensureEdgeSource","ensureEdgeTarget","ensureEdgeWeight","ensureEdgeId","normalizeXY","bounds","rollup","xMin","min","xMax","max","yMin","yMax","xRange","abs","yRange","aspect","normalizeD","prefixes","node","community","edge","prefixRemaining","columns","pref","split","spec","acc","col","chain","functions","cur","initializeNodeTable","fromEdges","starter","fold","dedupe","ungroup","value","initializeJoinTable","initializeEdgeTable","initializeCommunityTable","joinNodeCommunityTables","nodes","communities","leftKey","rightKey","safe","joined","joinWithReplace","left","right","joinDefinition","join","joinDataTables","joinKey","filter","toMerge","main","childCount","groupby","count","as","join_left","listColumnDefs","readOnlyNames","dataType","readOnly","listColumnNames","defs","findGroupIndices","field","groups","index","rows","findIndex","rowIndex","partitions"],"mappings":"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","sourcesContent":["/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */\r\nimport { ROOT_COMMUNITY_ID } from '../constants';\r\nimport { all, not, op } from 'arquero';\r\n/**\r\n * Extracts the objects from a single-row table.\r\n * This is commonly needed when doing rollups that output\r\n * a single row of stats.\r\n * @param table\r\n */\r\n// TODO: this is pretty basic, but the intent would be to provide optional\r\n// transformers per column or as a whole\r\nexport function one(table) {\r\n    return table.objects()[0];\r\n}\r\n/**\r\n * Return a selection mapping that renames columns with a prefix.\r\n * @param table table to enumerate and rename columns\r\n * @param prefix prefix to add to column names\r\n * @param exclude exclusion list if you want to retain some original columns\r\n */\r\nexport function rename(table, prefix, exclude) {\r\n    const ex = new Set(exclude);\r\n    return table.columnNames().reduce((obj, name) => {\r\n        if (ex.has(name) || name.startsWith(prefix)) {\r\n            obj[name] = name;\r\n        }\r\n        else {\r\n            obj[name] = `${prefix}${name}`;\r\n        }\r\n        return obj;\r\n    }, {});\r\n}\r\nexport function hasColumn(table, column) {\r\n    return table.columnNames().some(name => name === column);\r\n}\r\nexport function columnTypes(table) {\r\n    if (table.numRows() === 0) {\r\n        return [];\r\n    }\r\n    return table.columnNames().map(name => ({\r\n        name,\r\n        type: typeof table.get(name, 0),\r\n    }));\r\n}\r\nexport function recomputeCommunityStats(table, force) {\r\n    const selected = force\r\n        ? table.select(not(['community.nodeCount', 'community.childCount']))\r\n        : table;\r\n    const mergedChildCount = checkAndAddChildCount(selected);\r\n    const mergedNodeCount = checkAndAddNodeCount(mergedChildCount);\r\n    return mergedNodeCount;\r\n}\r\n/**\r\n * Check to ensure a table contains an expected column.\r\n * If not, cycle through valid alternates and rename as\r\n * the expected column. If still no success, use a fallback\r\n * function to define the column.\r\n * @param table\r\n * @param name\r\n * @param variants\r\n * @param fallback\r\n */\r\nfunction ensureColumn(table, name, variants, fallback) {\r\n    if (hasColumn(table, name)) {\r\n        return table;\r\n    }\r\n    let fixed;\r\n    variants.some(variant => {\r\n        if (hasColumn(table, variant)) {\r\n            fixed = table.select(all(), {\r\n                [variant]: name,\r\n            });\r\n            return true;\r\n        }\r\n        return false;\r\n    });\r\n    return fixed || fallback(table);\r\n}\r\n/**\r\n * Check the columns to make sure we have a node.id,\r\n * falling back on other common options.\r\n * In the worst case, we select the first column.\r\n * @param table\r\n */\r\nfunction ensureNodeId(table) {\r\n    return ensureColumn(table, 'node.id', ['id', 'ID', 'nodeId'], table => {\r\n        // just pick the first - this is risky, but sometimes we don't have a header at all\r\n        const column = table.columnNames()[0];\r\n        return table.select(all(), {\r\n            [column]: 'node.id',\r\n        });\r\n    });\r\n}\r\n/**\r\n * Check the colunns to make sure we have a community id ('cid').\r\n * This is required at a basic level for all node tables, so if one isn't\r\n * present we just default to '0' as an id\r\n * @param table\r\n */\r\nfunction ensureCommunityId(table) {\r\n    return ensureColumn(table, 'community.id', ['node.community', 'cid', 'community', 'clusterId'], table => {\r\n        return table.derive({\r\n            'community.id': () => '0',\r\n        });\r\n    });\r\n}\r\nfunction ensureParentCommunityId(table) {\r\n    return ensureColumn(table, 'community.pid', ['pid', 'parentCluster', 'parent'], table => {\r\n        return table\r\n            .params({\r\n            pid: ROOT_COMMUNITY_ID,\r\n        })\r\n            .derive({\r\n            'community.pid': (_, $) => $.pid,\r\n        });\r\n    });\r\n}\r\n// TEMP: make sure there are no empties, which some csvs have\r\n// use our -1 default.\r\n// TODO: use empty as default instead of -1, which need broader refactor\r\nfunction fixPid(table) {\r\n    return table\r\n        .params({\r\n        pid: ROOT_COMMUNITY_ID,\r\n    })\r\n        .derive({\r\n        'community.pid': (d, $) => d['community.pid'] || $.pid,\r\n    });\r\n}\r\nfunction ensureX(table) {\r\n    return ensureColumn(table, 'node.x', ['x', 'X'], table => {\r\n        return table.derive({\r\n            'node.x': () => Math.random(),\r\n        });\r\n    });\r\n}\r\nfunction ensureY(table) {\r\n    return ensureColumn(table, 'node.y', ['y', 'Y'], table => {\r\n        return table.derive({\r\n            'node.y': () => Math.random(),\r\n        });\r\n    });\r\n}\r\nfunction ensureD(table) {\r\n    return ensureColumn(table, 'node.d', ['d', 'D', 'size', 'weight'], table => {\r\n        return table.derive({\r\n            'node.d': () => 1,\r\n        });\r\n    });\r\n}\r\nfunction ensureNodeLabel(table) {\r\n    return ensureColumn(table, 'node.label', ['label', 'name'], table => {\r\n        return table.derive({\r\n            'node.label': (d) => d['node.id'],\r\n        });\r\n    });\r\n}\r\nfunction ensureEdgeSource(table) {\r\n    return ensureColumn(table, 'edge.source', ['source', 'src'], table => {\r\n        return table.derive({\r\n            'edge.source': () => '0',\r\n        });\r\n    });\r\n}\r\nfunction ensureEdgeTarget(table) {\r\n    return ensureColumn(table, 'edge.target', ['target', 'tgt'], table => {\r\n        return table.derive({\r\n            'edge.target': () => '1',\r\n        });\r\n    });\r\n}\r\nfunction ensureEdgeWeight(table) {\r\n    return ensureColumn(table, 'edge.weight', ['weight', 'value'], table => {\r\n        return table.derive({\r\n            'edge.weight': () => 1,\r\n        });\r\n    });\r\n}\r\nfunction ensureEdgeId(table) {\r\n    return ensureColumn(table, 'edge.id', ['id', 'edgeId'], table => {\r\n        return table.derive({\r\n            'edge.id': (d) => `${d['edge.source']}-${d['edge.target']}`,\r\n        });\r\n    });\r\n}\r\n// normalizes x and y in a single operation because we need to maintain aspect ratio\r\nexport function normalizeXY(table) {\r\n    const bounds = table.rollup({\r\n        xMin: op.min('node.x'),\r\n        xMax: op.max('node.x'),\r\n        yMin: op.min('node.y'),\r\n        yMax: op.max('node.y'),\r\n    });\r\n    const xRange = bounds.get('xMax', 0) + Math.abs(bounds.get('xMin', 0));\r\n    const yRange = bounds.get('yMax', 0) + Math.abs(bounds.get('yMin', 0));\r\n    const aspect = xRange / yRange;\r\n    return table\r\n        .params({\r\n        xMin: Math.abs(bounds.get('xMin', 0)),\r\n        xRange,\r\n        yMin: Math.abs(bounds.get('yMin', 0)),\r\n        yRange,\r\n        aspect,\r\n    })\r\n        .derive({\r\n        'node.x': (d, $) => ((d['node.x'] + $.xMin) / $.xRange) * $.aspect,\r\n        'node.y': (d, $) => (d['node.y'] + $.yMin) / $.yRange,\r\n    });\r\n}\r\nfunction normalizeD(table) {\r\n    // for the node size, the range should always be positive\r\n    // we usually specify a minimum of 5 in the files - we do\r\n    // not want those going to 0 once normalized, so here we\r\n    // just norm by the max\r\n    const bounds = table.rollup({\r\n        max: op.max('node.d'),\r\n    });\r\n    return table\r\n        .params({\r\n        max: bounds.get('max', 0),\r\n    })\r\n        .derive({\r\n        'node.d': (d, $) => d['node.d'] / $.max,\r\n    });\r\n}\r\nconst prefixes = {\r\n    node: true,\r\n    community: true,\r\n    edge: true,\r\n};\r\n// our current \"data model\" expects every column to have a type prefix\r\n// used for filtering views, etc.\r\n// this will find any unprefixed columns and add the specified one to them\r\nfunction prefixRemaining(table, prefix) {\r\n    const columns = table.columnNames(name => {\r\n        const pref = name.split('.')[0];\r\n        return !prefixes[pref];\r\n    });\r\n    const spec = columns.reduce((acc, col) => {\r\n        acc[col] = `${prefix}.${col}`;\r\n        return acc;\r\n    }, {});\r\n    return table.select(all(), spec);\r\n}\r\n/**\r\n * Apply a list of functions to a table in series, returning the final output.\r\n * Helper because Arquero does not have something akin to d3's `call`.\r\n * @param table\r\n * @param functions\r\n */\r\nexport function chain(table, functions) {\r\n    return functions.reduce((acc, cur) => cur(acc), table);\r\n}\r\n/**\r\n * Take a starter node table and ensure it has all the required columns (or default values)\r\n * @param table\r\n * @param type\r\n */\r\nexport function initializeNodeTable(table, fromEdges = false) {\r\n    const starter = fromEdges\r\n        ? table\r\n            .fold(['source', 'target'])\r\n            .dedupe('value')\r\n            .ungroup()\r\n            .select({ value: 'id' })\r\n        : table;\r\n    return chain(starter, [\r\n        ensureNodeId,\r\n        ensureNodeLabel,\r\n        ensureCommunityId,\r\n        ensureParentCommunityId,\r\n        ensureX,\r\n        ensureY,\r\n        ensureD,\r\n        normalizeXY,\r\n        normalizeD,\r\n        table => prefixRemaining(table, 'node'),\r\n        checkAndAddChildCount,\r\n        checkAndAddNodeCount,\r\n    ]);\r\n}\r\nexport function initializeJoinTable(table) {\r\n    return chain(table, [ensureNodeId, ensureCommunityId]);\r\n}\r\nexport function initializeEdgeTable(table) {\r\n    return chain(table, [\r\n        ensureEdgeSource,\r\n        ensureEdgeTarget,\r\n        ensureEdgeId,\r\n        ensureEdgeWeight,\r\n        table => prefixRemaining(table, 'edge'),\r\n    ]);\r\n}\r\nexport function initializeCommunityTable(table) {\r\n    return chain(table, [\r\n        ensureCommunityId,\r\n        table => prefixRemaining(table, 'community'),\r\n    ]);\r\n}\r\nexport function joinNodeCommunityTables(nodes, communities) {\r\n    const leftKey = 'node.id';\r\n    const rightKey = 'node.id';\r\n    // ensure the community table (right)\r\n    const safe = chain(communities, [\r\n        ensureNodeId,\r\n        ensureCommunityId,\r\n        ensureParentCommunityId,\r\n        fixPid,\r\n        table => prefixRemaining(table, 'community'),\r\n    ]);\r\n    const joined = joinWithReplace(nodes, safe, [leftKey, rightKey]);\r\n    // if the communities join doesn't have precomputes, run them now\r\n    const rollup = recomputeCommunityStats(joined, !hasColumn(communities, 'community.childCount') ||\r\n        !hasColumn(communities, 'community.nodeCount'));\r\n    return rollup;\r\n}\r\n/**\r\n * Simple join that replaces any columns in the left with matching columns in the right.\r\n * Normal arquero behavior is the rename collisions, but we have so much dependence on\r\n * expected columns that this causes problems.\r\n * It's especially frequent because the join keys are renamed,\r\n * so this lets us join and exclude the key\r\n * @param left\r\n * @param right\r\n * @param leftKey\r\n * @param rightKey\r\n */\r\nexport function joinWithReplace(left, right, joinDefinition) {\r\n    return left.join(right, joinDefinition, [not(right.columnNames()), all()]);\r\n}\r\n/**\r\n * Join a new table to existing, using strict rules of id and prefix.\r\n * I.e., this is not a general-purpose join util, but rather one that\r\n * simplifies our joins by assuming an id column and a prefix for output columns.\r\n * @param left\r\n * @param right\r\n * @param type\r\n * @param leftKey optional explicit left key, otherwise it will use `${type}.id`\r\n * @param rightKey optional explicit right key, otherwise it will use 'id'\r\n */\r\nexport function joinDataTables(left, right, type, leftKey, rightKey = 'id') {\r\n    const joinKey = leftKey || `${type}.id`;\r\n    // for any new columns, we'll add the object type prefix (i.e., node or community),\r\n    // and preserve the required 'id' column. note that node and community ids are stored as\r\n    // strings in csv, so we need to override potential autotyping performed by arquero\r\n    // TODO: this disallows joining of existing columns,\r\n    // because that results in unpredictable column names\r\n    // we could allow overwrite OR make sure the new columns have an intentional new suffix so the existing ones\r\n    // do not receive a new suffix\r\n    // avoid existing columns so they don't collide\r\n    // unless we're doing that on purpose!\r\n    const exclude = new Set(left.columnNames());\r\n    const filter = (name) => !exclude.has(name);\r\n    // TODO: flexibility ideas: we require an ID column now, but this could also (a) just use the first column,\r\n    // and (b) auto-generate an incremental id if none appears present\r\n    const toMerge = right\r\n        // rename all new columns with their prefix except the id\r\n        .select((table) => rename(table, `${type}.`, [rightKey]))\r\n        .select((table) => table.columnNames(filter));\r\n    return left.join(toMerge, [joinKey, rightKey], [all(), not(rightKey)]);\r\n}\r\n/**\r\n * This checks the main table for community.childCount column and computes if missing\r\n * @param main current fully-populated table with joined communities\r\n * @param communities flat community list to rollup childCount\r\n */\r\nexport function checkAndAddChildCount(main) {\r\n    if (hasColumn(main, 'community.childCount')) {\r\n        return main;\r\n    }\r\n    // TODO: is there a faster way to compute this without involving a secondary table?\r\n    const childCount = main\r\n        .dedupe('community.id')\r\n        .groupby('community.pid')\r\n        .count({ as: 'community.childCount' });\r\n    return main\r\n        .join_left(childCount, ['community.id', 'community.pid'], [all(), not('community.pid')])\r\n        .derive({\r\n        // join will leave empty cells where there is no match\r\n        // TODO: can join op be enhanced to provide a fallback fill?\r\n        'community.childCount': (d) => d['community.childCount'] || 0,\r\n    });\r\n}\r\n/**\r\n * This checks the main table for a community.nodeCount column and computes if missing\r\n * @param main current fully-populated table with joined communities\r\n */\r\nexport function checkAndAddNodeCount(main) {\r\n    if (hasColumn(main, 'community.nodeCount')) {\r\n        return main;\r\n    }\r\n    return main\r\n        .groupby('community.id')\r\n        .derive({\r\n        'community.nodeCount': op.count(),\r\n    })\r\n        .ungroup();\r\n}\r\n/**\r\n * Create a set of ColumnDefs by enumerating the table.\r\n * Optional set of column names indicating they are read-only (i.e., not deletable in UI)\r\n * @param table\r\n * @param readOnlyNames\r\n */\r\nexport function listColumnDefs(table, readOnlyNames) {\r\n    if (table.numRows() === 0) {\r\n        return [];\r\n    }\r\n    return table.columnNames().map(name => ({\r\n        name,\r\n        type: name.split('.')[0],\r\n        dataType: typeof table.get(name, 0),\r\n        readOnly: readOnlyNames && readOnlyNames.has(name),\r\n    }));\r\n}\r\nexport function listColumnNames(table) {\r\n    const defs = listColumnDefs(table);\r\n    return defs.map(d => d.name);\r\n}\r\nexport function findGroupIndices(table, field, value) {\r\n    if (table.numRows() > 0) {\r\n        const groups = table.groups();\r\n        const index = groups.rows.findIndex((rowIndex) => table.get(field, rowIndex) === value);\r\n        return table.partitions()[index];\r\n    }\r\n}\r\n"]}]}