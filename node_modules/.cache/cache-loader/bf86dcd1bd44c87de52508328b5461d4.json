{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\hooks\\graph\\view.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\hooks\\graph\\view.ts","mtime":1631029334869},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyohDQogKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdC4NCiAqLwppbXBvcnQgeyBST09UX0NPTU1VTklUWV9JRCB9IGZyb20gJy4uLy4uL2NvbnN0YW50cyc7CmltcG9ydCB7IFZpZXdUeXBlIH0gZnJvbSAnLi4vLi4vdHlwZXMnOwppbXBvcnQgeyB1c2VNZW1vIH0gZnJvbSAncmVhY3QnOwppbXBvcnQgeyB1c2VGZWF0dXJlcywgdXNlR3JhcGhWaWV3VHlwZSwgdXNlTm9kZVN0YXRzQnlDb21tdW5pdHksIHVzZVNlbGVjdGVkQ29tbXVuaXR5IH0gZnJvbSAnfi9zdGF0ZSc7CmV4cG9ydCBmdW5jdGlvbiB1c2VEYXRhQm91bmRzKCkgewogIGNvbnN0IHBpZCA9IHVzZVNlbGVjdGVkQ29tbXVuaXR5KCk7CiAgY29uc3Qgc3RhdHMgPSB1c2VOb2RlU3RhdHNCeUNvbW11bml0eShwaWQsIDAuOTkpOwogIHJldHVybiB1c2VNZW1vKCgpID0+IHsKICAgIC8vIGZvciByb290IHpvb20gbGV2ZWwsIHdlICB3YW50IG1heCBib3VuZHMKICAgIC8vIG90aGVyd2lzZSB3ZSB3YW50IHRvIHpvb20gaW4gYSBsaXR0bGUgYml0IHRvIGlnbm9yZSBmYXItZmx1bmcgb3V0bGllcnMKICAgIGlmIChwaWQgPT09IFJPT1RfQ09NTVVOSVRZX0lEKSB7CiAgICAgIHJldHVybiB7CiAgICAgICAgeDogewogICAgICAgICAgbWluOiAwLAogICAgICAgICAgbWF4OiAxCiAgICAgICAgfSwKICAgICAgICB5OiB7CiAgICAgICAgICBtaW46IDAsCiAgICAgICAgICBtYXg6IDEKICAgICAgICB9CiAgICAgIH07CiAgICB9CgogICAgcmV0dXJuIHsKICAgICAgeDogewogICAgICAgIG1pbjogc3RhdHMubWluWCwKICAgICAgICBtYXg6IHN0YXRzLm1heFgKICAgICAgfSwKICAgICAgeTogewogICAgICAgIG1pbjogc3RhdHMubWluWSwKICAgICAgICBtYXg6IHN0YXRzLm1heFkKICAgICAgfQogICAgfTsKICB9LCBbcGlkLCBzdGF0c10pOwp9CmV4cG9ydCBmdW5jdGlvbiB1c2VDYW1lcmFCb3VuZHMoYm91bmRzKSB7CiAgY29uc3QgdmlldyA9IHVzZUdyYXBoVmlld1R5cGUoKTsKICBjb25zdCBbZmVhdHVyZXNdID0gdXNlRmVhdHVyZXMoKTsKICByZXR1cm4gdXNlTWVtbygoKSA9PiB7CiAgICBpZiAodmlldyA9PT0gVmlld1R5cGUuU2luZ2xlR3JhcGggJiYgZmVhdHVyZXMuZW5hYmxlWm9vbVRvQ29tbXVuaXR5KSB7CiAgICAgIHJldHVybiBib3VuZHM7CiAgICB9CgogICAgcmV0dXJuIHVuZGVmaW5lZDsKICB9LCBbYm91bmRzLCB2aWV3LCBmZWF0dXJlc10pOwp9Ci8qKg0KICogVXNlcyB0aGUgY3VycmVudCBkYXRhYm91bmRzIHBsdXMgdmlldyB0eXBlIHRvIGRldGVybWluZQ0KICogYSBkeW5hbWljIHNldCBvZiBjYW1lcmEgYm91bmRzICh6b29tZWQgaW4gb3Igbm90KS4NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIHVzZUR5bmFtaWNDYW1lcmFCb3VuZHMoKSB7CiAgY29uc3QgZGF0YUJvdW5kcyA9IHVzZURhdGFCb3VuZHMoKTsKICByZXR1cm4gdXNlQ2FtZXJhQm91bmRzKGRhdGFCb3VuZHMpOwp9"},{"version":3,"sources":["C:/ws/graph-drill/src/hooks/graph/view.ts"],"names":["ROOT_COMMUNITY_ID","ViewType","useMemo","useFeatures","useGraphViewType","useNodeStatsByCommunity","useSelectedCommunity","useDataBounds","pid","stats","x","min","max","y","minX","maxX","minY","maxY","useCameraBounds","bounds","view","features","SingleGraph","enableZoomToCommunity","undefined","useDynamicCameraBounds","dataBounds"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,iBAAT,QAAkC,iBAAlC;AACA,SAASC,QAAT,QAAyB,aAAzB;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,WAAT,EAAsBC,gBAAtB,EAAwCC,uBAAxC,EAAiEC,oBAAjE,QAA8F,SAA9F;AACA,OAAO,SAASC,aAAT,GAAyB;AAC5B,QAAMC,GAAG,GAAGF,oBAAoB,EAAhC;AACA,QAAMG,KAAK,GAAGJ,uBAAuB,CAACG,GAAD,EAAM,IAAN,CAArC;AACA,SAAON,OAAO,CAAC,MAAM;AACjB;AACA;AACA,QAAIM,GAAG,KAAKR,iBAAZ,EAA+B;AAC3B,aAAO;AACHU,QAAAA,CAAC,EAAE;AACCC,UAAAA,GAAG,EAAE,CADN;AAECC,UAAAA,GAAG,EAAE;AAFN,SADA;AAKHC,QAAAA,CAAC,EAAE;AACCF,UAAAA,GAAG,EAAE,CADN;AAECC,UAAAA,GAAG,EAAE;AAFN;AALA,OAAP;AAUH;;AACD,WAAO;AACHF,MAAAA,CAAC,EAAE;AACCC,QAAAA,GAAG,EAAEF,KAAK,CAACK,IADZ;AAECF,QAAAA,GAAG,EAAEH,KAAK,CAACM;AAFZ,OADA;AAKHF,MAAAA,CAAC,EAAE;AACCF,QAAAA,GAAG,EAAEF,KAAK,CAACO,IADZ;AAECJ,QAAAA,GAAG,EAAEH,KAAK,CAACQ;AAFZ;AALA,KAAP;AAUH,GAzBa,EAyBX,CAACT,GAAD,EAAMC,KAAN,CAzBW,CAAd;AA0BH;AACD,OAAO,SAASS,eAAT,CAAyBC,MAAzB,EAAiC;AACpC,QAAMC,IAAI,GAAGhB,gBAAgB,EAA7B;AACA,QAAM,CAACiB,QAAD,IAAalB,WAAW,EAA9B;AACA,SAAOD,OAAO,CAAC,MAAM;AACjB,QAAIkB,IAAI,KAAKnB,QAAQ,CAACqB,WAAlB,IAAiCD,QAAQ,CAACE,qBAA9C,EAAqE;AACjE,aAAOJ,MAAP;AACH;;AACD,WAAOK,SAAP;AACH,GALa,EAKX,CAACL,MAAD,EAASC,IAAT,EAAeC,QAAf,CALW,CAAd;AAMH;AACD;AACA;AACA;AACA;;AACA,OAAO,SAASI,sBAAT,GAAkC;AACrC,QAAMC,UAAU,GAAGnB,aAAa,EAAhC;AACA,SAAOW,eAAe,CAACQ,UAAD,CAAtB;AACH","sourcesContent":["/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */\r\nimport { ROOT_COMMUNITY_ID } from '../../constants';\r\nimport { ViewType } from '../../types';\r\nimport { useMemo } from 'react';\r\nimport { useFeatures, useGraphViewType, useNodeStatsByCommunity, useSelectedCommunity, } from '~/state';\r\nexport function useDataBounds() {\r\n    const pid = useSelectedCommunity();\r\n    const stats = useNodeStatsByCommunity(pid, 0.99);\r\n    return useMemo(() => {\r\n        // for root zoom level, we  want max bounds\r\n        // otherwise we want to zoom in a little bit to ignore far-flung outliers\r\n        if (pid === ROOT_COMMUNITY_ID) {\r\n            return {\r\n                x: {\r\n                    min: 0,\r\n                    max: 1,\r\n                },\r\n                y: {\r\n                    min: 0,\r\n                    max: 1,\r\n                },\r\n            };\r\n        }\r\n        return {\r\n            x: {\r\n                min: stats.minX,\r\n                max: stats.maxX,\r\n            },\r\n            y: {\r\n                min: stats.minY,\r\n                max: stats.maxY,\r\n            },\r\n        };\r\n    }, [pid, stats]);\r\n}\r\nexport function useCameraBounds(bounds) {\r\n    const view = useGraphViewType();\r\n    const [features] = useFeatures();\r\n    return useMemo(() => {\r\n        if (view === ViewType.SingleGraph && features.enableZoomToCommunity) {\r\n            return bounds;\r\n        }\r\n        return undefined;\r\n    }, [bounds, view, features]);\r\n}\r\n/**\r\n * Uses the current databounds plus view type to determine\r\n * a dynamic set of camera bounds (zoomed in or not).\r\n */\r\nexport function useDynamicCameraBounds() {\r\n    const dataBounds = useDataBounds();\r\n    return useCameraBounds(dataBounds);\r\n}\r\n"]}]}