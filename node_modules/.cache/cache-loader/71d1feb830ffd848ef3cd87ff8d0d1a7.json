{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\state\\tables.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\state\\tables.ts","mtime":1631034960474},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyohDQogKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdC4NCiAqLwppbXBvcnQgeyB0YWJsZSB9IGZyb20gJ2FycXVlcm8nOwppbXBvcnQgeyBhdG9tLCBzZWxlY3Rvciwgc2VsZWN0b3JGYW1pbHksIHVzZVJlY29pbFZhbHVlLCB1c2VSZXNldFJlY29pbFN0YXRlLCB1c2VTZXRSZWNvaWxTdGF0ZSB9IGZyb20gJ3JlY29pbCc7CmltcG9ydCB7IGZpbmROb2Rlc1RhYmxlRm9yQ29tbXVuaXR5LCBnZXROb2RlU3RhdHMgfSBmcm9tICd+L2FycXVlcm8nOwpleHBvcnQgY29uc3QgYmlnVGFibGVTdGF0ZSA9IGF0b20oewogIGtleTogJ2JpZy10YWJsZScsCiAgZGVmYXVsdDogdGFibGUoKSwKICAvLyB0aGlzIGlzIHJlcXVpcmVkIHNvIHRoYXQgYXJxdWVybyBjYW4gdXBkYXRlIGluZGV4ZXMgdW5kZXIgdGhlIGhvb2QKICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZQp9KTsKZXhwb3J0IGZ1bmN0aW9uIHVzZUJpZ1RhYmxlKCkgewogIHJldHVybiB1c2VSZWNvaWxWYWx1ZShiaWdUYWJsZVN0YXRlKTsKfQpleHBvcnQgZnVuY3Rpb24gdXNlU2V0QmlnVGFibGUoKSB7CiAgcmV0dXJuIHVzZVNldFJlY29pbFN0YXRlKGJpZ1RhYmxlU3RhdGUpOwp9CmV4cG9ydCBmdW5jdGlvbiB1c2VSZXNldEJpZ1RhYmxlKCkgewogIHJldHVybiB1c2VSZXNldFJlY29pbFN0YXRlKGJpZ1RhYmxlU3RhdGUpOwp9IC8vIGtlZXAgYWhvbGQgb2YgYSBwcmUtZ3JvdXBlZCBjb3B5IG9mIHRoZSBiaWcgdGFibGUsCi8vIGJlY2F1c2UgYWxsIG9mIG91ciBpbnRlcmFjdGlvbnMgYXJlIGJhc2VkIGFyb3VuZCBjb21tdW5pdGllcwoKY29uc3QgZ3JvdXBlZENvbW11bml0aWVzVGFibGVTdGF0ZSA9IHNlbGVjdG9yKHsKICBrZXk6ICdncm91cGVkLWNvbW11bml0eS10YWJsZScsCiAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IHRydWUsCiAgZ2V0OiAoewogICAgZ2V0CiAgfSkgPT4gewogICAgY29uc29sZS5sb2coJ2Rlcml2aW5nIHByZS1ncm91cGVkIGNvbW11bml0eSB0YWJsZScpOwogICAgY29uc3QgYmlnVGFibGUgPSBnZXQoYmlnVGFibGVTdGF0ZSk7CgogICAgaWYgKGJpZ1RhYmxlLm51bVJvd3MoKSA9PT0gMCkgewogICAgICByZXR1cm4gdGFibGUoKTsKICAgIH0KCiAgICBjb25zb2xlLnRpbWUoJ2dyb3VwYnkgY29tbXVuaXR5IHN0YXRlJyk7CiAgICBjb25zdCBncm91cGVkID0gYmlnVGFibGUuZ3JvdXBieSgnY29tbXVuaXR5LmlkJyk7CiAgICBjb25zb2xlLnRpbWVFbmQoJ2dyb3VwYnkgY29tbXVuaXR5IHN0YXRlJyk7CiAgICByZXR1cm4gZ3JvdXBlZDsKICB9Cn0pOwpleHBvcnQgZnVuY3Rpb24gdXNlR3JvdXBlZEJ5Q29tbXVuaXR5VGFibGUoKSB7CiAgcmV0dXJuIHVzZVJlY29pbFZhbHVlKGdyb3VwZWRDb21tdW5pdGllc1RhYmxlU3RhdGUpOwp9CmV4cG9ydCBjb25zdCBncm91cGVkUGFyZW50c1RhYmxlU3RhdGUgPSBzZWxlY3Rvcih7CiAga2V5OiAnZ3JvdXBlZC1wYXJlbnQtY29tbXVuaXR5LXRhYmxlJywKICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZSwKICBnZXQ6ICh7CiAgICBnZXQKICB9KSA9PiB7CiAgICBjb25zb2xlLmxvZygnZGVyaXZpbmcgcHJlLWdyb3VwZWQgcGFyZW50IGNvbW11bml0eSB0YWJsZScpOwogICAgY29uc3QgYmlnVGFibGUgPSBnZXQoYmlnVGFibGVTdGF0ZSk7CgogICAgaWYgKGJpZ1RhYmxlLm51bVJvd3MoKSA9PT0gMCkgewogICAgICByZXR1cm4gdGFibGUoKTsKICAgIH0KCiAgICBjb25zb2xlLnRpbWUoJ2dyb3VwYnkgcGFyZW50IHN0YXRlJyk7CiAgICBjb25zdCBncm91cGVkID0gYmlnVGFibGUuZ3JvdXBieSgnY29tbXVuaXR5LnBpZCcpOwogICAgY29uc29sZS50aW1lRW5kKCdncm91cGJ5IHBhcmVudCBzdGF0ZScpOwogICAgcmV0dXJuIGdyb3VwZWQ7CiAgfQp9KTsKZXhwb3J0IGZ1bmN0aW9uIHVzZUdyb3VwZWRCeVBhcmVudFRhYmxlKCkgewogIHJldHVybiB1c2VSZWNvaWxWYWx1ZShncm91cGVkUGFyZW50c1RhYmxlU3RhdGUpOwp9IC8vIHJldHVybnMgYSB0YWJsZSByZXByZXNlbnRpbmcgb25seSB0aGUgbm9kZXMgZm9yIHRoZSBzZWxlY3RlZCBjb21tdW5pdHkKCmV4cG9ydCBjb25zdCBjb21tdW5pdHlOb2Rlc1RhYmxlU3RhdGUgPSBzZWxlY3RvckZhbWlseSh7CiAga2V5OiAnY29tbXVuaXR5LW5vZGVzLXRhYmxlJywKICBnZXQ6IGNpZCA9PiAoewogICAgZ2V0CiAgfSkgPT4gewogICAgY29uc3QgYnlQYXJlbnQgPSBnZXQoZ3JvdXBlZFBhcmVudHNUYWJsZVN0YXRlKTsKICAgIGNvbnN0IGJ5Q29tbXVuaXR5ID0gZ2V0KGdyb3VwZWRDb21tdW5pdGllc1RhYmxlU3RhdGUpOwogICAgcmV0dXJuIGZpbmROb2Rlc1RhYmxlRm9yQ29tbXVuaXR5KGNpZCwgYnlQYXJlbnQsIGJ5Q29tbXVuaXR5KTsKICB9LAogIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlCn0pOwpleHBvcnQgZnVuY3Rpb24gdXNlQ29tbXVuaXR5Tm9kZXNUYWJsZShjaWQpIHsKICByZXR1cm4gdXNlUmVjb2lsVmFsdWUoY29tbXVuaXR5Tm9kZXNUYWJsZVN0YXRlKGNpZCkpOwp9IC8vIGNyZWF0ZXMgYSBzaW5nbGUgcm93IHBlciBjb21tdW5pdHkgaW4gdGhlIGFwcCAoanVzdCBncmFiYmluZyB0aGUgZmlyc3QgZnJvbSBlYWNoIGdyb3VwIGluIHRoZSBiaWcgdGFibGUpCgpjb25zdCBjb21tdW5pdGllc1RhYmxlU3RhdGUgPSBzZWxlY3Rvcih7CiAga2V5OiAnY29tbXVuaXRpZXMtdGFibGUnLAogIGdldDogKHsKICAgIGdldAogIH0pID0+IHsKICAgIGNvbnN0IGJ5Q29tbXVuaXR5ID0gZ2V0KGdyb3VwZWRDb21tdW5pdGllc1RhYmxlU3RhdGUpOwogICAgY29uc29sZS50aW1lKCdjb21tdW5pdGllcyBzdGF0ZScpOwogICAgY29uc3QgZ3JvdXBzID0gYnlDb21tdW5pdHkuZ3JvdXBzKCk7CiAgICBjb25zdCB0YmwgPSBncm91cHMgPyBieUNvbW11bml0eS5yZWlmeShncm91cHMucm93cykgOiB0YWJsZSgpOwogICAgY29uc29sZS50aW1lRW5kKCdjb21tdW5pdGllcyBzdGF0ZScpOwogICAgcmV0dXJuIHRibDsKICB9LAogIGRhbmdlcm91c2x5QWxsb3dNdXRhYmlsaXR5OiB0cnVlCn0pOwpleHBvcnQgZnVuY3Rpb24gdXNlQ29tbXVuaXRpZXNUYWJsZSgpIHsKICByZXR1cm4gdXNlUmVjb2lsVmFsdWUoY29tbXVuaXRpZXNUYWJsZVN0YXRlKTsKfQpjb25zdCBjb21tdW5pdHlOb2RlU3RhdHNTdGF0ZSA9IHNlbGVjdG9yRmFtaWx5KHsKICBrZXk6ICdncm91cGVkLW5vZGUtc3RhdHMnLAogIGdldDogcGFyYW0gPT4gKHsKICAgIGdldAogIH0pID0+IHsKICAgIGNvbnN0IHsKICAgICAgY2lkLAogICAgICBxdWFudGlsZQogICAgfSA9IHBhcmFtOwogICAgY29uc3QgdGFibGUgPSBnZXQoY29tbXVuaXR5Tm9kZXNUYWJsZVN0YXRlKGNpZCkpOwogICAgcmV0dXJuIGdldE5vZGVTdGF0cyh0YWJsZSwgcXVhbnRpbGUpOwogIH0KfSk7CmV4cG9ydCBmdW5jdGlvbiB1c2VOb2RlU3RhdHNCeUNvbW11bml0eShjaWQsIHF1YW50aWxlKSB7CiAgcmV0dXJuIHVzZVJlY29pbFZhbHVlKGNvbW11bml0eU5vZGVTdGF0c1N0YXRlKHsKICAgIGNpZCwKICAgIHF1YW50aWxlCiAgfSkpOwp9IC8vIHN0YW5kYWxvbmUgZWRnZSB0YWJsZQovLyB3ZSBkb24ndCB3YW50IHRvIGpvaW4gdGhhdCB3aXRoIHRoZSBub2RlL2NvbW11bml0eSB0YWJsZSwKLy8gYXMgaXQgd291bGQgYmUgbWFzc2l2ZSBhbmQgbm90IHVzZWZ1bAoKZXhwb3J0IGNvbnN0IGVkZ2VUYWJsZVN0YXRlID0gYXRvbSh7CiAga2V5OiAnZWRnZS10YWJsZScsCiAgZGVmYXVsdDogdGFibGUoKSwKICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZQp9KTsKZXhwb3J0IGZ1bmN0aW9uIHVzZUVkZ2VUYWJsZSgpIHsKICByZXR1cm4gdXNlUmVjb2lsVmFsdWUoZWRnZVRhYmxlU3RhdGUpOwp9CmV4cG9ydCBmdW5jdGlvbiB1c2VTZXRFZGdlVGFibGUoKSB7CiAgcmV0dXJuIHVzZVNldFJlY29pbFN0YXRlKGVkZ2VUYWJsZVN0YXRlKTsKfQpleHBvcnQgZnVuY3Rpb24gdXNlUmVzZXRFZGdlVGFibGUoKSB7CiAgcmV0dXJuIHVzZVJlc2V0UmVjb2lsU3RhdGUoZWRnZVRhYmxlU3RhdGUpOwp9"},{"version":3,"sources":["C:/ws/graph-drill/src/state/tables.ts"],"names":["table","atom","selector","selectorFamily","useRecoilValue","useResetRecoilState","useSetRecoilState","findNodesTableForCommunity","getNodeStats","bigTableState","key","default","dangerouslyAllowMutability","useBigTable","useSetBigTable","useResetBigTable","groupedCommunitiesTableState","get","console","log","bigTable","numRows","time","grouped","groupby","timeEnd","useGroupedByCommunityTable","groupedParentsTableState","useGroupedByParentTable","communityNodesTableState","cid","byParent","byCommunity","useCommunityNodesTable","communitiesTableState","groups","tbl","reify","rows","useCommunitiesTable","communityNodeStatsState","param","quantile","useNodeStatsByCommunity","edgeTableState","useEdgeTable","useSetEdgeTable","useResetEdgeTable"],"mappings":"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","sourcesContent":["/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */\r\nimport { table } from 'arquero';\r\nimport { atom, selector, selectorFamily, useRecoilValue, useResetRecoilState, useSetRecoilState, } from 'recoil';\r\nimport { findNodesTableForCommunity, getNodeStats } from '~/arquero';\r\nexport const bigTableState = atom({\r\n    key: 'big-table',\r\n    default: table(),\r\n    // this is required so that arquero can update indexes under the hood\r\n    dangerouslyAllowMutability: true,\r\n});\r\nexport function useBigTable() {\r\n    return useRecoilValue(bigTableState);\r\n}\r\nexport function useSetBigTable() {\r\n    return useSetRecoilState(bigTableState);\r\n}\r\nexport function useResetBigTable() {\r\n    return useResetRecoilState(bigTableState);\r\n}\r\n// keep ahold of a pre-grouped copy of the big table,\r\n// because all of our interactions are based around communities\r\nconst groupedCommunitiesTableState = selector({\r\n    key: 'grouped-community-table',\r\n    dangerouslyAllowMutability: true,\r\n    get: ({ get }) => {\r\n        console.log('deriving pre-grouped community table');\r\n        const bigTable = get(bigTableState);\r\n        if (bigTable.numRows() === 0) {\r\n            return table();\r\n        }\r\n        console.time('groupby community state');\r\n        const grouped = bigTable.groupby('community.id');\r\n        console.timeEnd('groupby community state');\r\n        return grouped;\r\n    },\r\n});\r\nexport function useGroupedByCommunityTable() {\r\n    return useRecoilValue(groupedCommunitiesTableState);\r\n}\r\nexport const groupedParentsTableState = selector({\r\n    key: 'grouped-parent-community-table',\r\n    dangerouslyAllowMutability: true,\r\n    get: ({ get }) => {\r\n        console.log('deriving pre-grouped parent community table');\r\n        const bigTable = get(bigTableState);\r\n        if (bigTable.numRows() === 0) {\r\n            return table();\r\n        }\r\n        console.time('groupby parent state');\r\n        const grouped = bigTable.groupby('community.pid');\r\n        console.timeEnd('groupby parent state');\r\n        return grouped;\r\n    },\r\n});\r\nexport function useGroupedByParentTable() {\r\n    return useRecoilValue(groupedParentsTableState);\r\n}\r\n// returns a table representing only the nodes for the selected community\r\nexport const communityNodesTableState = selectorFamily({\r\n    key: 'community-nodes-table',\r\n    get: cid => ({ get }) => {\r\n        const byParent = get(groupedParentsTableState);\r\n        const byCommunity = get(groupedCommunitiesTableState);\r\n        return findNodesTableForCommunity(cid, byParent, byCommunity);\r\n    },\r\n    dangerouslyAllowMutability: true,\r\n});\r\nexport function useCommunityNodesTable(cid) {\r\n    return useRecoilValue(communityNodesTableState(cid));\r\n}\r\n// creates a single row per community in the app (just grabbing the first from each group in the big table)\r\nconst communitiesTableState = selector({\r\n    key: 'communities-table',\r\n    get: ({ get }) => {\r\n        const byCommunity = get(groupedCommunitiesTableState);\r\n        console.time('communities state');\r\n        const groups = byCommunity.groups();\r\n        const tbl = groups ? byCommunity.reify(groups.rows) : table();\r\n        console.timeEnd('communities state');\r\n        return tbl;\r\n    },\r\n    dangerouslyAllowMutability: true,\r\n});\r\nexport function useCommunitiesTable() {\r\n    return useRecoilValue(communitiesTableState);\r\n}\r\nconst communityNodeStatsState = selectorFamily({\r\n    key: 'grouped-node-stats',\r\n    get: param => ({ get }) => {\r\n        const { cid, quantile } = param;\r\n        const table = get(communityNodesTableState(cid));\r\n        return getNodeStats(table, quantile);\r\n    },\r\n});\r\nexport function useNodeStatsByCommunity(cid, quantile) {\r\n    return useRecoilValue(communityNodeStatsState({ cid, quantile }));\r\n}\r\n// standalone edge table\r\n// we don't want to join that with the node/community table,\r\n// as it would be massive and not useful\r\nexport const edgeTableState = atom({\r\n    key: 'edge-table',\r\n    default: table(),\r\n    dangerouslyAllowMutability: true,\r\n});\r\nexport function useEdgeTable() {\r\n    return useRecoilValue(edgeTableState);\r\n}\r\nexport function useSetEdgeTable() {\r\n    return useSetRecoilState(edgeTableState);\r\n}\r\nexport function useResetEdgeTable() {\r\n    return useResetRecoilState(edgeTableState);\r\n}\r\n"]}]}