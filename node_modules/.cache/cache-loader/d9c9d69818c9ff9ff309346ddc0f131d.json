{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\arquero\\edges.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\arquero\\edges.ts","mtime":1631029334670},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdGFibGUsIG9wLCBkZXNjIH0gZnJvbSAnYXJxdWVybyc7CmV4cG9ydCBmdW5jdGlvbiBnZXRFZGdlc0Zyb21UYWJsZUJ5SUQoc2VsZWN0ZWRJZCwgbm9kZVRhYmxlLCBlZGdlcykgewogIGlmIChzZWxlY3RlZElkKSB7CiAgICBjb25zb2xlLmxvZygnc2VsZWN0ZWQgaWQnLCBzZWxlY3RlZElkKTsKICAgIGNvbnN0IGpvaW5lZFRhYmxlID0gam9pbk5vZGVDb21tdW5pdGllcyhlZGdlcywgbm9kZVRhYmxlKTsKICAgIGNvbnN0IG5laWdoYm9yVGFibGUgPSBnZXROZWlnaGJvcnMoc2VsZWN0ZWRJZCwgam9pbmVkVGFibGUsIG5vZGVUYWJsZSk7CiAgICByZXR1cm4gbmVpZ2hib3JUYWJsZTsKICB9Cn0gLy8gam9pbnMgdGhlIGNvbW11bml0eSBpZHMgZm9yIGVkZ2Ugc291cmNlL3RhcmdldCBpbnRvIHRoZSBlZGdlIHRhYmxlCgpmdW5jdGlvbiBqb2luTm9kZUNvbW11bml0aWVzKGVkZ2VzLCBub2RlcykgewogIGlmIChlZGdlcy5udW1Sb3dzKCkgPT09IDApIHsKICAgIHJldHVybiB0YWJsZSgpOwogIH0KCiAgY29uc3QgZGVyaXZlZCA9IGVkZ2VzLnBhcmFtcyh7CiAgICBjaWRzOiBoYXNoTm9kZUZpZWxkKG5vZGVzLCAnY29tbXVuaXR5LmlkJykKICB9KS5kZXJpdmUoewogICAgJ3NvdXJjZS5jb21tdW5pdHknOiAoZCwgJCkgPT4gJC5jaWRzW2RbJ2VkZ2Uuc291cmNlJ11dLAogICAgJ3RhcmdldC5jb21tdW5pdHknOiAoZCwgJCkgPT4gJC5jaWRzW2RbJ2VkZ2UudGFyZ2V0J11dCiAgfSk7CiAgcmV0dXJuIGRlcml2ZWQ7Cn0KCmZ1bmN0aW9uIGhhc2hOb2RlRmllbGQobm9kZXMsIGZpZWxkKSB7CiAgY29uc3QgaGFzaCA9IHt9OwogIGNvbnN0IGlkID0gbm9kZXMuZ2V0dGVyKCdub2RlLmlkJyk7CiAgY29uc3QgY2lkID0gbm9kZXMuZ2V0dGVyKGZpZWxkKTsKICBub2Rlcy5zY2FuKGlkeCA9PiBoYXNoW2lkKGlkeCldID0gY2lkKGlkeCkpOwogIHJldHVybiBoYXNoOwp9IC8vIGZvciBhIGdpdmVuIGNvbW11bml0eSwgZmluZHMgYWxsIHRoZSBjb25uZWN0ZWQgc2libGluZyBjb3VudHMgdmlhIGVkZ2VzCgoKZnVuY3Rpb24gZ2V0TmVpZ2hib3JzKHNlbGVjdGVkSWQsIGpvaW5lZCwgbm9kZXMpIHsKICBpZiAoam9pbmVkLm51bVJvd3MoKSA9PT0gMCAmJiBub2Rlcy5udW1Sb3dzKCkgPT09IDApIHsKICAgIHJldHVybiB0YWJsZSgpOwogIH0KCiAgY29uc3QgY0ZpbHRlcmVkID0gam9pbmVkLnBhcmFtcyh7CiAgICBjaWQ6IHNlbGVjdGVkSWQKICB9KS5maWx0ZXIoKGQsICQpID0+IGRbJ3NvdXJjZS5jb21tdW5pdHknXSA9PT0gJC5jaWQgfHwgZFsndGFyZ2V0LmNvbW11bml0eSddID09PSAkLmNpZCk7IC8vIHRoZSBqb2luZWQgdGFibGUgaGFzIGNvbW11bml0aWVzIGZvciB0aGUgc291cmNlIGFuZCB0YXJnZXQgb2YgZWFjaCBlZGdlIHJvdwogIC8vIHRoaXMgbGVhdmVzICBhIGdyb3VwYnkgYW5kIHJvbGx1cCAtIGdyb3VwIGJ5IHRoZSBjb21tdW5pdGllcywgYW5kIHRoZW4gY291bnQgdGhlIGxpbmtzCiAgLy8gZ3JvdXBieSBhY2NlcHRzIG11bHRpcGxlIGNvbHVtbiBrZXlzLCBzbyBpdCB3aWxsIGNyZWF0ZSBncm91cHMgdGhhdCBtYXRjaCBib3RoCgogIGNvbnN0IGdyb3VwZWQgPSBjRmlsdGVyZWQuZ3JvdXBieSh7CiAgICBrZXk6IChkLCAkKSA9PiB7CiAgICAgIGlmIChkWydzb3VyY2UuY29tbXVuaXR5J10gIT09ICQuY2lkKSB7CiAgICAgICAgcmV0dXJuIGRbJ3NvdXJjZS5jb21tdW5pdHknXTsKICAgICAgfQoKICAgICAgcmV0dXJuIGRbJ3RhcmdldC5jb21tdW5pdHknXTsKICAgIH0KICB9KTsgLy8gY291bnQgaXMgYSBidWlsdCBpbiByb2xsdXAgc2hvcnRjdXQgLSBpdCB3aWxsIGNvdW50IHRoZSBudW1iZXIgb2Ygcm93cyBpbiBlYWNoIGpvaW5lZCBncm91cAogIC8vIHRoZSBvdXRwdXQgaXMgYSBuZXcgdGFibGUgd2l0aCB0aGUgcmVzdWx0cyAtIGkuZS4sIGEgcm93IGZvciBlYWNoIGNvdW50CiAgLy8gdGhpcyBpcyBub3cgYSBjb3VudCBvZiB0aGUgZWRnZXMgYmV0d2VlbiB0aGUgc291cmNlIGFuZCB0YXJnZXQgY29tbXVuaXRpZXMKCiAgY29uc3QgY291bnRlZCA9IGdyb3VwZWQuY291bnQoKS5vcmRlcmJ5KGRlc2MoJ2NvdW50JykpOyAvLyBhZGQgYmFjayB0aGUgbm9kZWNvdW50CgogIGNvbnN0IG5ld0pvaW5lZCA9IGNvdW50ZWQubG9va3VwKG5vZGVzLCBbJ2tleScsICdjb21tdW5pdHkuaWQnXSwgewogICAgbWVtYmVyczogZCA9PiBkWydjb21tdW5pdHkubm9kZUNvdW50J10KICB9KTsKICByZXR1cm4gbmV3Sm9pbmVkOwp9Ci8qKg0KICogRmlsdGVycyBhbiBlZGdlIGxpc3QgdG8gb25seSBpbmNsdWRlIGNvbm5lY3Rpb25zIGJldHdlZW4gdGhlIG5vZGVzIGluIHRoZSBwcm92aWRlZCBjb2xsZWN0aW9uDQogKiBAcGFyYW0gZWRnZXMNCiAqIEBwYXJhbSBub2Rlcw0KICovCgoKZXhwb3J0IGZ1bmN0aW9uIGZpbHRlckVkZ2VzVG9Ob2RlcyhlZGdlcywgbm9kZXMpIHsKICBpZiAoZWRnZXMubnVtUm93cygpID09PSAwKSB7CiAgICByZXR1cm4gZWRnZXM7CiAgfSAvLyBub3RlIHRoZSBtYW51YWwgaGFzaDogb3AuaGFzIGRvZXMgTk9UIHdvcmsgd2l0aCBNYXBzCgoKICBjb25zdCBub2RlSWRzID0ge307CiAgbm9kZXMuZm9yRWFjaChub2RlID0+IG5vZGVJZHNbbm9kZS5pZF0gPSB0cnVlKTsKICByZXR1cm4gZWRnZXMucGFyYW1zKHsKICAgIG5vZGVJZHMKICB9KS5maWx0ZXIoKGQsICQpID0+IG9wLmhhcygkLm5vZGVJZHMsIGRbJ2VkZ2Uuc291cmNlJ10pICYmIG9wLmhhcygkLm5vZGVJZHMsIGRbJ2VkZ2UudGFyZ2V0J10pKTsKfQ=="},{"version":3,"sources":["C:/ws/graph-drill/src/arquero/edges.ts"],"names":["table","op","desc","getEdgesFromTableByID","selectedId","nodeTable","edges","console","log","joinedTable","joinNodeCommunities","neighborTable","getNeighbors","nodes","numRows","derived","params","cids","hashNodeField","derive","d","$","field","hash","id","getter","cid","scan","idx","joined","cFiltered","filter","grouped","groupby","key","counted","count","orderby","newJoined","lookup","members","filterEdgesToNodes","nodeIds","forEach","node","has"],"mappings":"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","sourcesContent":["import { table, op, desc } from 'arquero';\r\nexport function getEdgesFromTableByID(selectedId, nodeTable, edges) {\r\n    if (selectedId) {\r\n        console.log('selected id', selectedId);\r\n        const joinedTable = joinNodeCommunities(edges, nodeTable);\r\n        const neighborTable = getNeighbors(selectedId, joinedTable, nodeTable);\r\n        return neighborTable;\r\n    }\r\n}\r\n// joins the community ids for edge source/target into the edge table\r\nfunction joinNodeCommunities(edges, nodes) {\r\n    if (edges.numRows() === 0) {\r\n        return table();\r\n    }\r\n    const derived = edges\r\n        .params({\r\n        cids: hashNodeField(nodes, 'community.id'),\r\n    })\r\n        .derive({\r\n        'source.community': (d, $) => $.cids[d['edge.source']],\r\n        'target.community': (d, $) => $.cids[d['edge.target']],\r\n    });\r\n    return derived;\r\n}\r\nfunction hashNodeField(nodes, field) {\r\n    const hash = {};\r\n    const id = nodes.getter('node.id');\r\n    const cid = nodes.getter(field);\r\n    nodes.scan(idx => (hash[id(idx)] = cid(idx)));\r\n    return hash;\r\n}\r\n// for a given community, finds all the connected sibling counts via edges\r\nfunction getNeighbors(selectedId, joined, nodes) {\r\n    if (joined.numRows() === 0 && nodes.numRows() === 0) {\r\n        return table();\r\n    }\r\n    const cFiltered = joined\r\n        .params({\r\n        cid: selectedId,\r\n    })\r\n        .filter((d, $) => d['source.community'] === $.cid || d['target.community'] === $.cid);\r\n    // the joined table has communities for the source and target of each edge row\r\n    // this leaves  a groupby and rollup - group by the communities, and then count the links\r\n    // groupby accepts multiple column keys, so it will create groups that match both\r\n    const grouped = cFiltered.groupby({\r\n        key: (d, $) => {\r\n            if (d['source.community'] !== $.cid) {\r\n                return d['source.community'];\r\n            }\r\n            return d['target.community'];\r\n        },\r\n    });\r\n    // count is a built in rollup shortcut - it will count the number of rows in each joined group\r\n    // the output is a new table with the results - i.e., a row for each count\r\n    // this is now a count of the edges between the source and target communities\r\n    const counted = grouped.count().orderby(desc('count'));\r\n    // add back the nodecount\r\n    const newJoined = counted.lookup(nodes, ['key', 'community.id'], {\r\n        members: (d) => d['community.nodeCount'],\r\n    });\r\n    return newJoined;\r\n}\r\n/**\r\n * Filters an edge list to only include connections between the nodes in the provided collection\r\n * @param edges\r\n * @param nodes\r\n */\r\nexport function filterEdgesToNodes(edges, nodes) {\r\n    if (edges.numRows() === 0) {\r\n        return edges;\r\n    }\r\n    // note the manual hash: op.has does NOT work with Maps\r\n    const nodeIds = {};\r\n    nodes.forEach(node => (nodeIds[node.id] = true));\r\n    return edges\r\n        .params({\r\n        nodeIds,\r\n    })\r\n        .filter((d, $) => op.has($.nodeIds, d['edge.source']) &&\r\n        op.has($.nodeIds, d['edge.target']));\r\n}\r\n"]}]}