{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\arquero\\communities.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\arquero\\communities.ts","mtime":1631029334668},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyohDQogKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdC4NCiAqLwppbXBvcnQgeyBOb2RlQ29sbGVjdGlvbiB9IGZyb20gJy4vVGFibGVDb2xsZWN0aW9uJzsKaW1wb3J0IHsgZmluZEdyb3VwSW5kaWNlcyB9IGZyb20gJy4vdGFibGUnOwppbXBvcnQgeyB0YWJsZSB9IGZyb20gJ2FycXVlcm8nOwovKioNCiAqIEdldHMgYSB0YWJsZSBvZiBqdXN0IHRoZSBub2RlcyBmb3IgYSBtYXRjaGluZyBjb21tdW5pdHkuDQogKiBUaGUgcHJlZmVycmVkIG91dGNvbWUgaGVyZSBpcyB0byB1c2UgdGhlIGdyb3VwZWQtYnktcGFyZW50IHRhYmxlLA0KICogYmVjYXVzZSB0aGlzIHJldGFpbnMgY2hpbGQgY29tbXVuaXR5IGRpZmZlcmVudGlhYmlsaXR5Lg0KICogSG93ZXZlciwgaWYgdGhlIHNlbGVjdGVkIGNvbW11bml0eSBpcyBhIGxlYWYgaW4gdGhlIGhpZXJhcmNoeSwNCiAqIGl0IHdpbGwgaGF2ZSBubyBjaGlsZCBjb21tdW5pdGllcyBhbmQgdGhlcmVmb3JlIGZpbHRlcmluZyBieSAncGFyZW50Jw0KICogd2lsbCBub3QgcmV0dXJuIGl0IChiZWNhdXNlIHRoZXJlIGFyZSBubyByb3dzIHdpdGggdGhpcyBjaWQgYXMgcGFyZW50KS4NCiAqIEluIHRoaXMgY2FzZSwgd2UgdXNlIHRoZSBncm91cGVkLWJ5LWNvbW11bml0eSB2YXJpYW50IHRvIGdldCB0aGUgbm9kZXMuDQogKiBAcGFyYW0gY2lkDQogKiBAcGFyYW0gYnlQYXJlbnQNCiAqIEBwYXJhbSBieUNvbW11bml0eQ0KICovCgpleHBvcnQgZnVuY3Rpb24gZmluZE5vZGVzVGFibGVGb3JDb21tdW5pdHkoY2lkLCBieVBhcmVudCwgYnlDb21tdW5pdHkpIHsKICBpZiAoIWNpZCkgewogICAgcmV0dXJuIHRhYmxlKCk7CiAgfQoKICBjb25zdCBwaWR4ID0gZmluZEdyb3VwSW5kaWNlcyhieVBhcmVudCwgJ2NvbW11bml0eS5waWQnLCBjaWQpOwogIGNvbnN0IGNpZHggPSBmaW5kR3JvdXBJbmRpY2VzKGJ5Q29tbXVuaXR5LCAnY29tbXVuaXR5LmlkJywgY2lkKTsKICBjb25zdCBpbmRpY2VzID0gcGlkeCB8fCBjaWR4OwogIGNvbnN0IHRibCA9IHBpZHggPyBieVBhcmVudCA6IGJ5Q29tbXVuaXR5OwogIHJldHVybiB0YmwucmVpZnkoaW5kaWNlcyk7Cn0gLy8gdGhpcyBpcyBkdXBsaWNhdGl2ZSBvZiBmaW5kTm9kZXNUYWJsZUZvckNvbW11bml0eSwgYnV0IHJldGFpbmluZyB0aGUgaW5kaWNlcyBhbGxvd3MgdXMgdG8gYXZvaWQgcmVpZnkKCmV4cG9ydCBmdW5jdGlvbiBmaW5kTm9kZXNDb2xsZWN0aW9uRm9yQ29tbXVuaXR5KGNpZCwgYnlQYXJlbnQsIGJ5Q29tbXVuaXR5KSB7CiAgaWYgKCFjaWQpIHsKICAgIHJldHVybiBuZXcgTm9kZUNvbGxlY3Rpb24oKTsKICB9CgogIGNvbnN0IHBpZHggPSBmaW5kR3JvdXBJbmRpY2VzKGJ5UGFyZW50LCAnY29tbXVuaXR5LnBpZCcsIGNpZCk7CiAgY29uc3QgY2lkeCA9IGZpbmRHcm91cEluZGljZXMoYnlDb21tdW5pdHksICdjb21tdW5pdHkuaWQnLCBjaWQpOwogIGNvbnN0IGluZGljZXMgPSBwaWR4IHx8IGNpZHg7CiAgY29uc3QgdGJsID0gcGlkeCA/IGJ5UGFyZW50IDogYnlDb21tdW5pdHk7CiAgcmV0dXJuIG5ldyBOb2RlQ29sbGVjdGlvbih0YmwsIGluZGljZXMpOwp9Ci8qKg0KICogRmluZCBhbGwgb2YgdGhlIG5vZGUgcm93cyBmb3IgY29tbXVuaXRpZXMgdGhhdCBzaGFyZSBhIHBhcmVudC4NCiAqIEBwYXJhbSBwaWQNCiAqIEBwYXJhbSBieVBhcmVudA0KICovCgpleHBvcnQgZnVuY3Rpb24gZmluZE5vZGVzVGFibGVGb3JQYXJlbnQocGlkLCBieVBhcmVudCkgewogIGNvbnN0IHBpZHggPSBmaW5kR3JvdXBJbmRpY2VzKGJ5UGFyZW50LCAnY29tbXVuaXR5LnBpZCcsIHBpZCk7CiAgcmV0dXJuIGJ5UGFyZW50LnJlaWZ5KHBpZHgpOwp9"},{"version":3,"sources":["C:/ws/graph-drill/src/arquero/communities.ts"],"names":["NodeCollection","findGroupIndices","table","findNodesTableForCommunity","cid","byParent","byCommunity","pidx","cidx","indices","tbl","reify","findNodesCollectionForCommunity","findNodesTableForParent","pid"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,cAAT,QAA+B,mBAA/B;AACA,SAASC,gBAAT,QAAiC,SAAjC;AACA,SAASC,KAAT,QAAsB,SAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASC,0BAAT,CAAoCC,GAApC,EAAyCC,QAAzC,EAAmDC,WAAnD,EAAgE;AACnE,MAAI,CAACF,GAAL,EAAU;AACN,WAAOF,KAAK,EAAZ;AACH;;AACD,QAAMK,IAAI,GAAGN,gBAAgB,CAACI,QAAD,EAAW,eAAX,EAA4BD,GAA5B,CAA7B;AACA,QAAMI,IAAI,GAAGP,gBAAgB,CAACK,WAAD,EAAc,cAAd,EAA8BF,GAA9B,CAA7B;AACA,QAAMK,OAAO,GAAGF,IAAI,IAAIC,IAAxB;AACA,QAAME,GAAG,GAAGH,IAAI,GAAGF,QAAH,GAAcC,WAA9B;AACA,SAAOI,GAAG,CAACC,KAAJ,CAAUF,OAAV,CAAP;AACH,C,CACD;;AACA,OAAO,SAASG,+BAAT,CAAyCR,GAAzC,EAA8CC,QAA9C,EAAwDC,WAAxD,EAAqE;AACxE,MAAI,CAACF,GAAL,EAAU;AACN,WAAO,IAAIJ,cAAJ,EAAP;AACH;;AACD,QAAMO,IAAI,GAAGN,gBAAgB,CAACI,QAAD,EAAW,eAAX,EAA4BD,GAA5B,CAA7B;AACA,QAAMI,IAAI,GAAGP,gBAAgB,CAACK,WAAD,EAAc,cAAd,EAA8BF,GAA9B,CAA7B;AACA,QAAMK,OAAO,GAAGF,IAAI,IAAIC,IAAxB;AACA,QAAME,GAAG,GAAGH,IAAI,GAAGF,QAAH,GAAcC,WAA9B;AACA,SAAO,IAAIN,cAAJ,CAAmBU,GAAnB,EAAwBD,OAAxB,CAAP;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASI,uBAAT,CAAiCC,GAAjC,EAAsCT,QAAtC,EAAgD;AACnD,QAAME,IAAI,GAAGN,gBAAgB,CAACI,QAAD,EAAW,eAAX,EAA4BS,GAA5B,CAA7B;AACA,SAAOT,QAAQ,CAACM,KAAT,CAAeJ,IAAf,CAAP;AACH","sourcesContent":["/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */\r\nimport { NodeCollection } from './TableCollection';\r\nimport { findGroupIndices } from './table';\r\nimport { table } from 'arquero';\r\n/**\r\n * Gets a table of just the nodes for a matching community.\r\n * The preferred outcome here is to use the grouped-by-parent table,\r\n * because this retains child community differentiability.\r\n * However, if the selected community is a leaf in the hierarchy,\r\n * it will have no child communities and therefore filtering by 'parent'\r\n * will not return it (because there are no rows with this cid as parent).\r\n * In this case, we use the grouped-by-community variant to get the nodes.\r\n * @param cid\r\n * @param byParent\r\n * @param byCommunity\r\n */\r\nexport function findNodesTableForCommunity(cid, byParent, byCommunity) {\r\n    if (!cid) {\r\n        return table();\r\n    }\r\n    const pidx = findGroupIndices(byParent, 'community.pid', cid);\r\n    const cidx = findGroupIndices(byCommunity, 'community.id', cid);\r\n    const indices = pidx || cidx;\r\n    const tbl = pidx ? byParent : byCommunity;\r\n    return tbl.reify(indices);\r\n}\r\n// this is duplicative of findNodesTableForCommunity, but retaining the indices allows us to avoid reify\r\nexport function findNodesCollectionForCommunity(cid, byParent, byCommunity) {\r\n    if (!cid) {\r\n        return new NodeCollection();\r\n    }\r\n    const pidx = findGroupIndices(byParent, 'community.pid', cid);\r\n    const cidx = findGroupIndices(byCommunity, 'community.id', cid);\r\n    const indices = pidx || cidx;\r\n    const tbl = pidx ? byParent : byCommunity;\r\n    return new NodeCollection(tbl, indices);\r\n}\r\n/**\r\n * Find all of the node rows for communities that share a parent.\r\n * @param pid\r\n * @param byParent\r\n */\r\nexport function findNodesTableForParent(pid, byParent) {\r\n    const pidx = findGroupIndices(byParent, 'community.pid', pid);\r\n    return byParent.reify(pidx);\r\n}\r\n"]}]}