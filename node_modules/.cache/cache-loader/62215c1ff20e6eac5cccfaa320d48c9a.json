{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\components\\CommunityLineup\\CommunityLineup.tsx","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\components\\CommunityLineup\\CommunityLineup.tsx","mtime":1631029334755},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgVGhlbWF0aWNMaW5ldXAgfSBmcm9tICdAZXNzZXgtanMtdG9vbGtpdC90aGVtYXRpYy1saW5ldXAnOwppbXBvcnQgUmVhY3QsIHsgbWVtbywgdXNlQ2FsbGJhY2ssIHVzZU1lbW8gfSBmcm9tICdyZWFjdCc7CmltcG9ydCBzdHlsZWQgZnJvbSAnc3R5bGVkLWNvbXBvbmVudHMnOwppbXBvcnQgJy4vQ29tbXVuaXR5TGluZXVwLmNzcyc7CmltcG9ydCB7IHVzZUFycXVlcm9WaXNpYmxlQ29tbXVuaXRpZXMsIHVzZUNvbHVtbkFycmF5IH0gZnJvbSAnfi9hcnF1ZXJvJzsKY29uc3QgTUlOX0NPTFVNTl9XSURUSCA9IDEwMDsKLyogRGlzcGxheXMgY3VycmVudCBDb21tdW5pdHkgTGluZXVwIGJhc2VkIG9uIGN1cnJlbnQgdXNlciBjb21tdW5pdHkgc2VsZWN0aW9uDQppbiBOYXZpZ2F0aW9uIFBhbmVsIGFuZCB1c2VzIHRoZW1hdGljLWxpbmV1cA0KKi8KCmV4cG9ydCBjb25zdCBDb21tdW5pdHlMaW5ldXAgPSBtZW1vKGZ1bmN0aW9uIENvbW11bml0eUxpbmV1cCh7CiAgd2lkdGgsCiAgaGVpZ2h0Cn0pIHsKICBjb25zdCBjb21tdW5pdGllcyA9IHVzZUFycXVlcm9WaXNpYmxlQ29tbXVuaXRpZXMoKTsKICBjb25zdCBjb2x1bW5Db25maWcgPSB1c2VDb2x1bW5Db25maWcoY29tbXVuaXRpZXMsIHdpZHRoKTsKICBjb25zdCBsaW5ldXBEYXRhID0gdXNlTWVtbygoKSA9PiB7CiAgICBpZiAoY29sdW1uQ29uZmlnLmxlbmd0aCA+IDApIHsKICAgICAgY29uc3QgdmFsdWVzID0gY29tbXVuaXRpZXMubWFwKGNvbW0gPT4gewogICAgICAgIGNvbnN0IGl0ZW0gPSBjb2x1bW5Db25maWcucmVkdWNlKChhY2MsIGNvbHVtbikgPT4gewogICAgICAgICAgYWNjW2NvbHVtbi5uYW1lXSA9IGNvbW0uZ2V0KGNvbHVtbi5uYW1lKTsKICAgICAgICAgIHJldHVybiBhY2M7CiAgICAgICAgfSwge30pOwogICAgICAgIHJldHVybiBpdGVtOwogICAgICB9KTsKICAgICAgcmV0dXJuIHZhbHVlczsKICAgIH0KCiAgICByZXR1cm4gW107CiAgfSwgW2NvbHVtbkNvbmZpZywgY29tbXVuaXRpZXNdKTsKICByZXR1cm4gUmVhY3QuY3JlYXRlRWxlbWVudChDb250YWluZXIsIHsKICAgIHdpZHRoOiB3aWR0aAogIH0sIGxpbmV1cERhdGEubGVuZ3RoID4gMCA/IFJlYWN0LmNyZWF0ZUVsZW1lbnQoVGhlbWF0aWNMaW5ldXAsIHsKICAgIGhpc3RvZ3JhbXM6IHRydWUsCiAgICBkYXRhOiBsaW5ldXBEYXRhLAogICAgY29sdW1uczogY29sdW1uQ29uZmlnLAogICAgd2lkdGg6IHdpZHRoLAogICAgaGVpZ2h0OiBoZWlnaHQsCiAgICAvLyBUT0RPOiB0aGlzIHNob3VsZCB1c2UgdGhlIGNvbHVtbiBJRCwgbm90IHRoZSBsYWJlbC4gaXMgdGhpcyBhIGxpbmV1cCBidWc/CiAgICBkZWZhdWx0U29ydENvbHVtbjogJ05vZGUgY291bnQnLAogICAgZGVmYXVsdFNvcnRBc2NlbmRpbmc6IGZhbHNlCiAgfSkgOiBSZWFjdC5jcmVhdGVFbGVtZW50KFJlYWN0LkZyYWdtZW50LCBudWxsKSk7Cn0pOwpjb25zdCBDb250YWluZXIgPSBzdHlsZWQuZGl2YAoJbWF4LXdpZHRoOiAkeyh7CiAgd2lkdGgKfSkgPT4gd2lkdGh9OwpgOwoKZnVuY3Rpb24gbGFiZWwoY29sKSB7CiAgY29uc3QgdmFsdWUgPSBjb2wuc3BsaXQoJy4nKVsxXTsKICBjb25zdCBzcGFjZWQgPSB2YWx1ZS5yZXBsYWNlKC8oW2EtejAtOV0pKFtBLVpdKS9nLCAnJDEgJDInKTsKICByZXR1cm4gc3BhY2VkLnN1YnN0cigwLCAxKS50b1VwcGVyQ2FzZSgpICsgc3BhY2VkLnN1YnN0cigxKS50b0xvd2VyQ2FzZSgpOwp9IC8vIHNvcnRzIHRoZSBjb2x1bW5zIHRvIG1ha2Ugc3VyZSB0aGUgZmlyc3QgdGhyZWUgbWF0Y2ggdGhlIGRyaWxsZG93biwgYW5kIHRoZSByZXN0IGFyZSBhbHBoYQoKCmZ1bmN0aW9uIHNvcnRDb2x1bW5zKGNvbHVtbnMpIHsKICBjb25zdCBkZWZzID0gewogICAgJ2NvbW11bml0eS5pZCc6IHRydWUsCiAgICAnY29tbXVuaXR5Lm5vZGVDb3VudCc6IHRydWUsCiAgICAnY29tbXVuaXR5LmNoaWxkQ291bnQnOiB0cnVlCiAgfTsKICBjb25zdCBhbHBoYSA9IFsuLi5jb2x1bW5zLnNvcnQoKV0uZmlsdGVyKHMgPT4gIWRlZnNbc10pOwogIHJldHVybiBbLi4uT2JqZWN0LmtleXMoZGVmcyksIC4uLmFscGhhXTsKfQoKZnVuY3Rpb24gdXNlQ29sdW1uQ29uZmlnKGNvbW11bml0aWVzLCB3aWR0aCkgewogIGNvbnN0IGNvbHVtbkxpc3QgPSB1c2VDb2x1bW5BcnJheShjb21tdW5pdGllcywgWydjb21tdW5pdHknXSwgW10pOwogIGNvbnN0IGNvbHVtbnMgPSB1c2VNZW1vKCgpID0+IHsKICAgIGlmIChjb2x1bW5MaXN0Lmxlbmd0aCA+IDApIHsKICAgICAgcmV0dXJuIHNvcnRDb2x1bW5zKGNvbHVtbkxpc3QpOwogICAgfQoKICAgIHJldHVybiBbXTsKICB9LCBbY29sdW1uTGlzdF0pOwogIGNvbnN0IGdldFR5cGVPZiA9IHVzZUNhbGxiYWNrKGNvbHVtbk5hbWUgPT4gdHlwZW9mIGNvbW11bml0aWVzLnRhYmxlLmdldChjb2x1bW5OYW1lLCAwKSwgW2NvbW11bml0aWVzXSk7CiAgY29uc3QgY29uZmlncyA9IHVzZU1lbW8oKCkgPT4gewogICAgaWYgKGNvbHVtbnMubGVuZ3RoID4gMCkgewogICAgICAvLyBleHRyYSAyMHB4IGZyb20gbGluZXVwIGZvciBzZWxlY3Rpb24gY29sdW1uLCBhbmQgNXB4IHBlciBmb3IgcmlnaHQgbWFyZ2luIG9mIGFsbAogICAgICBjb25zdCB3aWR0aFBlckNvbHVtbiA9ICh3aWR0aCAtIDI1IC0gY29sdW1ucy5sZW5ndGggKiA1KSAvIGNvbHVtbnMubGVuZ3RoOwogICAgICByZXR1cm4gY29sdW1ucy5tYXAoKGNvbHVtbiwgaSkgPT4gewogICAgICAgIGNvbnN0IGNvbHVtbk5hbWUgPSBsYWJlbChjb2x1bW4pOwogICAgICAgIHJldHVybiB7CiAgICAgICAgICBuYW1lOiBjb2x1bW4sCiAgICAgICAgICBsYWJlbDogY29sdW1uTmFtZSwKICAgICAgICAgIHR5cGU6IGdldFR5cGVPZihjb2x1bW4pLAogICAgICAgICAgd2lkdGg6IHdpZHRoUGVyQ29sdW1uID4gTUlOX0NPTFVNTl9XSURUSCA/IHdpZHRoUGVyQ29sdW1uIDogTUlOX0NPTFVNTl9XSURUSCwKICAgICAgICAgIGZyb3plbjogdHJ1ZQogICAgICAgIH07CiAgICAgIH0pOwogICAgfQoKICAgIHJldHVybiBbXTsKICB9LCBbY29sdW1ucywgd2lkdGgsIGdldFR5cGVPZl0pOwogIHJldHVybiBjb25maWdzOwp9"},{"version":3,"sources":["C:/ws/graph-drill/src/components/CommunityLineup/CommunityLineup.tsx"],"names":["ThematicLineup","React","memo","useCallback","useMemo","styled","useArqueroVisibleCommunities","useColumnArray","MIN_COLUMN_WIDTH","CommunityLineup","width","height","communities","columnConfig","useColumnConfig","lineupData","length","values","map","comm","item","reduce","acc","column","name","get","createElement","Container","histograms","data","columns","defaultSortColumn","defaultSortAscending","Fragment","div","label","col","value","split","spaced","replace","substr","toUpperCase","toLowerCase","sortColumns","defs","alpha","sort","filter","s","Object","keys","columnList","getTypeOf","columnName","table","configs","widthPerColumn","i","type","frozen"],"mappings":"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","sourcesContent":["import { ThematicLineup } from '@essex-js-toolkit/thematic-lineup';\r\nimport React, { memo, useCallback, useMemo } from 'react';\r\nimport styled from 'styled-components';\r\nimport './CommunityLineup.css';\r\nimport { useArqueroVisibleCommunities, useColumnArray, } from '~/arquero';\r\nconst MIN_COLUMN_WIDTH = 100;\r\n/* Displays current Community Lineup based on current user community selection\r\nin Navigation Panel and uses thematic-lineup\r\n*/\r\nexport const CommunityLineup = memo(function CommunityLineup({ width, height }) {\r\n    const communities = useArqueroVisibleCommunities();\r\n    const columnConfig = useColumnConfig(communities, width);\r\n    const lineupData = useMemo(() => {\r\n        if (columnConfig.length > 0) {\r\n            const values = communities.map(comm => {\r\n                const item = columnConfig.reduce((acc, column) => {\r\n                    acc[column.name] = comm.get(column.name);\r\n                    return acc;\r\n                }, {});\r\n                return item;\r\n            });\r\n            return values;\r\n        }\r\n        return [];\r\n    }, [columnConfig, communities]);\r\n    return (React.createElement(Container, { width: width }, lineupData.length > 0 ? (React.createElement(ThematicLineup, { histograms: true, data: lineupData, columns: columnConfig, width: width, height: height, \r\n        // TODO: this should use the column ID, not the label. is this a lineup bug?\r\n        defaultSortColumn: 'Node count', defaultSortAscending: false })) : (React.createElement(React.Fragment, null))));\r\n});\r\nconst Container = styled.div `\r\n\tmax-width: ${({ width }) => width};\r\n`;\r\nfunction label(col) {\r\n    const value = col.split('.')[1];\r\n    const spaced = value.replace(/([a-z0-9])([A-Z])/g, '$1 $2');\r\n    return spaced.substr(0, 1).toUpperCase() + spaced.substr(1).toLowerCase();\r\n}\r\n// sorts the columns to make sure the first three match the drilldown, and the rest are alpha\r\nfunction sortColumns(columns) {\r\n    const defs = {\r\n        'community.id': true,\r\n        'community.nodeCount': true,\r\n        'community.childCount': true,\r\n    };\r\n    const alpha = [...columns.sort()].filter(s => !defs[s]);\r\n    return [...Object.keys(defs), ...alpha];\r\n}\r\nfunction useColumnConfig(communities, width) {\r\n    const columnList = useColumnArray(communities, ['community'], []);\r\n    const columns = useMemo(() => {\r\n        if (columnList.length > 0) {\r\n            return sortColumns(columnList);\r\n        }\r\n        return [];\r\n    }, [columnList]);\r\n    const getTypeOf = useCallback((columnName) => typeof communities.table.get(columnName, 0), [communities]);\r\n    const configs = useMemo(() => {\r\n        if (columns.length > 0) {\r\n            // extra 20px from lineup for selection column, and 5px per for right margin of all\r\n            const widthPerColumn = (width - 25 - columns.length * 5) / columns.length;\r\n            return columns.map((column, i) => {\r\n                const columnName = label(column);\r\n                return {\r\n                    name: column,\r\n                    label: columnName,\r\n                    type: getTypeOf(column),\r\n                    width: widthPerColumn > MIN_COLUMN_WIDTH\r\n                        ? widthPerColumn\r\n                        : MIN_COLUMN_WIDTH,\r\n                    frozen: true,\r\n                };\r\n            });\r\n        }\r\n        return [];\r\n    }, [columns, width, getTypeOf]);\r\n    return configs;\r\n}\r\n"]}]}