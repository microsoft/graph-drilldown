{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\arquero\\layout.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\arquero\\layout.ts","mtime":1624559748093},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgZGVzYyB9IGZyb20gJ2FycXVlcm8nOyAvLyBUT0RPOiB3ZSBtYXkgd2FudCB0byBwcm92aWRlIGZhbGxiYWNrIGNoZWNrcyBmb3IKLy8gcG9zaXRpb24gY29sdW1ucywgaW4gdGhlIGNhc2UgdGhhdCBhcmJpdHJhcnkgbm9uLWxheW91dCBkYXRhIHdhcwovLyBsb2FkZWQgYnkgdGhlIHVzZXIKCmZ1bmN0aW9uIGdldHRlcnModGFibGUpIHsKICByZXR1cm4gewogICAgaWQ6IHRhYmxlLmdldHRlcignbm9kZS5pZCcpLAogICAgeDogdGFibGUuZ2V0dGVyKCdub2RlLngnKSwKICAgIHk6IHRhYmxlLmdldHRlcignbm9kZS55JykKICB9Owp9CgpleHBvcnQgZnVuY3Rpb24gZGVyaXZlTGF5b3V0UG9zaXRpb25zKHRhYmxlKSB7CiAgY29uc3QgcG9zaXRpb25zID0ge307CgogIGlmICh0YWJsZS5udW1Sb3dzKCkgPT09IDApIHsKICAgIHJldHVybiBwb3NpdGlvbnM7CiAgfQoKICBjb25zdCB7CiAgICBpZCwKICAgIHgsCiAgICB5CiAgfSA9IGdldHRlcnModGFibGUpOwogIHRhYmxlLnNjYW4oaWR4ID0+IHsKICAgIHBvc2l0aW9uc1tpZChpZHgpXSA9IHsKICAgICAgeDogeChpZHgpLAogICAgICB5OiB5KGlkeCkKICAgIH07CiAgfSk7CiAgcmV0dXJuIHBvc2l0aW9uczsKfQpleHBvcnQgZnVuY3Rpb24gZGVyaXZlU21hbGxNdWx0aXBsZVBvc2l0aW9ucyh0YWJsZSkgewogIGNvbnN0IHBvc2l0aW9ucyA9IHt9OwoKICBpZiAodGFibGUubnVtUm93cygpID09PSAwKSB7CiAgICByZXR1cm4gcG9zaXRpb25zOwogIH0KCiAgY29uc3QgewogICAgaWQsCiAgICB4LAogICAgeQogIH0gPSBnZXR0ZXJzKHRhYmxlKTsKICBjb25zdCBncm91cGVkID0gdGFibGUuZ3JvdXBieSgnY29tbXVuaXR5LmlkJyk7CiAgY29uc3QgcGFydGl0aW9ucyA9IGdyb3VwZWQucGFydGl0aW9ucygpOwogIGNvbnN0IGxheW91dCA9IGdyaWQocGFydGl0aW9ucy5sZW5ndGgpOwogIGxldCBjZWxsID0gMDsKICBncm91cGVkLmNvdW50KCkub3JkZXJieShkZXNjKCdjb3VudCcpKS5zY2FuKGlkeCA9PiB7CiAgICBjb25zdCBpbmRpY2VzID0gcGFydGl0aW9uc1tpZHhdOwogICAgaW5kaWNlcy5mb3JFYWNoKGluZGV4ID0+IHsKICAgICAgcG9zaXRpb25zW2lkKGluZGV4KV0gPSBsYXlvdXQoY2VsbCwgeChpbmRleCksIHkoaW5kZXgpKTsKICAgIH0pOwogICAgY2VsbCsrOwogIH0sIHRydWUpOwogIHJldHVybiBwb3NpdGlvbnM7Cn0KLyoqDQogKiBHcmlkIGdlbmVyYXRvciB0aGF0IGFzc2lnbnMgeC95IHBvc2l0aW9ucyBiYXNlZCBvbiB0aGUgZ3JpZCBjZWxsIGluZGV4Lg0KICogVGhpcyAgZmlndXJlZCBvdXQgaG93IHRvIGRpdmlkZSB0aGUgYXZhaWxhYmxlIHNwYWNlIGludG8gY2VsbHMsDQogKiB3aGVyZSBlYWNoIGNlbGwgaGFzIGEgc2l6ZSBhbGxvY2F0ZWQgKGRlcml2ZWQgZnJvbSB0aGUgdG90YWwgYW5kIHdpZHRoKS4NCiAqIEl0IHJldHVybnMgYSBmdW5jdGlvbiB0aGF0IGNvbXB1dGVzIHRoZSB4L3kgcG9zaXRpb24gYmFzZWQgb24gdGhlIG9yaWdpbmFsDQogKiBsYXlvdXQgeC95ICsgdGhlIGdyaWQgY2VsbCBpbmRleC4NCiAqIEkuZS4sIGl0IHBlcmZvcm1zIGEgdHJhbnNsYXRpb24gZnJvbSBmdWxsLXNwYWNlIHgveSB0byBjZWxsIHgveS4NCiAqIEBwYXJhbSBjb3VudCBudW1iZXIgb2YgdG90YWwgZ3JpZCBjZWxscw0KICogQHBhcmFtIHdpZHRoIHdpZHRoIGluIHBpeGVscyBvZiB0aGUgb3V0cHV0IGdyaWQNCiAqLwoKZnVuY3Rpb24gZ3JpZChjb3VudCwgY29sdW1uQ291bnQgPSA4KSB7CiAgaWYgKGNvdW50IDw9IDEpIHsKICAgIHJldHVybiAoY2VsbCwgeCwgeSkgPT4gKHsKICAgICAgeCwKICAgICAgeQogICAgfSk7CiAgfQoKICBjb25zdCBwcm9wb3J0aW9uID0gMSAvIGNvbHVtbkNvdW50OwogIGNvbnN0IGNvbHMgPSBNYXRoLmNlaWwoMSAvIHByb3BvcnRpb24pOwogIGNvbnN0IHJvd3MgPSBNYXRoLmNlaWwoY291bnQgLyBjb2xzKTsKICByZXR1cm4gKGNlbGwsIHgsIHkpID0+IHsKICAgIGNvbnN0IHJvdyA9IE1hdGguZmxvb3IoY2VsbCAvIGNvbHMpOwogICAgY29uc3QgY29sID0gY2VsbCAtIHJvdyAqIGNvbHM7CiAgICBjb25zdCBiYXNlWCA9IDEgLyBjb2xzICogY29sOwogICAgY29uc3QgYmFzZVkgPSAxIC8gcm93cyAqIHJvdzsKICAgIHJldHVybiB7CiAgICAgIHg6IHggKiBwcm9wb3J0aW9uICsgYmFzZVgsCiAgICAgIHk6IHkgKiBwcm9wb3J0aW9uICsgKDEgLSBiYXNlWSAtIDEgLyByb3dzKQogICAgfTsKICB9Owp9"},{"version":3,"sources":["C:/ws/graph-drill/src/arquero/layout.ts"],"names":["desc","getters","table","id","getter","x","y","deriveLayoutPositions","positions","numRows","scan","idx","deriveSmallMultiplePositions","grouped","groupby","partitions","layout","grid","length","cell","count","orderby","indices","forEach","index","columnCount","proportion","cols","Math","ceil","rows","row","floor","col","baseX","baseY"],"mappings":"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","sourcesContent":["import { desc } from 'arquero';\r\n// TODO: we may want to provide fallback checks for\r\n// position columns, in the case that arbitrary non-layout data was\r\n// loaded by the user\r\nfunction getters(table) {\r\n    return {\r\n        id: table.getter('node.id'),\r\n        x: table.getter('node.x'),\r\n        y: table.getter('node.y'),\r\n    };\r\n}\r\nexport function deriveLayoutPositions(table) {\r\n    const positions = {};\r\n    if (table.numRows() === 0) {\r\n        return positions;\r\n    }\r\n    const { id, x, y } = getters(table);\r\n    table.scan((idx) => {\r\n        positions[id(idx)] = {\r\n            x: x(idx),\r\n            y: y(idx),\r\n        };\r\n    });\r\n    return positions;\r\n}\r\nexport function deriveSmallMultiplePositions(table) {\r\n    const positions = {};\r\n    if (table.numRows() === 0) {\r\n        return positions;\r\n    }\r\n    const { id, x, y } = getters(table);\r\n    const grouped = table.groupby('community.id');\r\n    const partitions = grouped.partitions();\r\n    const layout = grid(partitions.length);\r\n    let cell = 0;\r\n    grouped\r\n        .count()\r\n        .orderby(desc('count'))\r\n        .scan((idx) => {\r\n        const indices = partitions[idx];\r\n        indices.forEach((index) => {\r\n            positions[id(index)] = layout(cell, x(index), y(index));\r\n        });\r\n        cell++;\r\n    }, true);\r\n    return positions;\r\n}\r\n/**\r\n * Grid generator that assigns x/y positions based on the grid cell index.\r\n * This  figured out how to divide the available space into cells,\r\n * where each cell has a size allocated (derived from the total and width).\r\n * It returns a function that computes the x/y position based on the original\r\n * layout x/y + the grid cell index.\r\n * I.e., it performs a translation from full-space x/y to cell x/y.\r\n * @param count number of total grid cells\r\n * @param width width in pixels of the output grid\r\n */\r\nfunction grid(count, columnCount = 8) {\r\n    if (count <= 1) {\r\n        return (cell, x, y) => ({\r\n            x,\r\n            y,\r\n        });\r\n    }\r\n    const proportion = 1 / columnCount;\r\n    const cols = Math.ceil(1 / proportion);\r\n    const rows = Math.ceil(count / cols);\r\n    return (cell, x, y) => {\r\n        const row = Math.floor(cell / cols);\r\n        const col = cell - row * cols;\r\n        const baseX = (1 / cols) * col;\r\n        const baseY = (1 / rows) * row;\r\n        return {\r\n            x: x * proportion + baseX,\r\n            y: y * proportion + (1 - baseY - 1 / rows),\r\n        };\r\n    };\r\n}\r\n"]}]}