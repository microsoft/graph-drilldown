{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\state\\caches.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\state\\caches.ts","mtime":1631029334879},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgdW5pcXVlTm9kZXNTdGF0ZSB9IGZyb20gJy4vbm9kZXMnOwppbXBvcnQgeyBzZXR0aW5nc1N0YXRlIH0gZnJvbSAnLi9zZXR0aW5ncyc7CmltcG9ydCB7IGNvbW11bml0eU5vZGVzVGFibGVTdGF0ZSwgZWRnZVRhYmxlU3RhdGUgfSBmcm9tICcuL3RhYmxlcyc7CmltcG9ydCB7IGVkZ2VzVmlzaWJsZVN0YXRlIH0gZnJvbSAnLi92aXMnOwppbXBvcnQgeyBHcmFwaENvbnRhaW5lciB9IGZyb20gJ0BncmFzcG9sb2dpYy9ncmFwaCc7CmltcG9ydCB7IHVzZUVmZmVjdCB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgYXRvbSwgYXRvbUZhbWlseSwgc2VsZWN0b3IsIHNlbGVjdG9yRmFtaWx5LCB1c2VSZWNvaWxTdGF0ZSwgdXNlUmVjb2lsVmFsdWUgfSBmcm9tICdyZWNvaWwnOwppbXBvcnQgeyBFZGdlQ29sbGVjdGlvbiwgZ2V0Q29sdW1uSGlzdG9ncmFtLCBnZXRDb2x1bW5TdGF0cywgTm9kZUNvbGxlY3Rpb24gfSBmcm9tICd+L2FycXVlcm8nOyAvLyB0aGlzIGlzIGEgbWFwIG9mIGNvbG9yIHN0cmluZ3MgdG8gYmdyYSB2YWx1ZXMsCi8vIHRoZSBjb2xvciBwYXJzaW5nIGlzIHZlcnkgZXhwZW5zaXZlLgovLyBub3RlIHRoZSBtdXRhYmlsaXR5IC0gd2Ugd2FudCB0aGlzIHRvIGJlIHVwZGF0ZWQKLy8gZHVyaW5nIGEgc2luZ2xlIHJlbmRlciBsb29wCi8vIHRoaXMgY2FjaGUgY2FuIHBlcnNpc3QgZm9yIHRoZSBsaWZlIG9mIHRoZSBhcHAsIGFzIGFueQovLyBjb2xvciBzdHJpbmcgb25seSBoYXMgb25lIGJncmEgdmFsdWUKCmNvbnN0IGNvbG9yQ2FjaGVTdGF0ZSA9IGF0b20oewogIGtleTogJ2NvbG9yLWNhY2hlJywKICBkZWZhdWx0OiBuZXcgTWFwKCksCiAgZGFuZ2Vyb3VzbHlBbGxvd011dGFiaWxpdHk6IHRydWUKfSk7CmV4cG9ydCBmdW5jdGlvbiB1c2VDb2xvckNhY2hlKCkgewogIHJldHVybiB1c2VSZWNvaWxWYWx1ZShjb2xvckNhY2hlU3RhdGUpOwp9CmNvbnN0IGludGVybmVkR3JhcGhTdGF0ZSA9IHNlbGVjdG9yKHsKICBrZXk6ICdpbnRlcm5lZC1ncmFwaC1jYWNoZScsCiAgZ2V0OiAoewogICAgZ2V0CiAgfSkgPT4gewogICAgY29uc29sZS50aW1lKCdpbnRlcm4gZ3JhcGgnKTsKICAgIGNvbnN0IHNldHRpbmdzID0gZ2V0KHNldHRpbmdzU3RhdGUpOwogICAgY29uc3QgewogICAgICBtYXhFZGdlcywKICAgICAgc3Vic2FtcGxlRWRnZXMsCiAgICAgIG1heE5vZGVzLAogICAgICBzdWJzYW1wbGVOb2RlcwogICAgfSA9IHNldHRpbmdzOwogICAgY29uc3Qgc2hvd0VkZ2VzID0gZ2V0KGVkZ2VzVmlzaWJsZVN0YXRlKTsKICAgIGNvbnN0IG5vZGVzID0gZ2V0KHVuaXF1ZU5vZGVzU3RhdGUpOwogICAgY29uc3QgZWRnZVRhYmxlID0gZ2V0KGVkZ2VUYWJsZVN0YXRlKTsKICAgIGNvbnN0IG5Qcm9wb3J0aW9uID0gc2FtcGxlUHJvcG9ydGlvbihub2Rlcy5zaXplLCBtYXhOb2Rlcywgc3Vic2FtcGxlTm9kZXMpOwogICAgY29uc3QgZWRnZXMgPSBuZXcgRWRnZUNvbGxlY3Rpb24oZWRnZVRhYmxlKTsKICAgIGNvbnN0IGVQcm9wb3J0aW9uID0gc2FtcGxlUHJvcG9ydGlvbihlZGdlcy5zaXplLCBtYXhFZGdlcywgc3Vic2FtcGxlRWRnZXMpOwogICAgY29uc3QgY29udGFpbmVyID0gR3JhcGhDb250YWluZXIuaW50ZXJuKHsKICAgICAgbm9kZXM6IG5vZGVzLnNhbXBsZShuUHJvcG9ydGlvbiksCiAgICAgIGVkZ2VzOiBzaG93RWRnZXMgPyBlZGdlcy5zYW1wbGUoZVByb3BvcnRpb24pIDogW10KICAgIH0pOwogICAgY29uc29sZS50aW1lRW5kKCdpbnRlcm4gZ3JhcGgnKTsKICAgIHJldHVybiBjb250YWluZXI7CiAgfSwKICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZQp9KTsKCmZ1bmN0aW9uIHNhbXBsZVByb3BvcnRpb24obnVtUm93cywgbWF4Um93cywgc3Vic2FtcGxlKSB7CiAgaWYgKHN1YnNhbXBsZSAmJiBudW1Sb3dzID4gbWF4Um93cykgewogICAgcmV0dXJuIG1heFJvd3MgLyBudW1Sb3dzOwogIH0KCiAgcmV0dXJuIDE7Cn0KCmV4cG9ydCBmdW5jdGlvbiB1c2VJbnRlcm5lZEdyYXBoKCkgewogIHJldHVybiB1c2VSZWNvaWxWYWx1ZShpbnRlcm5lZEdyYXBoU3RhdGUpOwp9CmNvbnN0IGludGVybmVkTWluaW1hcEdyYXBoU3RhdGUgPSBzZWxlY3Rvcih7CiAga2V5OiAnaW50ZXJuZWQtbWluaW1hcC1jYWNoZScsCiAgZ2V0OiAoewogICAgZ2V0CiAgfSkgPT4gewogICAgY29uc29sZS50aW1lKCdpbnRlcm4gbWluaW1hcCcpOwogICAgY29uc3Qgc2V0dGluZ3MgPSBnZXQoc2V0dGluZ3NTdGF0ZSk7CiAgICBjb25zdCB7CiAgICAgIG1heE1pbmlNYXBOb2RlcywKICAgICAgc3Vic2FtcGxlTWluaU1hcAogICAgfSA9IHNldHRpbmdzOwogICAgY29uc3Qgbm9kZXMgPSBnZXQodW5pcXVlTm9kZXNTdGF0ZSk7CiAgICBjb25zdCBwcm9wb3J0aW9uID0gc2FtcGxlUHJvcG9ydGlvbihub2Rlcy5zaXplLCBtYXhNaW5pTWFwTm9kZXMsIHN1YnNhbXBsZU1pbmlNYXApOwogICAgY29uc3QgY29udGFpbmVyID0gR3JhcGhDb250YWluZXIuaW50ZXJuKHsKICAgICAgbm9kZXM6IG5vZGVzLnNhbXBsZShwcm9wb3J0aW9uKSwKICAgICAgZWRnZXM6IFtdCiAgICB9KTsKICAgIGNvbnNvbGUudGltZUVuZCgnaW50ZXJuIG1pbmltYXAnKTsKICAgIHJldHVybiBjb250YWluZXI7CiAgfSwKICBkYW5nZXJvdXNseUFsbG93TXV0YWJpbGl0eTogdHJ1ZQp9KTsKZXhwb3J0IGZ1bmN0aW9uIHVzZUludGVybmVkTWluaW1hcEdyYXBoKCkgewogIHJldHVybiB1c2VSZWNvaWxWYWx1ZShpbnRlcm5lZE1pbmltYXBHcmFwaFN0YXRlKTsKfQpjb25zdCB2aXNpYmxlTm9kZU1hcFN0YXRlID0gc2VsZWN0b3JGYW1pbHkoewogIGtleTogJ3Zpc2libGUtbm9kZXMtbWFwJywKICBnZXQ6IGNpZCA9PiAoewogICAgZ2V0CiAgfSkgPT4gewogICAgY29uc3QgdGFibGUgPSBnZXQoY29tbXVuaXR5Tm9kZXNUYWJsZVN0YXRlKGNpZCkpOwogICAgY29uc3Qgbm9kZXMgPSBuZXcgTm9kZUNvbGxlY3Rpb24odGFibGUpOwogICAgcmV0dXJuIG5vZGVzLnRvTWFwKCk7CiAgfQp9KTsKZXhwb3J0IGZ1bmN0aW9uIHVzZVZpc2libGVOb2RlTWFwKGNpZCkgewogIHJldHVybiB1c2VSZWNvaWxWYWx1ZSh2aXNpYmxlTm9kZU1hcFN0YXRlKGNpZCkpOwp9IC8vIGdlbmVyYXRlIGEgdW5pcXVlIGtleSBmb3Igc3RvcmluZyBjYWNoZWQgdmFsdWVzIHJlbGF0ZWQgdG8gYSB0YWJsZQovLyB3YXJuaW5nOiB0aGlzIGlzbid0IGVudGlyZWx5IGd1YXJhbnRlZWQgdG8gYmUgdW5pcXVlLCBidXQgc2hvdWxkCi8vIGNvdmVyIGFueSBleHBlY3RlZCBzY2VuYXJpb3Mgd2UgZW5jb3VudGVyIChyaWdodD8pCgpmdW5jdGlvbiB0YWJsZUtleSh0YWJsZSkgewogIHJldHVybiBgJHt0YWJsZS5jb2x1bW5OYW1lcygpLmpvaW4oJy0nKX0tJHt0YWJsZS5udW1Sb3dzKCl9YDsKfQoKY29uc3QgY2FjaGVkQ29sdW1uU3RhdHNTdGF0ZSA9IGF0b21GYW1pbHkoewogIGtleTogJ2NvbHVtbi1zdGF0cy1jYWNoZScsCiAgZGVmYXVsdDogdW5kZWZpbmVkCn0pOwpleHBvcnQgZnVuY3Rpb24gdXNlQ2FjaGVkQ29sdW1uU3RhdHModGFibGUsIGZpZWxkKSB7CiAgY29uc3Qga2V5ID0gYCR7dGFibGVLZXkodGFibGUpfS0ke2ZpZWxkfWA7CiAgY29uc3QgW2NhY2hlZCwgc2V0Q2FjaGVkXSA9IHVzZVJlY29pbFN0YXRlKGNhY2hlZENvbHVtblN0YXRzU3RhdGUoa2V5KSk7CiAgdXNlRWZmZWN0KCgpID0+IHsKICAgIGlmICghY2FjaGVkKSB7CiAgICAgIGNvbnN0IHN0YXRzID0gZ2V0Q29sdW1uU3RhdHModGFibGUsIGZpZWxkKTsKICAgICAgc2V0Q2FjaGVkKHN0YXRzKTsKICAgIH0KICB9LCBbY2FjaGVkLCBzZXRDYWNoZWQsIHRhYmxlLCBmaWVsZF0pOwogIHJldHVybiBjYWNoZWQ7Cn0KY29uc3QgY2FjaGVkQ29sdW1uSGlzdG9ncmFtU3RhdGUgPSBhdG9tRmFtaWx5KHsKICBrZXk6ICdjb2x1bW4taGlzdG9ncmFtLWNhY2hlJywKICBkZWZhdWx0OiB1bmRlZmluZWQKfSk7CmV4cG9ydCBmdW5jdGlvbiB1c2VDYWNoZWRDb2x1bW5IaXN0b2dyYW0odGFibGUsIGZpZWxkKSB7CiAgY29uc3Qga2V5ID0gYCR7dGFibGVLZXkodGFibGUpfS0ke2ZpZWxkfWA7CiAgY29uc3QgW2NhY2hlZCwgc2V0Q2FjaGVkXSA9IHVzZVJlY29pbFN0YXRlKGNhY2hlZENvbHVtbkhpc3RvZ3JhbVN0YXRlKGtleSkpOwogIHVzZUVmZmVjdCgoKSA9PiB7CiAgICBpZiAoIWNhY2hlZCkgewogICAgICBjb25zdCBoaXN0byA9IGdldENvbHVtbkhpc3RvZ3JhbSh0YWJsZSwgZmllbGQpOwogICAgICBzZXRDYWNoZWQoaGlzdG8pOwogICAgfQogIH0sIFtjYWNoZWQsIHNldENhY2hlZCwgdGFibGUsIGZpZWxkXSk7CiAgcmV0dXJuIGNhY2hlZDsKfQ=="},{"version":3,"sources":["C:/ws/graph-drill/src/state/caches.ts"],"names":["uniqueNodesState","settingsState","communityNodesTableState","edgeTableState","edgesVisibleState","GraphContainer","useEffect","atom","atomFamily","selector","selectorFamily","useRecoilState","useRecoilValue","EdgeCollection","getColumnHistogram","getColumnStats","NodeCollection","colorCacheState","key","default","Map","dangerouslyAllowMutability","useColorCache","internedGraphState","get","console","time","settings","maxEdges","subsampleEdges","maxNodes","subsampleNodes","showEdges","nodes","edgeTable","nProportion","sampleProportion","size","edges","eProportion","container","intern","sample","timeEnd","numRows","maxRows","subsample","useInternedGraph","internedMinimapGraphState","maxMiniMapNodes","subsampleMiniMap","proportion","useInternedMinimapGraph","visibleNodeMapState","cid","table","toMap","useVisibleNodeMap","tableKey","columnNames","join","cachedColumnStatsState","undefined","useCachedColumnStats","field","cached","setCached","stats","cachedColumnHistogramState","useCachedColumnHistogram","histo"],"mappings":"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","sourcesContent":["import { uniqueNodesState } from './nodes';\r\nimport { settingsState } from './settings';\r\nimport { communityNodesTableState, edgeTableState } from './tables';\r\nimport { edgesVisibleState } from './vis';\r\nimport { GraphContainer } from '@graspologic/graph';\r\nimport { useEffect } from 'react';\r\nimport { atom, atomFamily, selector, selectorFamily, useRecoilState, useRecoilValue, } from 'recoil';\r\nimport { EdgeCollection, getColumnHistogram, getColumnStats, NodeCollection, } from '~/arquero';\r\n// this is a map of color strings to bgra values,\r\n// the color parsing is very expensive.\r\n// note the mutability - we want this to be updated\r\n// during a single render loop\r\n// this cache can persist for the life of the app, as any\r\n// color string only has one bgra value\r\nconst colorCacheState = atom({\r\n    key: 'color-cache',\r\n    default: new Map(),\r\n    dangerouslyAllowMutability: true,\r\n});\r\nexport function useColorCache() {\r\n    return useRecoilValue(colorCacheState);\r\n}\r\nconst internedGraphState = selector({\r\n    key: 'interned-graph-cache',\r\n    get: ({ get }) => {\r\n        console.time('intern graph');\r\n        const settings = get(settingsState);\r\n        const { maxEdges, subsampleEdges, maxNodes, subsampleNodes } = settings;\r\n        const showEdges = get(edgesVisibleState);\r\n        const nodes = get(uniqueNodesState);\r\n        const edgeTable = get(edgeTableState);\r\n        const nProportion = sampleProportion(nodes.size, maxNodes, subsampleNodes);\r\n        const edges = new EdgeCollection(edgeTable);\r\n        const eProportion = sampleProportion(edges.size, maxEdges, subsampleEdges);\r\n        const container = GraphContainer.intern({\r\n            nodes: nodes.sample(nProportion),\r\n            edges: showEdges ? edges.sample(eProportion) : [],\r\n        });\r\n        console.timeEnd('intern graph');\r\n        return container;\r\n    },\r\n    dangerouslyAllowMutability: true,\r\n});\r\nfunction sampleProportion(numRows, maxRows, subsample) {\r\n    if (subsample && numRows > maxRows) {\r\n        return maxRows / numRows;\r\n    }\r\n    return 1;\r\n}\r\nexport function useInternedGraph() {\r\n    return useRecoilValue(internedGraphState);\r\n}\r\nconst internedMinimapGraphState = selector({\r\n    key: 'interned-minimap-cache',\r\n    get: ({ get }) => {\r\n        console.time('intern minimap');\r\n        const settings = get(settingsState);\r\n        const { maxMiniMapNodes, subsampleMiniMap } = settings;\r\n        const nodes = get(uniqueNodesState);\r\n        const proportion = sampleProportion(nodes.size, maxMiniMapNodes, subsampleMiniMap);\r\n        const container = GraphContainer.intern({\r\n            nodes: nodes.sample(proportion),\r\n            edges: [],\r\n        });\r\n        console.timeEnd('intern minimap');\r\n        return container;\r\n    },\r\n    dangerouslyAllowMutability: true,\r\n});\r\nexport function useInternedMinimapGraph() {\r\n    return useRecoilValue(internedMinimapGraphState);\r\n}\r\nconst visibleNodeMapState = selectorFamily({\r\n    key: 'visible-nodes-map',\r\n    get: cid => ({ get }) => {\r\n        const table = get(communityNodesTableState(cid));\r\n        const nodes = new NodeCollection(table);\r\n        return nodes.toMap();\r\n    },\r\n});\r\nexport function useVisibleNodeMap(cid) {\r\n    return useRecoilValue(visibleNodeMapState(cid));\r\n}\r\n// generate a unique key for storing cached values related to a table\r\n// warning: this isn't entirely guaranteed to be unique, but should\r\n// cover any expected scenarios we encounter (right?)\r\nfunction tableKey(table) {\r\n    return `${table.columnNames().join('-')}-${table.numRows()}`;\r\n}\r\nconst cachedColumnStatsState = atomFamily({\r\n    key: 'column-stats-cache',\r\n    default: undefined,\r\n});\r\nexport function useCachedColumnStats(table, field) {\r\n    const key = `${tableKey(table)}-${field}`;\r\n    const [cached, setCached] = useRecoilState(cachedColumnStatsState(key));\r\n    useEffect(() => {\r\n        if (!cached) {\r\n            const stats = getColumnStats(table, field);\r\n            setCached(stats);\r\n        }\r\n    }, [cached, setCached, table, field]);\r\n    return cached;\r\n}\r\nconst cachedColumnHistogramState = atomFamily({\r\n    key: 'column-histogram-cache',\r\n    default: undefined,\r\n});\r\nexport function useCachedColumnHistogram(table, field) {\r\n    const key = `${tableKey(table)}-${field}`;\r\n    const [cached, setCached] = useRecoilState(cachedColumnHistogramState(key));\r\n    useEffect(() => {\r\n        if (!cached) {\r\n            const histo = getColumnHistogram(table, field);\r\n            setCached(histo);\r\n        }\r\n    }, [cached, setCached, table, field]);\r\n    return cached;\r\n}\r\n"]}]}