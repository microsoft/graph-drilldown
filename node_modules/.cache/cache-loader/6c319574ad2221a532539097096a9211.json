{"remainingRequest":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js??ruleSet[1].rules[0].use[1]!C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js??ruleSet[1].rules[0].use[2]!C:\\ws\\graph-drill\\src\\hooks\\graph\\nodes.ts","dependencies":[{"path":"C:\\ws\\graph-drill\\src\\hooks\\graph\\nodes.ts","mtime":1631029334865},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\cache-loader-virtual-2fd14a2267\\0\\cache\\cache-loader-npm-4.1.0-82c3da90d8-0339778bdd.zip\\node_modules\\cache-loader\\dist\\cjs.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\babel-loader-virtual-fd8dd261de\\0\\cache\\babel-loader-npm-8.2.2-b4e600c2c5-df5092ef98.zip\\node_modules\\babel-loader\\lib\\index.js","mtime":456789000000},{"path":"C:\\ws\\graph-drill\\.yarn\\__virtual__\\ts-loader-virtual-aa0d54d245\\0\\cache\\ts-loader-npm-9.2.1-40e1a5908e-1f2e61905d.zip\\node_modules\\ts-loader\\index.js","mtime":456789000000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:LyohDQogKiBDb3B5cmlnaHQgKGMpIE1pY3Jvc29mdC4gQWxsIHJpZ2h0cyByZXNlcnZlZC4NCiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBNSVQgbGljZW5zZS4gU2VlIExJQ0VOU0UgZmlsZSBpbiB0aGUgcHJvamVjdC4NCiAqLwppbXBvcnQgeyBWaWV3VHlwZSB9IGZyb20gJy4uLy4uL3R5cGVzJzsKaW1wb3J0IHsgdXNlQ29sb3JpemVyLCB1c2VSYW5nZSwgdXNlV2VpZ2h0ZXIgfSBmcm9tICcuL2dyYXNwb2xvZ2ljJzsKaW1wb3J0IHsgdXNlTWVtbyB9IGZyb20gJ3JlYWN0JzsKaW1wb3J0IHsgdXNlTm9kZUNvbG9yRW5jb2RpbmcsIHVzZU5vZGVTaXplRW5jb2RpbmcsIHVzZVNlbGVjdGVkQ29tbXVuaXR5IH0gZnJvbSAnfi9zdGF0ZSc7CmltcG9ydCB7IHVzZVZpc2libGVOb2RlTWFwIH0gZnJvbSAnfi9zdGF0ZS9jYWNoZXMnOwppbXBvcnQgeyB1c2VOb2RlT3BhY2l0eUVuY29kaW5nIH0gZnJvbSAnfi9zdGF0ZS92aXMvbm9kZU9wYWNpdHknOwpleHBvcnQgZnVuY3Rpb24gdXNlTm9kZUlkcyhub2RlcykgewogIHJldHVybiB1c2VNZW1vKCgpID0+IG5vZGVzID8gbm9kZXMubWFwKG5vZGUgPT4gbm9kZS5pZCkgOiBbXSwgW25vZGVzXSk7Cn0KZXhwb3J0IGZ1bmN0aW9uIHVzZU5vZGVDb2x1bW5zKG5vZGVzKSB7CiAgY29uc3QgaWRzID0gdXNlTWVtbygoKSA9PiB7CiAgICBpZiAobm9kZXMpIHsKICAgICAgcmV0dXJuIG5vZGVzLm1hcChub2RlID0+IHsKICAgICAgICBjb25zdCBhdHRycyA9IHsKICAgICAgICAgIHg6IG5vZGUueCwKICAgICAgICAgIHk6IG5vZGUueSwKICAgICAgICAgIGQ6IG5vZGUuZAogICAgICAgIH07CiAgICAgICAgcmV0dXJuIHsKICAgICAgICAgIGlkOiBub2RlLmlkLAogICAgICAgICAgYXR0cnMKICAgICAgICB9OwogICAgICB9KTsKICAgIH0KCiAgICByZXR1cm4gW107CiAgfSwgW25vZGVzXSk7CiAgcmV0dXJuIGlkczsKfQpleHBvcnQgZnVuY3Rpb24gdXNlTm9kZVdlaWdodGVyKCkgewogIGNvbnN0IGVuY29kaW5nID0gdXNlTm9kZVNpemVFbmNvZGluZygpOwogIGNvbnN0IGNpZCA9IHVzZVNlbGVjdGVkQ29tbXVuaXR5KCk7CiAgY29uc3QgbWFwID0gdXNlVmlzaWJsZU5vZGVNYXAoY2lkKTsKICByZXR1cm4gdXNlV2VpZ2h0ZXIoZW5jb2RpbmcsIG1hcCk7Cn0KZXhwb3J0IGZ1bmN0aW9uIHVzZU5vZGVDb2xvclNjYWxlKCkgewogIGNvbnN0IGNvbG9yRW5jb2RpbmcgPSB1c2VOb2RlQ29sb3JFbmNvZGluZygpOwogIGNvbnN0IG9wYWNpdHlFbmNvZGluZyA9IHVzZU5vZGVPcGFjaXR5RW5jb2RpbmcoKTsKICBjb25zdCBjaWQgPSB1c2VTZWxlY3RlZENvbW11bml0eSgpOwogIGNvbnN0IG1hcCA9IHVzZVZpc2libGVOb2RlTWFwKGNpZCk7CiAgcmV0dXJuIHVzZUNvbG9yaXplcihjb2xvckVuY29kaW5nLCBvcGFjaXR5RW5jb2RpbmcsIG1hcCk7Cn0KLyoqDQogKiBSYWRpaSBhcmUgYm91bmQgdG8gYSBtaW4vbWF4IHdpZHRoIHJhdGhlciB0aGFuDQogKiBjb21wbGV0ZWx5IHNjYWxlLWRyaXZlbiBsaWtlIGNvbG9yLg0KICogVGhpcyB0b2dnbGVzIGJldHdlZW4gdGhlIGZpeGVkIG1pbi9tYXggYW5kIHNjYWxlZC4NCiAqLwoKZXhwb3J0IGZ1bmN0aW9uIHVzZU5vZGVTaXplUmFuZ2UoKSB7CiAgY29uc3QgZW5jb2RpbmcgPSB1c2VOb2RlU2l6ZUVuY29kaW5nKCk7CiAgcmV0dXJuIHVzZVJhbmdlKGVuY29kaW5nKTsKfQpleHBvcnQgZnVuY3Rpb24gdXNlTm9kZVBvc2l0aW9ucyhwb3NpdGlvbk1hcHMsIHZpZXcsIGR1cmF0aW9uKSB7CiAgcmV0dXJuIHVzZU1lbW8oKCkgPT4gewogICAgY29uc3QgcG9zaXRpb25zID0gdmlldyA9PT0gVmlld1R5cGUuU2luZ2xlR3JhcGggPyBwb3NpdGlvbk1hcHNbMF0gOiBwb3NpdGlvbk1hcHNbMV07CiAgICByZXR1cm4gewogICAgICBkdXJhdGlvbiwKICAgICAgeDogaWQgPT4gewogICAgICAgIHZhciBfcG9zaXRpb25zJGlkOwoKICAgICAgICByZXR1cm4gKChfcG9zaXRpb25zJGlkID0gcG9zaXRpb25zW2lkXSkgPT09IG51bGwgfHwgX3Bvc2l0aW9ucyRpZCA9PT0gdm9pZCAwID8gdm9pZCAwIDogX3Bvc2l0aW9ucyRpZC54KSB8fCAwOwogICAgICB9LAogICAgICB5OiBpZCA9PiB7CiAgICAgICAgdmFyIF9wb3NpdGlvbnMkaWQyOwoKICAgICAgICByZXR1cm4gKChfcG9zaXRpb25zJGlkMiA9IHBvc2l0aW9uc1tpZF0pID09PSBudWxsIHx8IF9wb3NpdGlvbnMkaWQyID09PSB2b2lkIDAgPyB2b2lkIDAgOiBfcG9zaXRpb25zJGlkMi55KSB8fCAwOwogICAgICB9CiAgICB9OwogIH0sIFtwb3NpdGlvbk1hcHMsIHZpZXcsIGR1cmF0aW9uXSk7Cn0="},{"version":3,"sources":["C:/ws/graph-drill/src/hooks/graph/nodes.ts"],"names":["ViewType","useColorizer","useRange","useWeighter","useMemo","useNodeColorEncoding","useNodeSizeEncoding","useSelectedCommunity","useVisibleNodeMap","useNodeOpacityEncoding","useNodeIds","nodes","map","node","id","useNodeColumns","ids","attrs","x","y","d","useNodeWeighter","encoding","cid","useNodeColorScale","colorEncoding","opacityEncoding","useNodeSizeRange","useNodePositions","positionMaps","view","duration","positions","SingleGraph"],"mappings":"AAAA;AACA;AACA;AACA;AACA,SAASA,QAAT,QAAyB,aAAzB;AACA,SAASC,YAAT,EAAuBC,QAAvB,EAAiCC,WAAjC,QAAoD,eAApD;AACA,SAASC,OAAT,QAAwB,OAAxB;AACA,SAASC,oBAAT,EAA+BC,mBAA/B,EAAoDC,oBAApD,QAAiF,SAAjF;AACA,SAASC,iBAAT,QAAkC,gBAAlC;AACA,SAASC,sBAAT,QAAuC,yBAAvC;AACA,OAAO,SAASC,UAAT,CAAoBC,KAApB,EAA2B;AAC9B,SAAOP,OAAO,CAAC,MAAOO,KAAK,GAAGA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAIA,IAAI,CAACC,EAAvB,CAAH,GAAgC,EAA7C,EAAkD,CAACH,KAAD,CAAlD,CAAd;AACH;AACD,OAAO,SAASI,cAAT,CAAwBJ,KAAxB,EAA+B;AAClC,QAAMK,GAAG,GAAGZ,OAAO,CAAC,MAAM;AACtB,QAAIO,KAAJ,EAAW;AACP,aAAOA,KAAK,CAACC,GAAN,CAAUC,IAAI,IAAI;AACrB,cAAMI,KAAK,GAAG;AAAEC,UAAAA,CAAC,EAAEL,IAAI,CAACK,CAAV;AAAaC,UAAAA,CAAC,EAAEN,IAAI,CAACM,CAArB;AAAwBC,UAAAA,CAAC,EAAEP,IAAI,CAACO;AAAhC,SAAd;AACA,eAAO;AAAEN,UAAAA,EAAE,EAAED,IAAI,CAACC,EAAX;AAAeG,UAAAA;AAAf,SAAP;AACH,OAHM,CAAP;AAIH;;AACD,WAAO,EAAP;AACH,GARkB,EAQhB,CAACN,KAAD,CARgB,CAAnB;AASA,SAAOK,GAAP;AACH;AACD,OAAO,SAASK,eAAT,GAA2B;AAC9B,QAAMC,QAAQ,GAAGhB,mBAAmB,EAApC;AACA,QAAMiB,GAAG,GAAGhB,oBAAoB,EAAhC;AACA,QAAMK,GAAG,GAAGJ,iBAAiB,CAACe,GAAD,CAA7B;AACA,SAAOpB,WAAW,CAACmB,QAAD,EAAWV,GAAX,CAAlB;AACH;AACD,OAAO,SAASY,iBAAT,GAA6B;AAChC,QAAMC,aAAa,GAAGpB,oBAAoB,EAA1C;AACA,QAAMqB,eAAe,GAAGjB,sBAAsB,EAA9C;AACA,QAAMc,GAAG,GAAGhB,oBAAoB,EAAhC;AACA,QAAMK,GAAG,GAAGJ,iBAAiB,CAACe,GAAD,CAA7B;AACA,SAAOtB,YAAY,CAACwB,aAAD,EAAgBC,eAAhB,EAAiCd,GAAjC,CAAnB;AACH;AACD;AACA;AACA;AACA;AACA;;AACA,OAAO,SAASe,gBAAT,GAA4B;AAC/B,QAAML,QAAQ,GAAGhB,mBAAmB,EAApC;AACA,SAAOJ,QAAQ,CAACoB,QAAD,CAAf;AACH;AACD,OAAO,SAASM,gBAAT,CAA0BC,YAA1B,EAAwCC,IAAxC,EAA8CC,QAA9C,EAAwD;AAC3D,SAAO3B,OAAO,CAAC,MAAM;AACjB,UAAM4B,SAAS,GAAGF,IAAI,KAAK9B,QAAQ,CAACiC,WAAlB,GAAgCJ,YAAY,CAAC,CAAD,CAA5C,GAAkDA,YAAY,CAAC,CAAD,CAAhF;AACA,WAAO;AACHE,MAAAA,QADG;AAEHb,MAAAA,CAAC,EAAEJ,EAAE;AAAA;;AAAA,eAAI,kBAAAkB,SAAS,CAAClB,EAAD,CAAT,gEAAeI,CAAf,KAAoB,CAAxB;AAAA,OAFF;AAGHC,MAAAA,CAAC,EAAEL,EAAE;AAAA;;AAAA,eAAI,mBAAAkB,SAAS,CAAClB,EAAD,CAAT,kEAAeK,CAAf,KAAoB,CAAxB;AAAA;AAHF,KAAP;AAKH,GAPa,EAOX,CAACU,YAAD,EAAeC,IAAf,EAAqBC,QAArB,CAPW,CAAd;AAQH","sourcesContent":["/*!\r\n * Copyright (c) Microsoft. All rights reserved.\r\n * Licensed under the MIT license. See LICENSE file in the project.\r\n */\r\nimport { ViewType } from '../../types';\r\nimport { useColorizer, useRange, useWeighter } from './graspologic';\r\nimport { useMemo } from 'react';\r\nimport { useNodeColorEncoding, useNodeSizeEncoding, useSelectedCommunity, } from '~/state';\r\nimport { useVisibleNodeMap } from '~/state/caches';\r\nimport { useNodeOpacityEncoding } from '~/state/vis/nodeOpacity';\r\nexport function useNodeIds(nodes) {\r\n    return useMemo(() => (nodes ? nodes.map(node => node.id) : []), [nodes]);\r\n}\r\nexport function useNodeColumns(nodes) {\r\n    const ids = useMemo(() => {\r\n        if (nodes) {\r\n            return nodes.map(node => {\r\n                const attrs = { x: node.x, y: node.y, d: node.d };\r\n                return { id: node.id, attrs };\r\n            });\r\n        }\r\n        return [];\r\n    }, [nodes]);\r\n    return ids;\r\n}\r\nexport function useNodeWeighter() {\r\n    const encoding = useNodeSizeEncoding();\r\n    const cid = useSelectedCommunity();\r\n    const map = useVisibleNodeMap(cid);\r\n    return useWeighter(encoding, map);\r\n}\r\nexport function useNodeColorScale() {\r\n    const colorEncoding = useNodeColorEncoding();\r\n    const opacityEncoding = useNodeOpacityEncoding();\r\n    const cid = useSelectedCommunity();\r\n    const map = useVisibleNodeMap(cid);\r\n    return useColorizer(colorEncoding, opacityEncoding, map);\r\n}\r\n/**\r\n * Radii are bound to a min/max width rather than\r\n * completely scale-driven like color.\r\n * This toggles between the fixed min/max and scaled.\r\n */\r\nexport function useNodeSizeRange() {\r\n    const encoding = useNodeSizeEncoding();\r\n    return useRange(encoding);\r\n}\r\nexport function useNodePositions(positionMaps, view, duration) {\r\n    return useMemo(() => {\r\n        const positions = view === ViewType.SingleGraph ? positionMaps[0] : positionMaps[1];\r\n        return {\r\n            duration,\r\n            x: id => positions[id]?.x || 0,\r\n            y: id => positions[id]?.y || 0,\r\n        };\r\n    }, [positionMaps, view, duration]);\r\n}\r\n"]}]}